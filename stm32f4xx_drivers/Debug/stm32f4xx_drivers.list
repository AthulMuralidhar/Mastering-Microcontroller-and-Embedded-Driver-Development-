
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000984  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000b0c  08000b14  00001b14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000b0c  08000b0c  00001b14  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000b0c  08000b0c  00001b14  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000b0c  08000b14  00001b14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b0c  08000b0c  00001b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000b10  08000b10  00001b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001b14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001b14  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001b14  2**0
                  CONTENTS, READONLY
 13 .comment      00000026  00000000  00000000  00001b44  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000c49  00000000  00000000  00001b6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000470  00000000  00000000  000027b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000108  00000000  00000000  00002c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000008d  00000000  00000000  00002d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00001e9c  00000000  00000000  00002dbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00000c95  00000000  00000000  00004c59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00008c46  00000000  00000000  000058ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000002a4  00000000  00000000  0000e534  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008c  00000000  00000000  0000e7d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loclists 00000227  00000000  00000000  0000e864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <deregister_tm_clones>:
 8000188:	4803      	ldr	r0, [pc, #12]	@ (8000198 <deregister_tm_clones+0x10>)
 800018a:	4b04      	ldr	r3, [pc, #16]	@ (800019c <deregister_tm_clones+0x14>)
 800018c:	4283      	cmp	r3, r0
 800018e:	d002      	beq.n	8000196 <deregister_tm_clones+0xe>
 8000190:	4b03      	ldr	r3, [pc, #12]	@ (80001a0 <deregister_tm_clones+0x18>)
 8000192:	b103      	cbz	r3, 8000196 <deregister_tm_clones+0xe>
 8000194:	4718      	bx	r3
 8000196:	4770      	bx	lr
 8000198:	20000000 	.word	0x20000000
 800019c:	20000000 	.word	0x20000000
 80001a0:	00000000 	.word	0x00000000

080001a4 <register_tm_clones>:
 80001a4:	4805      	ldr	r0, [pc, #20]	@ (80001bc <register_tm_clones+0x18>)
 80001a6:	4b06      	ldr	r3, [pc, #24]	@ (80001c0 <register_tm_clones+0x1c>)
 80001a8:	1a1b      	subs	r3, r3, r0
 80001aa:	0fd9      	lsrs	r1, r3, #31
 80001ac:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 80001b0:	1049      	asrs	r1, r1, #1
 80001b2:	d002      	beq.n	80001ba <register_tm_clones+0x16>
 80001b4:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <register_tm_clones+0x20>)
 80001b6:	b103      	cbz	r3, 80001ba <register_tm_clones+0x16>
 80001b8:	4718      	bx	r3
 80001ba:	4770      	bx	lr
 80001bc:	20000000 	.word	0x20000000
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c06      	ldr	r4, [pc, #24]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b943      	cbnz	r3, 80001e2 <__do_global_dtors_aux+0x1a>
 80001d0:	f7ff ffda 	bl	8000188 <deregister_tm_clones>
 80001d4:	4b04      	ldr	r3, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	b113      	cbz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d8:	4804      	ldr	r0, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x24>)
 80001da:	f3af 8000 	nop.w
 80001de:	2301      	movs	r3, #1
 80001e0:	7023      	strb	r3, [r4, #0]
 80001e2:	bd10      	pop	{r4, pc}
 80001e4:	20000000 	.word	0x20000000
 80001e8:	00000000 	.word	0x00000000
 80001ec:	08000af4 	.word	0x08000af4

080001f0 <frame_dummy>:
 80001f0:	b508      	push	{r3, lr}
 80001f2:	4b04      	ldr	r3, [pc, #16]	@ (8000204 <frame_dummy+0x14>)
 80001f4:	b11b      	cbz	r3, 80001fe <frame_dummy+0xe>
 80001f6:	4904      	ldr	r1, [pc, #16]	@ (8000208 <frame_dummy+0x18>)
 80001f8:	4804      	ldr	r0, [pc, #16]	@ (800020c <frame_dummy+0x1c>)
 80001fa:	f3af 8000 	nop.w
 80001fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000202:	e7cf      	b.n	80001a4 <register_tm_clones>
 8000204:	00000000 	.word	0x00000000
 8000208:	20000004 	.word	0x20000004
 800020c:	08000af4 	.word	0x08000af4

08000210 <__libc_init_array>:
 8000210:	b570      	push	{r4, r5, r6, lr}
 8000212:	4b0f      	ldr	r3, [pc, #60]	@ (8000250 <__libc_init_array+0x40>)
 8000214:	4d0f      	ldr	r5, [pc, #60]	@ (8000254 <__libc_init_array+0x44>)
 8000216:	42ab      	cmp	r3, r5
 8000218:	eba3 0605 	sub.w	r6, r3, r5
 800021c:	d007      	beq.n	800022e <__libc_init_array+0x1e>
 800021e:	10b6      	asrs	r6, r6, #2
 8000220:	2400      	movs	r4, #0
 8000222:	f855 3b04 	ldr.w	r3, [r5], #4
 8000226:	3401      	adds	r4, #1
 8000228:	4798      	blx	r3
 800022a:	42a6      	cmp	r6, r4
 800022c:	d8f9      	bhi.n	8000222 <__libc_init_array+0x12>
 800022e:	f000 fc61 	bl	8000af4 <_init>
 8000232:	4d09      	ldr	r5, [pc, #36]	@ (8000258 <__libc_init_array+0x48>)
 8000234:	4b09      	ldr	r3, [pc, #36]	@ (800025c <__libc_init_array+0x4c>)
 8000236:	1b5e      	subs	r6, r3, r5
 8000238:	42ab      	cmp	r3, r5
 800023a:	ea4f 06a6 	mov.w	r6, r6, asr #2
 800023e:	d006      	beq.n	800024e <__libc_init_array+0x3e>
 8000240:	2400      	movs	r4, #0
 8000242:	f855 3b04 	ldr.w	r3, [r5], #4
 8000246:	3401      	adds	r4, #1
 8000248:	4798      	blx	r3
 800024a:	42a6      	cmp	r6, r4
 800024c:	d8f9      	bhi.n	8000242 <__libc_init_array+0x32>
 800024e:	bd70      	pop	{r4, r5, r6, pc}
 8000250:	08000b0c 	.word	0x08000b0c
 8000254:	08000b0c 	.word	0x08000b0c
 8000258:	08000b0c 	.word	0x08000b0c
 800025c:	08000b10 	.word	0x08000b10

08000260 <memset>:
 8000260:	0783      	lsls	r3, r0, #30
 8000262:	b530      	push	{r4, r5, lr}
 8000264:	d047      	beq.n	80002f6 <memset+0x96>
 8000266:	1e54      	subs	r4, r2, #1
 8000268:	2a00      	cmp	r2, #0
 800026a:	d03e      	beq.n	80002ea <memset+0x8a>
 800026c:	b2ca      	uxtb	r2, r1
 800026e:	4603      	mov	r3, r0
 8000270:	e001      	b.n	8000276 <memset+0x16>
 8000272:	3c01      	subs	r4, #1
 8000274:	d339      	bcc.n	80002ea <memset+0x8a>
 8000276:	f803 2b01 	strb.w	r2, [r3], #1
 800027a:	079d      	lsls	r5, r3, #30
 800027c:	d1f9      	bne.n	8000272 <memset+0x12>
 800027e:	2c03      	cmp	r4, #3
 8000280:	d92c      	bls.n	80002dc <memset+0x7c>
 8000282:	b2cd      	uxtb	r5, r1
 8000284:	eb05 2505 	add.w	r5, r5, r5, lsl #8
 8000288:	2c0f      	cmp	r4, #15
 800028a:	eb05 4505 	add.w	r5, r5, r5, lsl #16
 800028e:	d935      	bls.n	80002fc <memset+0x9c>
 8000290:	f1a4 0210 	sub.w	r2, r4, #16
 8000294:	f022 0c0f 	bic.w	ip, r2, #15
 8000298:	f103 0e10 	add.w	lr, r3, #16
 800029c:	44e6      	add	lr, ip
 800029e:	ea4f 1c12 	mov.w	ip, r2, lsr #4
 80002a2:	461a      	mov	r2, r3
 80002a4:	e9c2 5500 	strd	r5, r5, [r2]
 80002a8:	e9c2 5502 	strd	r5, r5, [r2, #8]
 80002ac:	3210      	adds	r2, #16
 80002ae:	4572      	cmp	r2, lr
 80002b0:	d1f8      	bne.n	80002a4 <memset+0x44>
 80002b2:	f10c 0201 	add.w	r2, ip, #1
 80002b6:	f014 0f0c 	tst.w	r4, #12
 80002ba:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80002be:	f004 0c0f 	and.w	ip, r4, #15
 80002c2:	d013      	beq.n	80002ec <memset+0x8c>
 80002c4:	f1ac 0304 	sub.w	r3, ip, #4
 80002c8:	f023 0303 	bic.w	r3, r3, #3
 80002cc:	3304      	adds	r3, #4
 80002ce:	4413      	add	r3, r2
 80002d0:	f842 5b04 	str.w	r5, [r2], #4
 80002d4:	4293      	cmp	r3, r2
 80002d6:	d1fb      	bne.n	80002d0 <memset+0x70>
 80002d8:	f00c 0403 	and.w	r4, ip, #3
 80002dc:	b12c      	cbz	r4, 80002ea <memset+0x8a>
 80002de:	b2c9      	uxtb	r1, r1
 80002e0:	441c      	add	r4, r3
 80002e2:	f803 1b01 	strb.w	r1, [r3], #1
 80002e6:	42a3      	cmp	r3, r4
 80002e8:	d1fb      	bne.n	80002e2 <memset+0x82>
 80002ea:	bd30      	pop	{r4, r5, pc}
 80002ec:	4664      	mov	r4, ip
 80002ee:	4613      	mov	r3, r2
 80002f0:	2c00      	cmp	r4, #0
 80002f2:	d1f4      	bne.n	80002de <memset+0x7e>
 80002f4:	e7f9      	b.n	80002ea <memset+0x8a>
 80002f6:	4603      	mov	r3, r0
 80002f8:	4614      	mov	r4, r2
 80002fa:	e7c0      	b.n	800027e <memset+0x1e>
 80002fc:	461a      	mov	r2, r3
 80002fe:	46a4      	mov	ip, r4
 8000300:	e7e0      	b.n	80002c4 <memset+0x64>
 8000302:	bf00      	nop

08000304 <main>:
	for (uint32_t i = 0; i < 500000; i++)
		;
}


int main(void) {
 8000304:	b580      	push	{r7, lr}
 8000306:	b086      	sub	sp, #24
 8000308:	af00      	add	r7, sp, #0
//	uint32_t whileLoopProfiler = 0;

	GPIO_Handle_t GpioLed, GpioBtn;

	memset(&GpioLed,0, sizeof(GpioLed));
 800030a:	f107 030c 	add.w	r3, r7, #12
 800030e:	220c      	movs	r2, #12
 8000310:	2100      	movs	r1, #0
 8000312:	4618      	mov	r0, r3
 8000314:	f7ff ffa4 	bl	8000260 <memset>
	memset(&GpioBtn,0, sizeof(GpioBtn));
 8000318:	463b      	mov	r3, r7
 800031a:	220c      	movs	r2, #12
 800031c:	2100      	movs	r1, #0
 800031e:	4618      	mov	r0, r3
 8000320:	f7ff ff9e 	bl	8000260 <memset>

	// push pull output type  configuration for LED
	GpioLed.pGPIOx = GPIOD;
 8000324:	4b18      	ldr	r3, [pc, #96]	@ (8000388 <main+0x84>)
 8000326:	60fb      	str	r3, [r7, #12]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8000328:	230c      	movs	r3, #12
 800032a:	743b      	strb	r3, [r7, #16]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT;
 800032c:	2301      	movs	r3, #1
 800032e:	747b      	strb	r3, [r7, #17]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OP_SPEED_FAST;
 8000330:	2302      	movs	r3, #2
 8000332:	74bb      	strb	r3, [r7, #18]
	GpioLed.GPIO_PinConfig.GPIO_PinOpType = GPIO_OP_TYPE_PP; // push pull output type
 8000334:	2300      	movs	r3, #0
 8000336:	753b      	strb	r3, [r7, #20]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000338:	2300      	movs	r3, #0
 800033a:	74fb      	strb	r3, [r7, #19]

	GPIO_PClockControl(GPIOD, ENABLE);
 800033c:	2101      	movs	r1, #1
 800033e:	4812      	ldr	r0, [pc, #72]	@ (8000388 <main+0x84>)
 8000340:	f000 f85e 	bl	8000400 <GPIO_PClockControl>
	GPIO_Init(&GpioLed);
 8000344:	f107 030c 	add.w	r3, r7, #12
 8000348:	4618      	mov	r0, r3
 800034a:	f000 f943 	bl	80005d4 <GPIO_Init>

	// button configuration
	GpioBtn.pGPIOx = GPIOA;
 800034e:	4b0f      	ldr	r3, [pc, #60]	@ (800038c <main+0x88>)
 8000350:	603b      	str	r3, [r7, #0]
	GpioBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8000352:	2300      	movs	r3, #0
 8000354:	713b      	strb	r3, [r7, #4]
	GpioBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 8000356:	2304      	movs	r3, #4
 8000358:	717b      	strb	r3, [r7, #5]
	GpioBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OP_SPEED_FAST;
 800035a:	2302      	movs	r3, #2
 800035c:	71bb      	strb	r3, [r7, #6]
	GpioBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800035e:	2300      	movs	r3, #0
 8000360:	71fb      	strb	r3, [r7, #7]

	GPIO_PClockControl(GPIOA, ENABLE);
 8000362:	2101      	movs	r1, #1
 8000364:	4809      	ldr	r0, [pc, #36]	@ (800038c <main+0x88>)
 8000366:	f000 f84b 	bl	8000400 <GPIO_PClockControl>
	GPIO_Init(&GpioBtn);
 800036a:	463b      	mov	r3, r7
 800036c:	4618      	mov	r0, r3
 800036e:	f000 f931 	bl	80005d4 <GPIO_Init>

	// IRQ Config
	GPIO_IRQPriorityConfig(IRQ_NO_EXTI0, NVIC_IRQ_PRIO15);
 8000372:	210f      	movs	r1, #15
 8000374:	2006      	movs	r0, #6
 8000376:	f000 fb5d 	bl	8000a34 <GPIO_IRQPriorityConfig>
	GPIO_IRQInterruptConfig(IRQ_NO_EXTI0, ENABLE);
 800037a:	2101      	movs	r1, #1
 800037c:	2006      	movs	r0, #6
 800037e:	f000 fad1 	bl	8000924 <GPIO_IRQInterruptConfig>

	while(1);
 8000382:	bf00      	nop
 8000384:	e7fd      	b.n	8000382 <main+0x7e>
 8000386:	bf00      	nop
 8000388:	40020c00 	.word	0x40020c00
 800038c:	40020000 	.word	0x40020000

08000390 <EXTI0_IRQHandler>:
}

void EXTI0_IRQHandler(void) {
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
	GPIO_IRQHandler(GPIO_PIN_NO_0);
 8000394:	2000      	movs	r0, #0
 8000396:	f000 fb8d 	bl	8000ab4 <GPIO_IRQHandler>
	GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_NO_12);
 800039a:	210c      	movs	r1, #12
 800039c:	4802      	ldr	r0, [pc, #8]	@ (80003a8 <EXTI0_IRQHandler+0x18>)
 800039e:	f000 faab 	bl	80008f8 <GPIO_ToggleOutputPin>
}
 80003a2:	bf00      	nop
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	40020c00 	.word	0x40020c00

080003ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003ac:	480d      	ldr	r0, [pc, #52]	@ (80003e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003ae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003b0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003b4:	480c      	ldr	r0, [pc, #48]	@ (80003e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80003b6:	490d      	ldr	r1, [pc, #52]	@ (80003ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80003b8:	4a0d      	ldr	r2, [pc, #52]	@ (80003f0 <LoopForever+0xe>)
  movs r3, #0
 80003ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003bc:	e002      	b.n	80003c4 <LoopCopyDataInit>

080003be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003c2:	3304      	adds	r3, #4

080003c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003c8:	d3f9      	bcc.n	80003be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ca:	4a0a      	ldr	r2, [pc, #40]	@ (80003f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003cc:	4c0a      	ldr	r4, [pc, #40]	@ (80003f8 <LoopForever+0x16>)
  movs r3, #0
 80003ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003d0:	e001      	b.n	80003d6 <LoopFillZerobss>

080003d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003d4:	3204      	adds	r2, #4

080003d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003d8:	d3fb      	bcc.n	80003d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003da:	f7ff ff19 	bl	8000210 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003de:	f7ff ff91 	bl	8000304 <main>

080003e2 <LoopForever>:

LoopForever:
  b LoopForever
 80003e2:	e7fe      	b.n	80003e2 <LoopForever>
  ldr   r0, =_estack
 80003e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003ec:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003f0:	08000b14 	.word	0x08000b14
  ldr r2, =_sbss
 80003f4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003f8:	2000001c 	.word	0x2000001c

080003fc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003fc:	e7fe      	b.n	80003fc <ADC_IRQHandler>
	...

08000400 <GPIO_PClockControl>:
 *
 * @return				none
 *
 * @note				Peripheral clock should be enabled before using the GPIO port
 */
void GPIO_PClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi) {
 8000400:	b480      	push	{r7}
 8000402:	b083      	sub	sp, #12
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
 8000408:	460b      	mov	r3, r1
 800040a:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE) {
 800040c:	78fb      	ldrb	r3, [r7, #3]
 800040e:	2b01      	cmp	r3, #1
 8000410:	d161      	bne.n	80004d6 <GPIO_PClockControl+0xd6>
		if (pGPIOx == GPIOA) {
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	4a65      	ldr	r2, [pc, #404]	@ (80005ac <GPIO_PClockControl+0x1ac>)
 8000416:	4293      	cmp	r3, r2
 8000418:	d106      	bne.n	8000428 <GPIO_PClockControl+0x28>
			GPIOA_PCLK_EN();
 800041a:	4b65      	ldr	r3, [pc, #404]	@ (80005b0 <GPIO_PClockControl+0x1b0>)
 800041c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800041e:	4a64      	ldr	r2, [pc, #400]	@ (80005b0 <GPIO_PClockControl+0x1b0>)
 8000420:	f043 0301 	orr.w	r3, r3, #1
 8000424:	6313      	str	r3, [r2, #48]	@ 0x30
 8000426:	e056      	b.n	80004d6 <GPIO_PClockControl+0xd6>
		} else if (pGPIOx == GPIOB) {
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	4a62      	ldr	r2, [pc, #392]	@ (80005b4 <GPIO_PClockControl+0x1b4>)
 800042c:	4293      	cmp	r3, r2
 800042e:	d106      	bne.n	800043e <GPIO_PClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000430:	4b5f      	ldr	r3, [pc, #380]	@ (80005b0 <GPIO_PClockControl+0x1b0>)
 8000432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000434:	4a5e      	ldr	r2, [pc, #376]	@ (80005b0 <GPIO_PClockControl+0x1b0>)
 8000436:	f043 0302 	orr.w	r3, r3, #2
 800043a:	6313      	str	r3, [r2, #48]	@ 0x30
 800043c:	e04b      	b.n	80004d6 <GPIO_PClockControl+0xd6>
		} else if (pGPIOx == GPIOC) {
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	4a5d      	ldr	r2, [pc, #372]	@ (80005b8 <GPIO_PClockControl+0x1b8>)
 8000442:	4293      	cmp	r3, r2
 8000444:	d106      	bne.n	8000454 <GPIO_PClockControl+0x54>
			GPIOC_PCLK_EN();
 8000446:	4b5a      	ldr	r3, [pc, #360]	@ (80005b0 <GPIO_PClockControl+0x1b0>)
 8000448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800044a:	4a59      	ldr	r2, [pc, #356]	@ (80005b0 <GPIO_PClockControl+0x1b0>)
 800044c:	f043 0304 	orr.w	r3, r3, #4
 8000450:	6313      	str	r3, [r2, #48]	@ 0x30
 8000452:	e040      	b.n	80004d6 <GPIO_PClockControl+0xd6>
		} else if (pGPIOx == GPIOD) {
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	4a59      	ldr	r2, [pc, #356]	@ (80005bc <GPIO_PClockControl+0x1bc>)
 8000458:	4293      	cmp	r3, r2
 800045a:	d106      	bne.n	800046a <GPIO_PClockControl+0x6a>
			GPIOD_PCLK_EN();
 800045c:	4b54      	ldr	r3, [pc, #336]	@ (80005b0 <GPIO_PClockControl+0x1b0>)
 800045e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000460:	4a53      	ldr	r2, [pc, #332]	@ (80005b0 <GPIO_PClockControl+0x1b0>)
 8000462:	f043 0308 	orr.w	r3, r3, #8
 8000466:	6313      	str	r3, [r2, #48]	@ 0x30
 8000468:	e035      	b.n	80004d6 <GPIO_PClockControl+0xd6>
		} else if (pGPIOx == GPIOE) {
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	4a54      	ldr	r2, [pc, #336]	@ (80005c0 <GPIO_PClockControl+0x1c0>)
 800046e:	4293      	cmp	r3, r2
 8000470:	d106      	bne.n	8000480 <GPIO_PClockControl+0x80>
			GPIOE_PCLK_EN();
 8000472:	4b4f      	ldr	r3, [pc, #316]	@ (80005b0 <GPIO_PClockControl+0x1b0>)
 8000474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000476:	4a4e      	ldr	r2, [pc, #312]	@ (80005b0 <GPIO_PClockControl+0x1b0>)
 8000478:	f043 0310 	orr.w	r3, r3, #16
 800047c:	6313      	str	r3, [r2, #48]	@ 0x30
 800047e:	e02a      	b.n	80004d6 <GPIO_PClockControl+0xd6>
		} else if (pGPIOx == GPIOF) {
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	4a50      	ldr	r2, [pc, #320]	@ (80005c4 <GPIO_PClockControl+0x1c4>)
 8000484:	4293      	cmp	r3, r2
 8000486:	d106      	bne.n	8000496 <GPIO_PClockControl+0x96>
			GPIOF_PCLK_EN();
 8000488:	4b49      	ldr	r3, [pc, #292]	@ (80005b0 <GPIO_PClockControl+0x1b0>)
 800048a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800048c:	4a48      	ldr	r2, [pc, #288]	@ (80005b0 <GPIO_PClockControl+0x1b0>)
 800048e:	f043 0320 	orr.w	r3, r3, #32
 8000492:	6313      	str	r3, [r2, #48]	@ 0x30
 8000494:	e01f      	b.n	80004d6 <GPIO_PClockControl+0xd6>
		} else if (pGPIOx == GPIOG) {
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	4a4b      	ldr	r2, [pc, #300]	@ (80005c8 <GPIO_PClockControl+0x1c8>)
 800049a:	4293      	cmp	r3, r2
 800049c:	d106      	bne.n	80004ac <GPIO_PClockControl+0xac>
			GPIOG_PCLK_EN();
 800049e:	4b44      	ldr	r3, [pc, #272]	@ (80005b0 <GPIO_PClockControl+0x1b0>)
 80004a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004a2:	4a43      	ldr	r2, [pc, #268]	@ (80005b0 <GPIO_PClockControl+0x1b0>)
 80004a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80004a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80004aa:	e014      	b.n	80004d6 <GPIO_PClockControl+0xd6>
		} else if (pGPIOx == GPIOH) {
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	4a47      	ldr	r2, [pc, #284]	@ (80005cc <GPIO_PClockControl+0x1cc>)
 80004b0:	4293      	cmp	r3, r2
 80004b2:	d106      	bne.n	80004c2 <GPIO_PClockControl+0xc2>
			GPIOH_PCLK_EN();
 80004b4:	4b3e      	ldr	r3, [pc, #248]	@ (80005b0 <GPIO_PClockControl+0x1b0>)
 80004b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004b8:	4a3d      	ldr	r2, [pc, #244]	@ (80005b0 <GPIO_PClockControl+0x1b0>)
 80004ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80004be:	6313      	str	r3, [r2, #48]	@ 0x30
 80004c0:	e009      	b.n	80004d6 <GPIO_PClockControl+0xd6>
		} else if (pGPIOx == GPIOI) {
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	4a42      	ldr	r2, [pc, #264]	@ (80005d0 <GPIO_PClockControl+0x1d0>)
 80004c6:	4293      	cmp	r3, r2
 80004c8:	d105      	bne.n	80004d6 <GPIO_PClockControl+0xd6>
			GPIOI_PCLK_EN();
 80004ca:	4b39      	ldr	r3, [pc, #228]	@ (80005b0 <GPIO_PClockControl+0x1b0>)
 80004cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004ce:	4a38      	ldr	r2, [pc, #224]	@ (80005b0 <GPIO_PClockControl+0x1b0>)
 80004d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80004d4:	6313      	str	r3, [r2, #48]	@ 0x30
		}
	}

	if (EnOrDi == DISABLE) {
 80004d6:	78fb      	ldrb	r3, [r7, #3]
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d161      	bne.n	80005a0 <GPIO_PClockControl+0x1a0>
		if (pGPIOx == GPIOA) {
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	4a33      	ldr	r2, [pc, #204]	@ (80005ac <GPIO_PClockControl+0x1ac>)
 80004e0:	4293      	cmp	r3, r2
 80004e2:	d106      	bne.n	80004f2 <GPIO_PClockControl+0xf2>
			GPIOA_PCLK_DI();
 80004e4:	4b32      	ldr	r3, [pc, #200]	@ (80005b0 <GPIO_PClockControl+0x1b0>)
 80004e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004e8:	4a31      	ldr	r2, [pc, #196]	@ (80005b0 <GPIO_PClockControl+0x1b0>)
 80004ea:	f023 0301 	bic.w	r3, r3, #1
 80004ee:	6313      	str	r3, [r2, #48]	@ 0x30
		} else if (pGPIOx == GPIOI) {
			GPIOI_PCLK_DI();
		}
	}

}
 80004f0:	e056      	b.n	80005a0 <GPIO_PClockControl+0x1a0>
		} else if (pGPIOx == GPIOB) {
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	4a2f      	ldr	r2, [pc, #188]	@ (80005b4 <GPIO_PClockControl+0x1b4>)
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d106      	bne.n	8000508 <GPIO_PClockControl+0x108>
			GPIOB_PCLK_DI();
 80004fa:	4b2d      	ldr	r3, [pc, #180]	@ (80005b0 <GPIO_PClockControl+0x1b0>)
 80004fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004fe:	4a2c      	ldr	r2, [pc, #176]	@ (80005b0 <GPIO_PClockControl+0x1b0>)
 8000500:	f023 0302 	bic.w	r3, r3, #2
 8000504:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000506:	e04b      	b.n	80005a0 <GPIO_PClockControl+0x1a0>
		} else if (pGPIOx == GPIOC) {
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	4a2b      	ldr	r2, [pc, #172]	@ (80005b8 <GPIO_PClockControl+0x1b8>)
 800050c:	4293      	cmp	r3, r2
 800050e:	d106      	bne.n	800051e <GPIO_PClockControl+0x11e>
			GPIOC_PCLK_DI();
 8000510:	4b27      	ldr	r3, [pc, #156]	@ (80005b0 <GPIO_PClockControl+0x1b0>)
 8000512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000514:	4a26      	ldr	r2, [pc, #152]	@ (80005b0 <GPIO_PClockControl+0x1b0>)
 8000516:	f023 0304 	bic.w	r3, r3, #4
 800051a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800051c:	e040      	b.n	80005a0 <GPIO_PClockControl+0x1a0>
		} else if (pGPIOx == GPIOD) {
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	4a26      	ldr	r2, [pc, #152]	@ (80005bc <GPIO_PClockControl+0x1bc>)
 8000522:	4293      	cmp	r3, r2
 8000524:	d106      	bne.n	8000534 <GPIO_PClockControl+0x134>
			GPIOD_PCLK_DI();
 8000526:	4b22      	ldr	r3, [pc, #136]	@ (80005b0 <GPIO_PClockControl+0x1b0>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052a:	4a21      	ldr	r2, [pc, #132]	@ (80005b0 <GPIO_PClockControl+0x1b0>)
 800052c:	f023 0308 	bic.w	r3, r3, #8
 8000530:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000532:	e035      	b.n	80005a0 <GPIO_PClockControl+0x1a0>
		} else if (pGPIOx == GPIOE) {
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	4a22      	ldr	r2, [pc, #136]	@ (80005c0 <GPIO_PClockControl+0x1c0>)
 8000538:	4293      	cmp	r3, r2
 800053a:	d106      	bne.n	800054a <GPIO_PClockControl+0x14a>
			GPIOE_PCLK_DI();
 800053c:	4b1c      	ldr	r3, [pc, #112]	@ (80005b0 <GPIO_PClockControl+0x1b0>)
 800053e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000540:	4a1b      	ldr	r2, [pc, #108]	@ (80005b0 <GPIO_PClockControl+0x1b0>)
 8000542:	f023 0310 	bic.w	r3, r3, #16
 8000546:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000548:	e02a      	b.n	80005a0 <GPIO_PClockControl+0x1a0>
		} else if (pGPIOx == GPIOF) {
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	4a1d      	ldr	r2, [pc, #116]	@ (80005c4 <GPIO_PClockControl+0x1c4>)
 800054e:	4293      	cmp	r3, r2
 8000550:	d106      	bne.n	8000560 <GPIO_PClockControl+0x160>
			GPIOF_PCLK_DI();
 8000552:	4b17      	ldr	r3, [pc, #92]	@ (80005b0 <GPIO_PClockControl+0x1b0>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000556:	4a16      	ldr	r2, [pc, #88]	@ (80005b0 <GPIO_PClockControl+0x1b0>)
 8000558:	f023 0320 	bic.w	r3, r3, #32
 800055c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800055e:	e01f      	b.n	80005a0 <GPIO_PClockControl+0x1a0>
		} else if (pGPIOx == GPIOG) {
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	4a19      	ldr	r2, [pc, #100]	@ (80005c8 <GPIO_PClockControl+0x1c8>)
 8000564:	4293      	cmp	r3, r2
 8000566:	d106      	bne.n	8000576 <GPIO_PClockControl+0x176>
			GPIOG_PCLK_DI();
 8000568:	4b11      	ldr	r3, [pc, #68]	@ (80005b0 <GPIO_PClockControl+0x1b0>)
 800056a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056c:	4a10      	ldr	r2, [pc, #64]	@ (80005b0 <GPIO_PClockControl+0x1b0>)
 800056e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000572:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000574:	e014      	b.n	80005a0 <GPIO_PClockControl+0x1a0>
		} else if (pGPIOx == GPIOH) {
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	4a14      	ldr	r2, [pc, #80]	@ (80005cc <GPIO_PClockControl+0x1cc>)
 800057a:	4293      	cmp	r3, r2
 800057c:	d106      	bne.n	800058c <GPIO_PClockControl+0x18c>
			GPIOH_PCLK_DI();
 800057e:	4b0c      	ldr	r3, [pc, #48]	@ (80005b0 <GPIO_PClockControl+0x1b0>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000582:	4a0b      	ldr	r2, [pc, #44]	@ (80005b0 <GPIO_PClockControl+0x1b0>)
 8000584:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000588:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800058a:	e009      	b.n	80005a0 <GPIO_PClockControl+0x1a0>
		} else if (pGPIOx == GPIOI) {
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	4a10      	ldr	r2, [pc, #64]	@ (80005d0 <GPIO_PClockControl+0x1d0>)
 8000590:	4293      	cmp	r3, r2
 8000592:	d105      	bne.n	80005a0 <GPIO_PClockControl+0x1a0>
			GPIOI_PCLK_DI();
 8000594:	4b06      	ldr	r3, [pc, #24]	@ (80005b0 <GPIO_PClockControl+0x1b0>)
 8000596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000598:	4a05      	ldr	r2, [pc, #20]	@ (80005b0 <GPIO_PClockControl+0x1b0>)
 800059a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800059e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80005a0:	bf00      	nop
 80005a2:	370c      	adds	r7, #12
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr
 80005ac:	40020000 	.word	0x40020000
 80005b0:	40023800 	.word	0x40023800
 80005b4:	40020400 	.word	0x40020400
 80005b8:	40020800 	.word	0x40020800
 80005bc:	40020c00 	.word	0x40020c00
 80005c0:	40021000 	.word	0x40021000
 80005c4:	40021400 	.word	0x40021400
 80005c8:	40021800 	.word	0x40021800
 80005cc:	40021c00 	.word	0x40021c00
 80005d0:	40022000 	.word	0x40022000

080005d4 <GPIO_Init>:
 *
 * @return					none
 *
 * @note					This function should be called before using the GPIO pin
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 80005d4:	b480      	push	{r7}
 80005d6:	b087      	sub	sp, #28
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
	uint32_t tempRegister;

	// 1. configure the mode of the pin
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) {
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	795b      	ldrb	r3, [r3, #5]
 80005e0:	2b03      	cmp	r3, #3
 80005e2:	d81f      	bhi.n	8000624 <GPIO_Init+0x50>
		// non interrupt mode
		// For example, if you're configuring pin 5, the mode bits would be shifted left by 10 positions (2 * 5),
		// placing them in bits 10 and 11 of the register.
		tempRegister = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	795b      	ldrb	r3, [r3, #5]
 80005e8:	461a      	mov	r2, r3
				<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	791b      	ldrb	r3, [r3, #4]
 80005ee:	005b      	lsls	r3, r3, #1
 80005f0:	fa02 f303 	lsl.w	r3, r2, r3
		tempRegister = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 80005f4:	613b      	str	r3, [r7, #16]
		// clear
		pGPIOHandle->pGPIOx->MODER &= ~(0x3
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	681a      	ldr	r2, [r3, #0]
				<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);   // 0x3 == 11
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	791b      	ldrb	r3, [r3, #4]
 8000600:	4619      	mov	r1, r3
 8000602:	2303      	movs	r3, #3
 8000604:	408b      	lsls	r3, r1
		pGPIOHandle->pGPIOx->MODER &= ~(0x3
 8000606:	43db      	mvns	r3, r3
 8000608:	4619      	mov	r1, r3
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	400a      	ands	r2, r1
 8000610:	601a      	str	r2, [r3, #0]
		// store
		pGPIOHandle->pGPIOx->MODER |= tempRegister;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	6819      	ldr	r1, [r3, #0]
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	693a      	ldr	r2, [r7, #16]
 800061e:	430a      	orrs	r2, r1
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	e0c4      	b.n	80007ae <GPIO_Init+0x1da>

	} else {
		// interrupt mode
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT) {
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	795b      	ldrb	r3, [r3, #5]
 8000628:	2b04      	cmp	r3, #4
 800062a:	d117      	bne.n	800065c <GPIO_Init+0x88>
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800062c:	4b4a      	ldr	r3, [pc, #296]	@ (8000758 <GPIO_Init+0x184>)
 800062e:	68db      	ldr	r3, [r3, #12]
 8000630:	687a      	ldr	r2, [r7, #4]
 8000632:	7912      	ldrb	r2, [r2, #4]
 8000634:	4611      	mov	r1, r2
 8000636:	2201      	movs	r2, #1
 8000638:	408a      	lsls	r2, r1
 800063a:	4611      	mov	r1, r2
 800063c:	4a46      	ldr	r2, [pc, #280]	@ (8000758 <GPIO_Init+0x184>)
 800063e:	430b      	orrs	r3, r1
 8000640:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // clear RTSR
 8000642:	4b45      	ldr	r3, [pc, #276]	@ (8000758 <GPIO_Init+0x184>)
 8000644:	689b      	ldr	r3, [r3, #8]
 8000646:	687a      	ldr	r2, [r7, #4]
 8000648:	7912      	ldrb	r2, [r2, #4]
 800064a:	4611      	mov	r1, r2
 800064c:	2201      	movs	r2, #1
 800064e:	408a      	lsls	r2, r1
 8000650:	43d2      	mvns	r2, r2
 8000652:	4611      	mov	r1, r2
 8000654:	4a40      	ldr	r2, [pc, #256]	@ (8000758 <GPIO_Init+0x184>)
 8000656:	400b      	ands	r3, r1
 8000658:	6093      	str	r3, [r2, #8]
 800065a:	e035      	b.n	80006c8 <GPIO_Init+0xf4>

		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT) {
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	795b      	ldrb	r3, [r3, #5]
 8000660:	2b05      	cmp	r3, #5
 8000662:	d117      	bne.n	8000694 <GPIO_Init+0xc0>
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000664:	4b3c      	ldr	r3, [pc, #240]	@ (8000758 <GPIO_Init+0x184>)
 8000666:	689b      	ldr	r3, [r3, #8]
 8000668:	687a      	ldr	r2, [r7, #4]
 800066a:	7912      	ldrb	r2, [r2, #4]
 800066c:	4611      	mov	r1, r2
 800066e:	2201      	movs	r2, #1
 8000670:	408a      	lsls	r2, r1
 8000672:	4611      	mov	r1, r2
 8000674:	4a38      	ldr	r2, [pc, #224]	@ (8000758 <GPIO_Init+0x184>)
 8000676:	430b      	orrs	r3, r1
 8000678:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // clear FTSR
 800067a:	4b37      	ldr	r3, [pc, #220]	@ (8000758 <GPIO_Init+0x184>)
 800067c:	68db      	ldr	r3, [r3, #12]
 800067e:	687a      	ldr	r2, [r7, #4]
 8000680:	7912      	ldrb	r2, [r2, #4]
 8000682:	4611      	mov	r1, r2
 8000684:	2201      	movs	r2, #1
 8000686:	408a      	lsls	r2, r1
 8000688:	43d2      	mvns	r2, r2
 800068a:	4611      	mov	r1, r2
 800068c:	4a32      	ldr	r2, [pc, #200]	@ (8000758 <GPIO_Init+0x184>)
 800068e:	400b      	ands	r3, r1
 8000690:	60d3      	str	r3, [r2, #12]
 8000692:	e019      	b.n	80006c8 <GPIO_Init+0xf4>

		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT) {
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	795b      	ldrb	r3, [r3, #5]
 8000698:	2b06      	cmp	r3, #6
 800069a:	d115      	bne.n	80006c8 <GPIO_Init+0xf4>
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800069c:	4b2e      	ldr	r3, [pc, #184]	@ (8000758 <GPIO_Init+0x184>)
 800069e:	689b      	ldr	r3, [r3, #8]
 80006a0:	687a      	ldr	r2, [r7, #4]
 80006a2:	7912      	ldrb	r2, [r2, #4]
 80006a4:	4611      	mov	r1, r2
 80006a6:	2201      	movs	r2, #1
 80006a8:	408a      	lsls	r2, r1
 80006aa:	4611      	mov	r1, r2
 80006ac:	4a2a      	ldr	r2, [pc, #168]	@ (8000758 <GPIO_Init+0x184>)
 80006ae:	430b      	orrs	r3, r1
 80006b0:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006b2:	4b29      	ldr	r3, [pc, #164]	@ (8000758 <GPIO_Init+0x184>)
 80006b4:	68db      	ldr	r3, [r3, #12]
 80006b6:	687a      	ldr	r2, [r7, #4]
 80006b8:	7912      	ldrb	r2, [r2, #4]
 80006ba:	4611      	mov	r1, r2
 80006bc:	2201      	movs	r2, #1
 80006be:	408a      	lsls	r2, r1
 80006c0:	4611      	mov	r1, r2
 80006c2:	4a25      	ldr	r2, [pc, #148]	@ (8000758 <GPIO_Init+0x184>)
 80006c4:	430b      	orrs	r3, r1
 80006c6:	60d3      	str	r3, [r2, #12]

		}

		// 2.configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t extiRegisterSet = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	791b      	ldrb	r3, [r3, #4]
 80006cc:	089b      	lsrs	r3, r3, #2
 80006ce:	75fb      	strb	r3, [r7, #23]
				/ 4; // we choose the index for the array with this, so SYSCFG.EXTICR[0] == EXTICR1
		uint8_t extiBitPosition = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	791b      	ldrb	r3, [r3, #4]
 80006d4:	f003 0303 	and.w	r3, r3, #3
 80006d8:	75bb      	strb	r3, [r7, #22]
				% 4;   // this tells us about the position within each register

		uint8_t portCode = GPIO_BASE_ADDR_TO_EXTI_CODE(pGPIOHandle->pGPIOx);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a1f      	ldr	r2, [pc, #124]	@ (800075c <GPIO_Init+0x188>)
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d04d      	beq.n	8000780 <GPIO_Init+0x1ac>
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a1d      	ldr	r2, [pc, #116]	@ (8000760 <GPIO_Init+0x18c>)
 80006ea:	4293      	cmp	r3, r2
 80006ec:	d032      	beq.n	8000754 <GPIO_Init+0x180>
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4a1c      	ldr	r2, [pc, #112]	@ (8000764 <GPIO_Init+0x190>)
 80006f4:	4293      	cmp	r3, r2
 80006f6:	d02b      	beq.n	8000750 <GPIO_Init+0x17c>
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a1a      	ldr	r2, [pc, #104]	@ (8000768 <GPIO_Init+0x194>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	d024      	beq.n	800074c <GPIO_Init+0x178>
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4a19      	ldr	r2, [pc, #100]	@ (800076c <GPIO_Init+0x198>)
 8000708:	4293      	cmp	r3, r2
 800070a:	d01d      	beq.n	8000748 <GPIO_Init+0x174>
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a17      	ldr	r2, [pc, #92]	@ (8000770 <GPIO_Init+0x19c>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d016      	beq.n	8000744 <GPIO_Init+0x170>
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4a16      	ldr	r2, [pc, #88]	@ (8000774 <GPIO_Init+0x1a0>)
 800071c:	4293      	cmp	r3, r2
 800071e:	d00f      	beq.n	8000740 <GPIO_Init+0x16c>
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a14      	ldr	r2, [pc, #80]	@ (8000778 <GPIO_Init+0x1a4>)
 8000726:	4293      	cmp	r3, r2
 8000728:	d008      	beq.n	800073c <GPIO_Init+0x168>
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4a13      	ldr	r2, [pc, #76]	@ (800077c <GPIO_Init+0x1a8>)
 8000730:	4293      	cmp	r3, r2
 8000732:	d101      	bne.n	8000738 <GPIO_Init+0x164>
 8000734:	2308      	movs	r3, #8
 8000736:	e024      	b.n	8000782 <GPIO_Init+0x1ae>
 8000738:	23ff      	movs	r3, #255	@ 0xff
 800073a:	e022      	b.n	8000782 <GPIO_Init+0x1ae>
 800073c:	2307      	movs	r3, #7
 800073e:	e020      	b.n	8000782 <GPIO_Init+0x1ae>
 8000740:	2306      	movs	r3, #6
 8000742:	e01e      	b.n	8000782 <GPIO_Init+0x1ae>
 8000744:	2305      	movs	r3, #5
 8000746:	e01c      	b.n	8000782 <GPIO_Init+0x1ae>
 8000748:	2304      	movs	r3, #4
 800074a:	e01a      	b.n	8000782 <GPIO_Init+0x1ae>
 800074c:	2303      	movs	r3, #3
 800074e:	e018      	b.n	8000782 <GPIO_Init+0x1ae>
 8000750:	2302      	movs	r3, #2
 8000752:	e016      	b.n	8000782 <GPIO_Init+0x1ae>
 8000754:	2301      	movs	r3, #1
 8000756:	e014      	b.n	8000782 <GPIO_Init+0x1ae>
 8000758:	40013c00 	.word	0x40013c00
 800075c:	40020000 	.word	0x40020000
 8000760:	40020400 	.word	0x40020400
 8000764:	40020800 	.word	0x40020800
 8000768:	40020c00 	.word	0x40020c00
 800076c:	40021000 	.word	0x40021000
 8000770:	40021400 	.word	0x40021400
 8000774:	40021800 	.word	0x40021800
 8000778:	40021c00 	.word	0x40021c00
 800077c:	40022000 	.word	0x40022000
 8000780:	2300      	movs	r3, #0
 8000782:	757b      	strb	r3, [r7, #21]
		SYSCFG->EXTICR[extiRegisterSet] = portCode << (extiBitPosition * 4);
 8000784:	7d7a      	ldrb	r2, [r7, #21]
 8000786:	7dbb      	ldrb	r3, [r7, #22]
 8000788:	009b      	lsls	r3, r3, #2
 800078a:	fa02 f103 	lsl.w	r1, r2, r3
 800078e:	4a58      	ldr	r2, [pc, #352]	@ (80008f0 <GPIO_Init+0x31c>)
 8000790:	7dfb      	ldrb	r3, [r7, #23]
 8000792:	3302      	adds	r3, #2
 8000794:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		// 3.enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000798:	4b56      	ldr	r3, [pc, #344]	@ (80008f4 <GPIO_Init+0x320>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	687a      	ldr	r2, [r7, #4]
 800079e:	7912      	ldrb	r2, [r2, #4]
 80007a0:	4611      	mov	r1, r2
 80007a2:	2201      	movs	r2, #1
 80007a4:	408a      	lsls	r2, r1
 80007a6:	4611      	mov	r1, r2
 80007a8:	4a52      	ldr	r2, [pc, #328]	@ (80008f4 <GPIO_Init+0x320>)
 80007aa:	430b      	orrs	r3, r1
 80007ac:	6013      	str	r3, [r2, #0]
	}

	// reset temporary register
	tempRegister = 0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	613b      	str	r3, [r7, #16]
	// 2. configure the speed
	tempRegister = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	799b      	ldrb	r3, [r3, #6]
 80007b6:	461a      	mov	r2, r3
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	791b      	ldrb	r3, [r3, #4]
 80007bc:	005b      	lsls	r3, r3, #1
 80007be:	fa02 f303 	lsl.w	r3, r2, r3
	tempRegister = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed
 80007c2:	613b      	str	r3, [r7, #16]
	// clear
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	689a      	ldr	r2, [r3, #8]
			<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);   // 0x3 == 0b11
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	791b      	ldrb	r3, [r3, #4]
 80007ce:	4619      	mov	r1, r3
 80007d0:	2303      	movs	r3, #3
 80007d2:	408b      	lsls	r3, r1
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3
 80007d4:	43db      	mvns	r3, r3
 80007d6:	4619      	mov	r1, r3
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	400a      	ands	r2, r1
 80007de:	609a      	str	r2, [r3, #8]
	// store
	pGPIOHandle->pGPIOx->OSPEEDR |= tempRegister;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	6899      	ldr	r1, [r3, #8]
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	693a      	ldr	r2, [r7, #16]
 80007ec:	430a      	orrs	r2, r1
 80007ee:	609a      	str	r2, [r3, #8]

	// reset temporary register
	tempRegister = 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	613b      	str	r3, [r7, #16]
	// 3. configure the pull up pull down
	tempRegister = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	79db      	ldrb	r3, [r3, #7]
 80007f8:	461a      	mov	r2, r3
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	791b      	ldrb	r3, [r3, #4]
 80007fe:	005b      	lsls	r3, r3, #1
 8000800:	fa02 f303 	lsl.w	r3, r2, r3
	tempRegister = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl
 8000804:	613b      	str	r3, [r7, #16]
	// clear
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	68da      	ldr	r2, [r3, #12]
			<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);   // 0x3 == 0b11
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	791b      	ldrb	r3, [r3, #4]
 8000810:	4619      	mov	r1, r3
 8000812:	2303      	movs	r3, #3
 8000814:	408b      	lsls	r3, r1
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3
 8000816:	43db      	mvns	r3, r3
 8000818:	4619      	mov	r1, r3
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	400a      	ands	r2, r1
 8000820:	60da      	str	r2, [r3, #12]
	// store
	pGPIOHandle->pGPIOx->PUPDR |= tempRegister;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	68d9      	ldr	r1, [r3, #12]
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	693a      	ldr	r2, [r7, #16]
 800082e:	430a      	orrs	r2, r1
 8000830:	60da      	str	r2, [r3, #12]

	// reset temporary register
	tempRegister = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	613b      	str	r3, [r7, #16]
	// 4. configure the output type
	tempRegister = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOpType
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	7a1b      	ldrb	r3, [r3, #8]
 800083a:	461a      	mov	r2, r3
			<< (1 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // no 2 bits here only 16bits is used
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	791b      	ldrb	r3, [r3, #4]
 8000840:	fa02 f303 	lsl.w	r3, r2, r3
	tempRegister = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOpType
 8000844:	613b      	str	r3, [r7, #16]
	// clear
	pGPIOHandle->pGPIOx->OTYPER &= ~(1
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	685a      	ldr	r2, [r3, #4]
			<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	791b      	ldrb	r3, [r3, #4]
 8000850:	4619      	mov	r1, r3
 8000852:	2301      	movs	r3, #1
 8000854:	408b      	lsls	r3, r1
	pGPIOHandle->pGPIOx->OTYPER &= ~(1
 8000856:	43db      	mvns	r3, r3
 8000858:	4619      	mov	r1, r3
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	400a      	ands	r2, r1
 8000860:	605a      	str	r2, [r3, #4]
	// store
	pGPIOHandle->pGPIOx->OTYPER |= tempRegister;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	6859      	ldr	r1, [r3, #4]
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	693a      	ldr	r2, [r7, #16]
 800086e:	430a      	orrs	r2, r1
 8000870:	605a      	str	r2, [r3, #4]

	// reset temporary register
	tempRegister = 0;
 8000872:	2300      	movs	r3, #0
 8000874:	613b      	str	r3, [r7, #16]
	// 5. configure the alternate functionality
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALT_FN) {
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	795b      	ldrb	r3, [r3, #5]
 800087a:	2b02      	cmp	r3, #2
 800087c:	d131      	bne.n	80008e2 <GPIO_Init+0x30e>
		uint8_t lowOrHigh = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8; // if this is 0, then low, - this decides if it is AFR low or AFR high register
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	791b      	ldrb	r3, [r3, #4]
 8000882:	08db      	lsrs	r3, r3, #3
 8000884:	73fb      	strb	r3, [r7, #15]
		uint8_t bitPosition = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8; // this decides where the pin registers fall within low or high register
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	791b      	ldrb	r3, [r3, #4]
 800088a:	f003 0307 	and.w	r3, r3, #7
 800088e:	73bb      	strb	r3, [r7, #14]

		// clear
		pGPIOHandle->pGPIOx->AFR[lowOrHigh] &= ~(0xF << (4 * bitPosition)); // 0xF == 0b1111
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	7bfa      	ldrb	r2, [r7, #15]
 8000896:	3208      	adds	r2, #8
 8000898:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800089c:	7bbb      	ldrb	r3, [r7, #14]
 800089e:	009b      	lsls	r3, r3, #2
 80008a0:	220f      	movs	r2, #15
 80008a2:	fa02 f303 	lsl.w	r3, r2, r3
 80008a6:	43db      	mvns	r3, r3
 80008a8:	4618      	mov	r0, r3
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	7bfa      	ldrb	r2, [r7, #15]
 80008b0:	4001      	ands	r1, r0
 80008b2:	3208      	adds	r2, #8
 80008b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		// store
		pGPIOHandle->pGPIOx->AFR[lowOrHigh] |=
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	7bfa      	ldrb	r2, [r7, #15]
 80008be:	3208      	adds	r2, #8
 80008c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
				(pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	7a5b      	ldrb	r3, [r3, #9]
 80008c8:	461a      	mov	r2, r3
						<< (4 * bitPosition));
 80008ca:	7bbb      	ldrb	r3, [r7, #14]
 80008cc:	009b      	lsls	r3, r3, #2
 80008ce:	fa02 f303 	lsl.w	r3, r2, r3
 80008d2:	4618      	mov	r0, r3
		pGPIOHandle->pGPIOx->AFR[lowOrHigh] |=
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	7bfa      	ldrb	r2, [r7, #15]
 80008da:	4301      	orrs	r1, r0
 80008dc:	3208      	adds	r2, #8
 80008de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}

}
 80008e2:	bf00      	nop
 80008e4:	371c      	adds	r7, #28
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	40013800 	.word	0x40013800
 80008f4:	40013c00 	.word	0x40013c00

080008f8 <GPIO_ToggleOutputPin>:
 *
 * @return				none
 *
 * @note				This function changes the state of the pin from high to low or low to high
 */
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber) {
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	460b      	mov	r3, r1
 8000902:	70fb      	strb	r3, [r7, #3]
	//	For example, if PinNumber is 5 and the current state of ODR is 0b11110000,
	//	after this operation, the new state would be 0b11110000 ^ 0b00100000 = 0b11010000.

	pGPIOx->ODR ^= (1 << PinNumber);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	695b      	ldr	r3, [r3, #20]
 8000908:	78fa      	ldrb	r2, [r7, #3]
 800090a:	2101      	movs	r1, #1
 800090c:	fa01 f202 	lsl.w	r2, r1, r2
 8000910:	405a      	eors	r2, r3
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	615a      	str	r2, [r3, #20]
}
 8000916:	bf00      	nop
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
	...

08000924 <GPIO_IRQInterruptConfig>:
 *
 * @note                This function enables or disables the specified GPIO interrupt in the NVIC.
 *                      It uses the appropriate NVIC_ISERx (Interrupt Set-Enable Register) to enable
 *                      or NVIC_ICERx (Interrupt Clear-Enable Register) to disable the interrupt.
 */
void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnOrDi) {
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	460a      	mov	r2, r1
 800092e:	71fb      	strb	r3, [r7, #7]
 8000930:	4613      	mov	r3, r2
 8000932:	71bb      	strb	r3, [r7, #6]
	if (EnOrDi == ENABLE) {
 8000934:	79bb      	ldrb	r3, [r7, #6]
 8000936:	2b01      	cmp	r3, #1
 8000938:	d133      	bne.n	80009a2 <GPIO_IRQInterruptConfig+0x7e>
		if (IRQNumber <= 31) {
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	2b1f      	cmp	r3, #31
 800093e:	d80a      	bhi.n	8000956 <GPIO_IRQInterruptConfig+0x32>
			// ISER0 register
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000940:	4b36      	ldr	r3, [pc, #216]	@ (8000a1c <GPIO_IRQInterruptConfig+0xf8>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	79fa      	ldrb	r2, [r7, #7]
 8000946:	2101      	movs	r1, #1
 8000948:	fa01 f202 	lsl.w	r2, r1, r2
 800094c:	4611      	mov	r1, r2
 800094e:	4a33      	ldr	r2, [pc, #204]	@ (8000a1c <GPIO_IRQInterruptConfig+0xf8>)
 8000950:	430b      	orrs	r3, r1
 8000952:	6013      	str	r3, [r2, #0]
		} else if (IRQNumber >= 64 && IRQNumber < 96) {
			// ICER2 register
			*NVIC_ICER2 |= (1 << (IRQNumber % 32));
		}
	}
}
 8000954:	e05c      	b.n	8000a10 <GPIO_IRQInterruptConfig+0xec>
		} else if (IRQNumber > 31 && IRQNumber < 64) {
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	2b1f      	cmp	r3, #31
 800095a:	d90f      	bls.n	800097c <GPIO_IRQInterruptConfig+0x58>
 800095c:	79fb      	ldrb	r3, [r7, #7]
 800095e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000960:	d80c      	bhi.n	800097c <GPIO_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 8000962:	4b2f      	ldr	r3, [pc, #188]	@ (8000a20 <GPIO_IRQInterruptConfig+0xfc>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	79fa      	ldrb	r2, [r7, #7]
 8000968:	f002 021f 	and.w	r2, r2, #31
 800096c:	2101      	movs	r1, #1
 800096e:	fa01 f202 	lsl.w	r2, r1, r2
 8000972:	4611      	mov	r1, r2
 8000974:	4a2a      	ldr	r2, [pc, #168]	@ (8000a20 <GPIO_IRQInterruptConfig+0xfc>)
 8000976:	430b      	orrs	r3, r1
 8000978:	6013      	str	r3, [r2, #0]
 800097a:	e049      	b.n	8000a10 <GPIO_IRQInterruptConfig+0xec>
		} else if (IRQNumber >= 64 && IRQNumber < 96) {
 800097c:	79fb      	ldrb	r3, [r7, #7]
 800097e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000980:	d946      	bls.n	8000a10 <GPIO_IRQInterruptConfig+0xec>
 8000982:	79fb      	ldrb	r3, [r7, #7]
 8000984:	2b5f      	cmp	r3, #95	@ 0x5f
 8000986:	d843      	bhi.n	8000a10 <GPIO_IRQInterruptConfig+0xec>
			*NVIC_ISER2 |= (1 << (IRQNumber % 32));
 8000988:	4b26      	ldr	r3, [pc, #152]	@ (8000a24 <GPIO_IRQInterruptConfig+0x100>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	79fa      	ldrb	r2, [r7, #7]
 800098e:	f002 021f 	and.w	r2, r2, #31
 8000992:	2101      	movs	r1, #1
 8000994:	fa01 f202 	lsl.w	r2, r1, r2
 8000998:	4611      	mov	r1, r2
 800099a:	4a22      	ldr	r2, [pc, #136]	@ (8000a24 <GPIO_IRQInterruptConfig+0x100>)
 800099c:	430b      	orrs	r3, r1
 800099e:	6013      	str	r3, [r2, #0]
}
 80009a0:	e036      	b.n	8000a10 <GPIO_IRQInterruptConfig+0xec>
	} else if (EnOrDi == DISABLE) {
 80009a2:	79bb      	ldrb	r3, [r7, #6]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d133      	bne.n	8000a10 <GPIO_IRQInterruptConfig+0xec>
		if (IRQNumber <= 31) {
 80009a8:	79fb      	ldrb	r3, [r7, #7]
 80009aa:	2b1f      	cmp	r3, #31
 80009ac:	d80a      	bhi.n	80009c4 <GPIO_IRQInterruptConfig+0xa0>
			*NVIC_ICER0 |= (1 << IRQNumber);
 80009ae:	4b1e      	ldr	r3, [pc, #120]	@ (8000a28 <GPIO_IRQInterruptConfig+0x104>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	79fa      	ldrb	r2, [r7, #7]
 80009b4:	2101      	movs	r1, #1
 80009b6:	fa01 f202 	lsl.w	r2, r1, r2
 80009ba:	4611      	mov	r1, r2
 80009bc:	4a1a      	ldr	r2, [pc, #104]	@ (8000a28 <GPIO_IRQInterruptConfig+0x104>)
 80009be:	430b      	orrs	r3, r1
 80009c0:	6013      	str	r3, [r2, #0]
}
 80009c2:	e025      	b.n	8000a10 <GPIO_IRQInterruptConfig+0xec>
		} else if (IRQNumber > 31 && IRQNumber < 64) {
 80009c4:	79fb      	ldrb	r3, [r7, #7]
 80009c6:	2b1f      	cmp	r3, #31
 80009c8:	d90f      	bls.n	80009ea <GPIO_IRQInterruptConfig+0xc6>
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	2b3f      	cmp	r3, #63	@ 0x3f
 80009ce:	d80c      	bhi.n	80009ea <GPIO_IRQInterruptConfig+0xc6>
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 80009d0:	4b16      	ldr	r3, [pc, #88]	@ (8000a2c <GPIO_IRQInterruptConfig+0x108>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	79fa      	ldrb	r2, [r7, #7]
 80009d6:	f002 021f 	and.w	r2, r2, #31
 80009da:	2101      	movs	r1, #1
 80009dc:	fa01 f202 	lsl.w	r2, r1, r2
 80009e0:	4611      	mov	r1, r2
 80009e2:	4a12      	ldr	r2, [pc, #72]	@ (8000a2c <GPIO_IRQInterruptConfig+0x108>)
 80009e4:	430b      	orrs	r3, r1
 80009e6:	6013      	str	r3, [r2, #0]
 80009e8:	e012      	b.n	8000a10 <GPIO_IRQInterruptConfig+0xec>
		} else if (IRQNumber >= 64 && IRQNumber < 96) {
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	2b3f      	cmp	r3, #63	@ 0x3f
 80009ee:	d90f      	bls.n	8000a10 <GPIO_IRQInterruptConfig+0xec>
 80009f0:	79fb      	ldrb	r3, [r7, #7]
 80009f2:	2b5f      	cmp	r3, #95	@ 0x5f
 80009f4:	d80c      	bhi.n	8000a10 <GPIO_IRQInterruptConfig+0xec>
			*NVIC_ICER2 |= (1 << (IRQNumber % 32));
 80009f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a30 <GPIO_IRQInterruptConfig+0x10c>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	79fa      	ldrb	r2, [r7, #7]
 80009fc:	f002 021f 	and.w	r2, r2, #31
 8000a00:	2101      	movs	r1, #1
 8000a02:	fa01 f202 	lsl.w	r2, r1, r2
 8000a06:	4611      	mov	r1, r2
 8000a08:	4a09      	ldr	r2, [pc, #36]	@ (8000a30 <GPIO_IRQInterruptConfig+0x10c>)
 8000a0a:	430b      	orrs	r3, r1
 8000a0c:	6013      	str	r3, [r2, #0]
}
 8000a0e:	e7ff      	b.n	8000a10 <GPIO_IRQInterruptConfig+0xec>
 8000a10:	bf00      	nop
 8000a12:	370c      	adds	r7, #12
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	e000e100 	.word	0xe000e100
 8000a20:	e000e104 	.word	0xe000e104
 8000a24:	e000e108 	.word	0xe000e108
 8000a28:	e000e180 	.word	0xe000e180
 8000a2c:	e000e184 	.word	0xe000e184
 8000a30:	e000e188 	.word	0xe000e188

08000a34 <GPIO_IRQPriorityConfig>:
 *
 * @note                This function sets the priority of the specified GPIO interrupt in the NVIC.
 *                      It calculates the appropriate Interrupt Priority Register (IPR) and applies
 *                      the priority value to the correct bit field within that register.
 */
void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority) {
 8000a34:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000a38:	b089      	sub	sp, #36	@ 0x24
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	6039      	str	r1, [r7, #0]
 8000a3e:	4601      	mov	r1, r0
 8000a40:	71f9      	strb	r1, [r7, #7]
	// Calculate which IPR register to use
	uint64_t iprx = IRQNumber / 4;
 8000a42:	79f9      	ldrb	r1, [r7, #7]
 8000a44:	0889      	lsrs	r1, r1, #2
 8000a46:	b2c9      	uxtb	r1, r1
 8000a48:	b2c9      	uxtb	r1, r1
 8000a4a:	2000      	movs	r0, #0
 8000a4c:	468a      	mov	sl, r1
 8000a4e:	4683      	mov	fp, r0
 8000a50:	e9c7 ab06 	strd	sl, fp, [r7, #24]

	// Calculate which section of the IPR register to use
	uint64_t iprx_section = IRQNumber % 4;
 8000a54:	79f9      	ldrb	r1, [r7, #7]
 8000a56:	2000      	movs	r0, #0
 8000a58:	4688      	mov	r8, r1
 8000a5a:	4681      	mov	r9, r0
 8000a5c:	f008 0203 	and.w	r2, r8, #3
 8000a60:	2300      	movs	r3, #0
 8000a62:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Calculate the shift amount based on the section and number of priority bits implemented
	uint64_t shift_amount = (8 * iprx_section) + (8 - NUM_PR_BITS_IMPLEMENTED);
 8000a66:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000a6a:	f04f 0200 	mov.w	r2, #0
 8000a6e:	f04f 0300 	mov.w	r3, #0
 8000a72:	00cb      	lsls	r3, r1, #3
 8000a74:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000a78:	00c2      	lsls	r2, r0, #3
 8000a7a:	1d14      	adds	r4, r2, #4
 8000a7c:	f143 0500 	adc.w	r5, r3, #0
 8000a80:	e9c7 4502 	strd	r4, r5, [r7, #8]

	// Set the priority in the appropriate IPR register
	*(NVIC_IPR_BASE_ADDR + iprx)  |= (IRQPriority << shift_amount);
 8000a84:	69bb      	ldr	r3, [r7, #24]
 8000a86:	009b      	lsls	r3, r3, #2
 8000a88:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000a8c:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8000a90:	6819      	ldr	r1, [r3, #0]
 8000a92:	68bb      	ldr	r3, [r7, #8]
 8000a94:	683a      	ldr	r2, [r7, #0]
 8000a96:	409a      	lsls	r2, r3
 8000a98:	69bb      	ldr	r3, [r7, #24]
 8000a9a:	009b      	lsls	r3, r3, #2
 8000a9c:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000aa0:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8000aa4:	430a      	orrs	r2, r1
 8000aa6:	601a      	str	r2, [r3, #0]
}
 8000aa8:	bf00      	nop
 8000aaa:	3724      	adds	r7, #36	@ 0x24
 8000aac:	46bd      	mov	sp, r7
 8000aae:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000ab2:	4770      	bx	lr

08000ab4 <GPIO_IRQHandler>:
 *
 * @note					This function should be called in the interrupt service routine (ISR)
 * 							for the GPIO pin. It typically clears the interrupt flag and performs
 * 							any necessary interrupt handling operations.
 */
void GPIO_IRQHandler(uint8_t PinNumber) {
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	71fb      	strb	r3, [r7, #7]
// clear the EXTI PR register corresponding to the pin number
	if (EXTI->PR & (1 << PinNumber)) { // The result will be non-zero if the interrupt flag for the specified pin is set
 8000abe:	4b0c      	ldr	r3, [pc, #48]	@ (8000af0 <GPIO_IRQHandler+0x3c>)
 8000ac0:	695b      	ldr	r3, [r3, #20]
 8000ac2:	79fa      	ldrb	r2, [r7, #7]
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	fa01 f202 	lsl.w	r2, r1, r2
 8000aca:	4013      	ands	r3, r2
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d009      	beq.n	8000ae4 <GPIO_IRQHandler+0x30>
		// clear
		EXTI->PR |= (1 << PinNumber);
 8000ad0:	4b07      	ldr	r3, [pc, #28]	@ (8000af0 <GPIO_IRQHandler+0x3c>)
 8000ad2:	695b      	ldr	r3, [r3, #20]
 8000ad4:	79fa      	ldrb	r2, [r7, #7]
 8000ad6:	2101      	movs	r1, #1
 8000ad8:	fa01 f202 	lsl.w	r2, r1, r2
 8000adc:	4611      	mov	r1, r2
 8000ade:	4a04      	ldr	r2, [pc, #16]	@ (8000af0 <GPIO_IRQHandler+0x3c>)
 8000ae0:	430b      	orrs	r3, r1
 8000ae2:	6153      	str	r3, [r2, #20]

	}
}
 8000ae4:	bf00      	nop
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	40013c00 	.word	0x40013c00

08000af4 <_init>:
 8000af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000af6:	bf00      	nop
 8000af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000afa:	bc08      	pop	{r3}
 8000afc:	469e      	mov	lr, r3
 8000afe:	4770      	bx	lr

08000b00 <_fini>:
 8000b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b02:	bf00      	nop
 8000b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b06:	bc08      	pop	{r3}
 8000b08:	469e      	mov	lr, r3
 8000b0a:	4770      	bx	lr
