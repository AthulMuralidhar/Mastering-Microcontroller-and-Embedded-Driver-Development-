
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000540  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080006c8  080006d0  000016d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080006c8  080006c8  000016d0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080006c8  080006c8  000016d0  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080006c8  080006d0  000016d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006c8  080006c8  000016c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080006cc  080006cc  000016cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000016d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000016d0  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000016d0  2**0
                  CONTENTS, READONLY
 13 .comment      00000026  00000000  00000000  00001700  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000932  00000000  00000000  00001726  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000341  00000000  00000000  00002058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000000d8  00000000  00000000  000023a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000007e  00000000  00000000  00002478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000128c  00000000  00000000  000024f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00000730  00000000  00000000  00003782  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00005071  00000000  00000000  00003eb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000224  00000000  00000000  00008f24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008c  00000000  00000000  00009148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loclists 00000065  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <deregister_tm_clones>:
 8000188:	4803      	ldr	r0, [pc, #12]	@ (8000198 <deregister_tm_clones+0x10>)
 800018a:	4b04      	ldr	r3, [pc, #16]	@ (800019c <deregister_tm_clones+0x14>)
 800018c:	4283      	cmp	r3, r0
 800018e:	d002      	beq.n	8000196 <deregister_tm_clones+0xe>
 8000190:	4b03      	ldr	r3, [pc, #12]	@ (80001a0 <deregister_tm_clones+0x18>)
 8000192:	b103      	cbz	r3, 8000196 <deregister_tm_clones+0xe>
 8000194:	4718      	bx	r3
 8000196:	4770      	bx	lr
 8000198:	20000000 	.word	0x20000000
 800019c:	20000000 	.word	0x20000000
 80001a0:	00000000 	.word	0x00000000

080001a4 <register_tm_clones>:
 80001a4:	4805      	ldr	r0, [pc, #20]	@ (80001bc <register_tm_clones+0x18>)
 80001a6:	4b06      	ldr	r3, [pc, #24]	@ (80001c0 <register_tm_clones+0x1c>)
 80001a8:	1a1b      	subs	r3, r3, r0
 80001aa:	0fd9      	lsrs	r1, r3, #31
 80001ac:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 80001b0:	1049      	asrs	r1, r1, #1
 80001b2:	d002      	beq.n	80001ba <register_tm_clones+0x16>
 80001b4:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <register_tm_clones+0x20>)
 80001b6:	b103      	cbz	r3, 80001ba <register_tm_clones+0x16>
 80001b8:	4718      	bx	r3
 80001ba:	4770      	bx	lr
 80001bc:	20000000 	.word	0x20000000
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c06      	ldr	r4, [pc, #24]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b943      	cbnz	r3, 80001e2 <__do_global_dtors_aux+0x1a>
 80001d0:	f7ff ffda 	bl	8000188 <deregister_tm_clones>
 80001d4:	4b04      	ldr	r3, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	b113      	cbz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d8:	4804      	ldr	r0, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x24>)
 80001da:	f3af 8000 	nop.w
 80001de:	2301      	movs	r3, #1
 80001e0:	7023      	strb	r3, [r4, #0]
 80001e2:	bd10      	pop	{r4, pc}
 80001e4:	20000000 	.word	0x20000000
 80001e8:	00000000 	.word	0x00000000
 80001ec:	080006b0 	.word	0x080006b0

080001f0 <frame_dummy>:
 80001f0:	b508      	push	{r3, lr}
 80001f2:	4b04      	ldr	r3, [pc, #16]	@ (8000204 <frame_dummy+0x14>)
 80001f4:	b11b      	cbz	r3, 80001fe <frame_dummy+0xe>
 80001f6:	4904      	ldr	r1, [pc, #16]	@ (8000208 <frame_dummy+0x18>)
 80001f8:	4804      	ldr	r0, [pc, #16]	@ (800020c <frame_dummy+0x1c>)
 80001fa:	f3af 8000 	nop.w
 80001fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000202:	e7cf      	b.n	80001a4 <register_tm_clones>
 8000204:	00000000 	.word	0x00000000
 8000208:	20000004 	.word	0x20000004
 800020c:	080006b0 	.word	0x080006b0

08000210 <__libc_init_array>:
 8000210:	b570      	push	{r4, r5, r6, lr}
 8000212:	4b0f      	ldr	r3, [pc, #60]	@ (8000250 <__libc_init_array+0x40>)
 8000214:	4d0f      	ldr	r5, [pc, #60]	@ (8000254 <__libc_init_array+0x44>)
 8000216:	42ab      	cmp	r3, r5
 8000218:	eba3 0605 	sub.w	r6, r3, r5
 800021c:	d007      	beq.n	800022e <__libc_init_array+0x1e>
 800021e:	10b6      	asrs	r6, r6, #2
 8000220:	2400      	movs	r4, #0
 8000222:	f855 3b04 	ldr.w	r3, [r5], #4
 8000226:	3401      	adds	r4, #1
 8000228:	4798      	blx	r3
 800022a:	42a6      	cmp	r6, r4
 800022c:	d8f9      	bhi.n	8000222 <__libc_init_array+0x12>
 800022e:	f000 fa3f 	bl	80006b0 <_init>
 8000232:	4d09      	ldr	r5, [pc, #36]	@ (8000258 <__libc_init_array+0x48>)
 8000234:	4b09      	ldr	r3, [pc, #36]	@ (800025c <__libc_init_array+0x4c>)
 8000236:	1b5e      	subs	r6, r3, r5
 8000238:	42ab      	cmp	r3, r5
 800023a:	ea4f 06a6 	mov.w	r6, r6, asr #2
 800023e:	d006      	beq.n	800024e <__libc_init_array+0x3e>
 8000240:	2400      	movs	r4, #0
 8000242:	f855 3b04 	ldr.w	r3, [r5], #4
 8000246:	3401      	adds	r4, #1
 8000248:	4798      	blx	r3
 800024a:	42a6      	cmp	r6, r4
 800024c:	d8f9      	bhi.n	8000242 <__libc_init_array+0x32>
 800024e:	bd70      	pop	{r4, r5, r6, pc}
 8000250:	080006c8 	.word	0x080006c8
 8000254:	080006c8 	.word	0x080006c8
 8000258:	080006c8 	.word	0x080006c8
 800025c:	080006cc 	.word	0x080006cc

08000260 <delay>:
#include "stm32f407xx.h"
#include "stm32f407xx_gpio_driver.h"



void delay(void) {
 8000260:	b480      	push	{r7}
 8000262:	b083      	sub	sp, #12
 8000264:	af00      	add	r7, sp, #0
	for(uint32_t i=0; i < 500000; i++);
 8000266:	2300      	movs	r3, #0
 8000268:	607b      	str	r3, [r7, #4]
 800026a:	e002      	b.n	8000272 <delay+0x12>
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	3301      	adds	r3, #1
 8000270:	607b      	str	r3, [r7, #4]
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	4a04      	ldr	r2, [pc, #16]	@ (8000288 <delay+0x28>)
 8000276:	4293      	cmp	r3, r2
 8000278:	d9f8      	bls.n	800026c <delay+0xc>
}
 800027a:	bf00      	nop
 800027c:	bf00      	nop
 800027e:	370c      	adds	r7, #12
 8000280:	46bd      	mov	sp, r7
 8000282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000286:	4770      	bx	lr
 8000288:	0007a11f 	.word	0x0007a11f

0800028c <main>:

int main(void) {
 800028c:	b580      	push	{r7, lr}
 800028e:	b084      	sub	sp, #16
 8000290:	af00      	add	r7, sp, #0

	GPIO_Handle_t GpioLed;

	GpioLed.pGPIOx = GPIOD;
 8000292:	4b0e      	ldr	r3, [pc, #56]	@ (80002cc <main+0x40>)
 8000294:	607b      	str	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8000296:	230c      	movs	r3, #12
 8000298:	723b      	strb	r3, [r7, #8]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT;
 800029a:	2301      	movs	r3, #1
 800029c:	727b      	strb	r3, [r7, #9]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OP_SPEED_FAST;
 800029e:	2302      	movs	r3, #2
 80002a0:	72bb      	strb	r3, [r7, #10]
	GpioLed.GPIO_PinConfig.GPIO_PinOpType = GPIO_OP_TYPE_PP;     // push pull output type
 80002a2:	2300      	movs	r3, #0
 80002a4:	733b      	strb	r3, [r7, #12]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002a6:	2300      	movs	r3, #0
 80002a8:	72fb      	strb	r3, [r7, #11]


	GPIO_PClockControl(GPIOD, ENABLE);
 80002aa:	2101      	movs	r1, #1
 80002ac:	4807      	ldr	r0, [pc, #28]	@ (80002cc <main+0x40>)
 80002ae:	f000 f839 	bl	8000324 <GPIO_PClockControl>

	GPIO_Init(&GpioLed);
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	4618      	mov	r0, r3
 80002b6:	f000 f91f 	bl	80004f8 <GPIO_Init>

	while(1) {
		GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_NO_12);
 80002ba:	210c      	movs	r1, #12
 80002bc:	4803      	ldr	r0, [pc, #12]	@ (80002cc <main+0x40>)
 80002be:	f000 f9e2 	bl	8000686 <GPIO_ToggleOutputPin>
		delay();
 80002c2:	f7ff ffcd 	bl	8000260 <delay>
		GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_NO_12);
 80002c6:	bf00      	nop
 80002c8:	e7f7      	b.n	80002ba <main+0x2e>
 80002ca:	bf00      	nop
 80002cc:	40020c00 	.word	0x40020c00

080002d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002d0:	480d      	ldr	r0, [pc, #52]	@ (8000308 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002d2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002d4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002d8:	480c      	ldr	r0, [pc, #48]	@ (800030c <LoopForever+0x6>)
  ldr r1, =_edata
 80002da:	490d      	ldr	r1, [pc, #52]	@ (8000310 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002dc:	4a0d      	ldr	r2, [pc, #52]	@ (8000314 <LoopForever+0xe>)
  movs r3, #0
 80002de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002e0:	e002      	b.n	80002e8 <LoopCopyDataInit>

080002e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002e6:	3304      	adds	r3, #4

080002e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002ec:	d3f9      	bcc.n	80002e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000318 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002f0:	4c0a      	ldr	r4, [pc, #40]	@ (800031c <LoopForever+0x16>)
  movs r3, #0
 80002f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002f4:	e001      	b.n	80002fa <LoopFillZerobss>

080002f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002f8:	3204      	adds	r2, #4

080002fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002fc:	d3fb      	bcc.n	80002f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002fe:	f7ff ff87 	bl	8000210 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000302:	f7ff ffc3 	bl	800028c <main>

08000306 <LoopForever>:

LoopForever:
  b LoopForever
 8000306:	e7fe      	b.n	8000306 <LoopForever>
  ldr   r0, =_estack
 8000308:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800030c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000310:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000314:	080006d0 	.word	0x080006d0
  ldr r2, =_sbss
 8000318:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800031c:	2000001c 	.word	0x2000001c

08000320 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000320:	e7fe      	b.n	8000320 <ADC_IRQHandler>
	...

08000324 <GPIO_PClockControl>:
 *
 * @return				none
 *
 * @note				Peripheral clock should be enabled before using the GPIO port
 */
void GPIO_PClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi) {
 8000324:	b480      	push	{r7}
 8000326:	b083      	sub	sp, #12
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
 800032c:	460b      	mov	r3, r1
 800032e:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE) {
 8000330:	78fb      	ldrb	r3, [r7, #3]
 8000332:	2b01      	cmp	r3, #1
 8000334:	d161      	bne.n	80003fa <GPIO_PClockControl+0xd6>
		if (pGPIOx == GPIOA) {
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	4a65      	ldr	r2, [pc, #404]	@ (80004d0 <GPIO_PClockControl+0x1ac>)
 800033a:	4293      	cmp	r3, r2
 800033c:	d106      	bne.n	800034c <GPIO_PClockControl+0x28>
			GPIOA_PCLK_EN();
 800033e:	4b65      	ldr	r3, [pc, #404]	@ (80004d4 <GPIO_PClockControl+0x1b0>)
 8000340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000342:	4a64      	ldr	r2, [pc, #400]	@ (80004d4 <GPIO_PClockControl+0x1b0>)
 8000344:	f043 0301 	orr.w	r3, r3, #1
 8000348:	6313      	str	r3, [r2, #48]	@ 0x30
 800034a:	e056      	b.n	80003fa <GPIO_PClockControl+0xd6>
		} else if (pGPIOx == GPIOB) {
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	4a62      	ldr	r2, [pc, #392]	@ (80004d8 <GPIO_PClockControl+0x1b4>)
 8000350:	4293      	cmp	r3, r2
 8000352:	d106      	bne.n	8000362 <GPIO_PClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000354:	4b5f      	ldr	r3, [pc, #380]	@ (80004d4 <GPIO_PClockControl+0x1b0>)
 8000356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000358:	4a5e      	ldr	r2, [pc, #376]	@ (80004d4 <GPIO_PClockControl+0x1b0>)
 800035a:	f043 0302 	orr.w	r3, r3, #2
 800035e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000360:	e04b      	b.n	80003fa <GPIO_PClockControl+0xd6>
		} else if (pGPIOx == GPIOC) {
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	4a5d      	ldr	r2, [pc, #372]	@ (80004dc <GPIO_PClockControl+0x1b8>)
 8000366:	4293      	cmp	r3, r2
 8000368:	d106      	bne.n	8000378 <GPIO_PClockControl+0x54>
			GPIOC_PCLK_EN();
 800036a:	4b5a      	ldr	r3, [pc, #360]	@ (80004d4 <GPIO_PClockControl+0x1b0>)
 800036c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800036e:	4a59      	ldr	r2, [pc, #356]	@ (80004d4 <GPIO_PClockControl+0x1b0>)
 8000370:	f043 0304 	orr.w	r3, r3, #4
 8000374:	6313      	str	r3, [r2, #48]	@ 0x30
 8000376:	e040      	b.n	80003fa <GPIO_PClockControl+0xd6>
		} else if (pGPIOx == GPIOD) {
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	4a59      	ldr	r2, [pc, #356]	@ (80004e0 <GPIO_PClockControl+0x1bc>)
 800037c:	4293      	cmp	r3, r2
 800037e:	d106      	bne.n	800038e <GPIO_PClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000380:	4b54      	ldr	r3, [pc, #336]	@ (80004d4 <GPIO_PClockControl+0x1b0>)
 8000382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000384:	4a53      	ldr	r2, [pc, #332]	@ (80004d4 <GPIO_PClockControl+0x1b0>)
 8000386:	f043 0308 	orr.w	r3, r3, #8
 800038a:	6313      	str	r3, [r2, #48]	@ 0x30
 800038c:	e035      	b.n	80003fa <GPIO_PClockControl+0xd6>
		} else if (pGPIOx == GPIOE) {
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	4a54      	ldr	r2, [pc, #336]	@ (80004e4 <GPIO_PClockControl+0x1c0>)
 8000392:	4293      	cmp	r3, r2
 8000394:	d106      	bne.n	80003a4 <GPIO_PClockControl+0x80>
			GPIOE_PCLK_EN();
 8000396:	4b4f      	ldr	r3, [pc, #316]	@ (80004d4 <GPIO_PClockControl+0x1b0>)
 8000398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800039a:	4a4e      	ldr	r2, [pc, #312]	@ (80004d4 <GPIO_PClockControl+0x1b0>)
 800039c:	f043 0310 	orr.w	r3, r3, #16
 80003a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80003a2:	e02a      	b.n	80003fa <GPIO_PClockControl+0xd6>
		} else if (pGPIOx == GPIOF) {
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	4a50      	ldr	r2, [pc, #320]	@ (80004e8 <GPIO_PClockControl+0x1c4>)
 80003a8:	4293      	cmp	r3, r2
 80003aa:	d106      	bne.n	80003ba <GPIO_PClockControl+0x96>
			GPIOF_PCLK_EN();
 80003ac:	4b49      	ldr	r3, [pc, #292]	@ (80004d4 <GPIO_PClockControl+0x1b0>)
 80003ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003b0:	4a48      	ldr	r2, [pc, #288]	@ (80004d4 <GPIO_PClockControl+0x1b0>)
 80003b2:	f043 0320 	orr.w	r3, r3, #32
 80003b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80003b8:	e01f      	b.n	80003fa <GPIO_PClockControl+0xd6>
		} else if (pGPIOx == GPIOG) {
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	4a4b      	ldr	r2, [pc, #300]	@ (80004ec <GPIO_PClockControl+0x1c8>)
 80003be:	4293      	cmp	r3, r2
 80003c0:	d106      	bne.n	80003d0 <GPIO_PClockControl+0xac>
			GPIOG_PCLK_EN();
 80003c2:	4b44      	ldr	r3, [pc, #272]	@ (80004d4 <GPIO_PClockControl+0x1b0>)
 80003c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003c6:	4a43      	ldr	r2, [pc, #268]	@ (80004d4 <GPIO_PClockControl+0x1b0>)
 80003c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80003cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80003ce:	e014      	b.n	80003fa <GPIO_PClockControl+0xd6>
		} else if (pGPIOx == GPIOH) {
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	4a47      	ldr	r2, [pc, #284]	@ (80004f0 <GPIO_PClockControl+0x1cc>)
 80003d4:	4293      	cmp	r3, r2
 80003d6:	d106      	bne.n	80003e6 <GPIO_PClockControl+0xc2>
			GPIOH_PCLK_EN();
 80003d8:	4b3e      	ldr	r3, [pc, #248]	@ (80004d4 <GPIO_PClockControl+0x1b0>)
 80003da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003dc:	4a3d      	ldr	r2, [pc, #244]	@ (80004d4 <GPIO_PClockControl+0x1b0>)
 80003de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80003e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80003e4:	e009      	b.n	80003fa <GPIO_PClockControl+0xd6>
		} else if (pGPIOx == GPIOI) {
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	4a42      	ldr	r2, [pc, #264]	@ (80004f4 <GPIO_PClockControl+0x1d0>)
 80003ea:	4293      	cmp	r3, r2
 80003ec:	d105      	bne.n	80003fa <GPIO_PClockControl+0xd6>
			GPIOI_PCLK_EN();
 80003ee:	4b39      	ldr	r3, [pc, #228]	@ (80004d4 <GPIO_PClockControl+0x1b0>)
 80003f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003f2:	4a38      	ldr	r2, [pc, #224]	@ (80004d4 <GPIO_PClockControl+0x1b0>)
 80003f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80003f8:	6313      	str	r3, [r2, #48]	@ 0x30
		}
	}

	if (EnOrDi == DISABLE) {
 80003fa:	78fb      	ldrb	r3, [r7, #3]
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d161      	bne.n	80004c4 <GPIO_PClockControl+0x1a0>
		if (pGPIOx == GPIOA) {
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	4a33      	ldr	r2, [pc, #204]	@ (80004d0 <GPIO_PClockControl+0x1ac>)
 8000404:	4293      	cmp	r3, r2
 8000406:	d106      	bne.n	8000416 <GPIO_PClockControl+0xf2>
			GPIOA_PCLK_DI();
 8000408:	4b32      	ldr	r3, [pc, #200]	@ (80004d4 <GPIO_PClockControl+0x1b0>)
 800040a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800040c:	4a31      	ldr	r2, [pc, #196]	@ (80004d4 <GPIO_PClockControl+0x1b0>)
 800040e:	f023 0301 	bic.w	r3, r3, #1
 8000412:	6313      	str	r3, [r2, #48]	@ 0x30
		} else if (pGPIOx == GPIOI) {
			GPIOI_PCLK_DI();
		}
	}

}
 8000414:	e056      	b.n	80004c4 <GPIO_PClockControl+0x1a0>
		} else if (pGPIOx == GPIOB) {
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	4a2f      	ldr	r2, [pc, #188]	@ (80004d8 <GPIO_PClockControl+0x1b4>)
 800041a:	4293      	cmp	r3, r2
 800041c:	d106      	bne.n	800042c <GPIO_PClockControl+0x108>
			GPIOB_PCLK_DI();
 800041e:	4b2d      	ldr	r3, [pc, #180]	@ (80004d4 <GPIO_PClockControl+0x1b0>)
 8000420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000422:	4a2c      	ldr	r2, [pc, #176]	@ (80004d4 <GPIO_PClockControl+0x1b0>)
 8000424:	f023 0302 	bic.w	r3, r3, #2
 8000428:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800042a:	e04b      	b.n	80004c4 <GPIO_PClockControl+0x1a0>
		} else if (pGPIOx == GPIOC) {
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	4a2b      	ldr	r2, [pc, #172]	@ (80004dc <GPIO_PClockControl+0x1b8>)
 8000430:	4293      	cmp	r3, r2
 8000432:	d106      	bne.n	8000442 <GPIO_PClockControl+0x11e>
			GPIOC_PCLK_DI();
 8000434:	4b27      	ldr	r3, [pc, #156]	@ (80004d4 <GPIO_PClockControl+0x1b0>)
 8000436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000438:	4a26      	ldr	r2, [pc, #152]	@ (80004d4 <GPIO_PClockControl+0x1b0>)
 800043a:	f023 0304 	bic.w	r3, r3, #4
 800043e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000440:	e040      	b.n	80004c4 <GPIO_PClockControl+0x1a0>
		} else if (pGPIOx == GPIOD) {
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	4a26      	ldr	r2, [pc, #152]	@ (80004e0 <GPIO_PClockControl+0x1bc>)
 8000446:	4293      	cmp	r3, r2
 8000448:	d106      	bne.n	8000458 <GPIO_PClockControl+0x134>
			GPIOD_PCLK_DI();
 800044a:	4b22      	ldr	r3, [pc, #136]	@ (80004d4 <GPIO_PClockControl+0x1b0>)
 800044c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800044e:	4a21      	ldr	r2, [pc, #132]	@ (80004d4 <GPIO_PClockControl+0x1b0>)
 8000450:	f023 0308 	bic.w	r3, r3, #8
 8000454:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000456:	e035      	b.n	80004c4 <GPIO_PClockControl+0x1a0>
		} else if (pGPIOx == GPIOE) {
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	4a22      	ldr	r2, [pc, #136]	@ (80004e4 <GPIO_PClockControl+0x1c0>)
 800045c:	4293      	cmp	r3, r2
 800045e:	d106      	bne.n	800046e <GPIO_PClockControl+0x14a>
			GPIOE_PCLK_DI();
 8000460:	4b1c      	ldr	r3, [pc, #112]	@ (80004d4 <GPIO_PClockControl+0x1b0>)
 8000462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000464:	4a1b      	ldr	r2, [pc, #108]	@ (80004d4 <GPIO_PClockControl+0x1b0>)
 8000466:	f023 0310 	bic.w	r3, r3, #16
 800046a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800046c:	e02a      	b.n	80004c4 <GPIO_PClockControl+0x1a0>
		} else if (pGPIOx == GPIOF) {
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	4a1d      	ldr	r2, [pc, #116]	@ (80004e8 <GPIO_PClockControl+0x1c4>)
 8000472:	4293      	cmp	r3, r2
 8000474:	d106      	bne.n	8000484 <GPIO_PClockControl+0x160>
			GPIOF_PCLK_DI();
 8000476:	4b17      	ldr	r3, [pc, #92]	@ (80004d4 <GPIO_PClockControl+0x1b0>)
 8000478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800047a:	4a16      	ldr	r2, [pc, #88]	@ (80004d4 <GPIO_PClockControl+0x1b0>)
 800047c:	f023 0320 	bic.w	r3, r3, #32
 8000480:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000482:	e01f      	b.n	80004c4 <GPIO_PClockControl+0x1a0>
		} else if (pGPIOx == GPIOG) {
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	4a19      	ldr	r2, [pc, #100]	@ (80004ec <GPIO_PClockControl+0x1c8>)
 8000488:	4293      	cmp	r3, r2
 800048a:	d106      	bne.n	800049a <GPIO_PClockControl+0x176>
			GPIOG_PCLK_DI();
 800048c:	4b11      	ldr	r3, [pc, #68]	@ (80004d4 <GPIO_PClockControl+0x1b0>)
 800048e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000490:	4a10      	ldr	r2, [pc, #64]	@ (80004d4 <GPIO_PClockControl+0x1b0>)
 8000492:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000496:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000498:	e014      	b.n	80004c4 <GPIO_PClockControl+0x1a0>
		} else if (pGPIOx == GPIOH) {
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	4a14      	ldr	r2, [pc, #80]	@ (80004f0 <GPIO_PClockControl+0x1cc>)
 800049e:	4293      	cmp	r3, r2
 80004a0:	d106      	bne.n	80004b0 <GPIO_PClockControl+0x18c>
			GPIOH_PCLK_DI();
 80004a2:	4b0c      	ldr	r3, [pc, #48]	@ (80004d4 <GPIO_PClockControl+0x1b0>)
 80004a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004a6:	4a0b      	ldr	r2, [pc, #44]	@ (80004d4 <GPIO_PClockControl+0x1b0>)
 80004a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80004ac:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004ae:	e009      	b.n	80004c4 <GPIO_PClockControl+0x1a0>
		} else if (pGPIOx == GPIOI) {
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	4a10      	ldr	r2, [pc, #64]	@ (80004f4 <GPIO_PClockControl+0x1d0>)
 80004b4:	4293      	cmp	r3, r2
 80004b6:	d105      	bne.n	80004c4 <GPIO_PClockControl+0x1a0>
			GPIOI_PCLK_DI();
 80004b8:	4b06      	ldr	r3, [pc, #24]	@ (80004d4 <GPIO_PClockControl+0x1b0>)
 80004ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004bc:	4a05      	ldr	r2, [pc, #20]	@ (80004d4 <GPIO_PClockControl+0x1b0>)
 80004be:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80004c2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004c4:	bf00      	nop
 80004c6:	370c      	adds	r7, #12
 80004c8:	46bd      	mov	sp, r7
 80004ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ce:	4770      	bx	lr
 80004d0:	40020000 	.word	0x40020000
 80004d4:	40023800 	.word	0x40023800
 80004d8:	40020400 	.word	0x40020400
 80004dc:	40020800 	.word	0x40020800
 80004e0:	40020c00 	.word	0x40020c00
 80004e4:	40021000 	.word	0x40021000
 80004e8:	40021400 	.word	0x40021400
 80004ec:	40021800 	.word	0x40021800
 80004f0:	40021c00 	.word	0x40021c00
 80004f4:	40022000 	.word	0x40022000

080004f8 <GPIO_Init>:
 *
 * @return					none
 *
 * @note					This function should be called before using the GPIO pin
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 80004f8:	b480      	push	{r7}
 80004fa:	b085      	sub	sp, #20
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
	uint32_t tempRegister;

	// 1. configure the mode of the pin
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) {
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	795b      	ldrb	r3, [r3, #5]
 8000504:	2b03      	cmp	r3, #3
 8000506:	d81e      	bhi.n	8000546 <GPIO_Init+0x4e>
		// non interrupt mode
		// For example, if you're configuring pin 5, the mode bits would be shifted left by 10 positions (2 * 5),
		// placing them in bits 10 and 11 of the register.
		tempRegister = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	795b      	ldrb	r3, [r3, #5]
 800050c:	461a      	mov	r2, r3
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	791b      	ldrb	r3, [r3, #4]
 8000512:	005b      	lsls	r3, r3, #1
 8000514:	fa02 f303 	lsl.w	r3, r2, r3
 8000518:	60fb      	str	r3, [r7, #12]
		// clear
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);   // 0x3 == 11
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	681a      	ldr	r2, [r3, #0]
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	791b      	ldrb	r3, [r3, #4]
 8000524:	4619      	mov	r1, r3
 8000526:	2303      	movs	r3, #3
 8000528:	408b      	lsls	r3, r1
 800052a:	43db      	mvns	r3, r3
 800052c:	4619      	mov	r1, r3
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	400a      	ands	r2, r1
 8000534:	601a      	str	r2, [r3, #0]
		// store
		pGPIOHandle->pGPIOx->MODER |= tempRegister;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	6819      	ldr	r1, [r3, #0]
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	68fa      	ldr	r2, [r7, #12]
 8000542:	430a      	orrs	r2, r1
 8000544:	601a      	str	r2, [r3, #0]
		// interrupt mode
		// TODO
	}

	// reset temporary register
	tempRegister = 0;
 8000546:	2300      	movs	r3, #0
 8000548:	60fb      	str	r3, [r7, #12]
	// 2. configure the speed
	tempRegister = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	799b      	ldrb	r3, [r3, #6]
 800054e:	461a      	mov	r2, r3
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	791b      	ldrb	r3, [r3, #4]
 8000554:	005b      	lsls	r3, r3, #1
 8000556:	fa02 f303 	lsl.w	r3, r2, r3
 800055a:	60fb      	str	r3, [r7, #12]
	// clear
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);   // 0x3 == 0b11
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	689a      	ldr	r2, [r3, #8]
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	791b      	ldrb	r3, [r3, #4]
 8000566:	4619      	mov	r1, r3
 8000568:	2303      	movs	r3, #3
 800056a:	408b      	lsls	r3, r1
 800056c:	43db      	mvns	r3, r3
 800056e:	4619      	mov	r1, r3
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	400a      	ands	r2, r1
 8000576:	609a      	str	r2, [r3, #8]
	// store
	pGPIOHandle->pGPIOx->OSPEEDR |= tempRegister;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	6899      	ldr	r1, [r3, #8]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	68fa      	ldr	r2, [r7, #12]
 8000584:	430a      	orrs	r2, r1
 8000586:	609a      	str	r2, [r3, #8]


	// reset temporary register
	tempRegister = 0;
 8000588:	2300      	movs	r3, #0
 800058a:	60fb      	str	r3, [r7, #12]
	// 3. configure the pull up pull down
	tempRegister = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	79db      	ldrb	r3, [r3, #7]
 8000590:	461a      	mov	r2, r3
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	791b      	ldrb	r3, [r3, #4]
 8000596:	005b      	lsls	r3, r3, #1
 8000598:	fa02 f303 	lsl.w	r3, r2, r3
 800059c:	60fb      	str	r3, [r7, #12]
	// clear
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);   // 0x3 == 0b11
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	68da      	ldr	r2, [r3, #12]
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	791b      	ldrb	r3, [r3, #4]
 80005a8:	4619      	mov	r1, r3
 80005aa:	2303      	movs	r3, #3
 80005ac:	408b      	lsls	r3, r1
 80005ae:	43db      	mvns	r3, r3
 80005b0:	4619      	mov	r1, r3
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	400a      	ands	r2, r1
 80005b8:	60da      	str	r2, [r3, #12]
	// store
	pGPIOHandle->pGPIOx->PUPDR |= tempRegister;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	68d9      	ldr	r1, [r3, #12]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	68fa      	ldr	r2, [r7, #12]
 80005c6:	430a      	orrs	r2, r1
 80005c8:	60da      	str	r2, [r3, #12]

	// reset temporary register
	tempRegister = 0;
 80005ca:	2300      	movs	r3, #0
 80005cc:	60fb      	str	r3, [r7, #12]
	// 4. configure the output type
	tempRegister = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOpType << (1 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));   // no 2 bits here only 16bits is used
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	7a1b      	ldrb	r3, [r3, #8]
 80005d2:	461a      	mov	r2, r3
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	791b      	ldrb	r3, [r3, #4]
 80005d8:	fa02 f303 	lsl.w	r3, r2, r3
 80005dc:	60fb      	str	r3, [r7, #12]
	// clear
	pGPIOHandle->pGPIOx->OTYPER &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	685a      	ldr	r2, [r3, #4]
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	791b      	ldrb	r3, [r3, #4]
 80005e8:	4619      	mov	r1, r3
 80005ea:	2301      	movs	r3, #1
 80005ec:	408b      	lsls	r3, r1
 80005ee:	43db      	mvns	r3, r3
 80005f0:	4619      	mov	r1, r3
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	400a      	ands	r2, r1
 80005f8:	605a      	str	r2, [r3, #4]
	// store
	pGPIOHandle->pGPIOx->OTYPER |= tempRegister;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	6859      	ldr	r1, [r3, #4]
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	68fa      	ldr	r2, [r7, #12]
 8000606:	430a      	orrs	r2, r1
 8000608:	605a      	str	r2, [r3, #4]

	// reset temporary register
	tempRegister = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	60fb      	str	r3, [r7, #12]
	// 5. configure the alternate functionality
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALT_FN) {
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	795b      	ldrb	r3, [r3, #5]
 8000612:	2b02      	cmp	r3, #2
 8000614:	d131      	bne.n	800067a <GPIO_Init+0x182>
		uint8_t lowOrHigh = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;    // if this is 0, then low, - this decides if it is AFR low or AFR high register
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	791b      	ldrb	r3, [r3, #4]
 800061a:	08db      	lsrs	r3, r3, #3
 800061c:	72fb      	strb	r3, [r7, #11]
		uint8_t bitPosition = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;   // this decides where the pin registers fall within low or high register
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	791b      	ldrb	r3, [r3, #4]
 8000622:	f003 0307 	and.w	r3, r3, #7
 8000626:	72bb      	strb	r3, [r7, #10]

		// clear
		pGPIOHandle->pGPIOx->AFR[lowOrHigh]  &=  ~(0xF << (4* bitPosition));    // 0xF == 0b1111
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	7afa      	ldrb	r2, [r7, #11]
 800062e:	3208      	adds	r2, #8
 8000630:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000634:	7abb      	ldrb	r3, [r7, #10]
 8000636:	009b      	lsls	r3, r3, #2
 8000638:	220f      	movs	r2, #15
 800063a:	fa02 f303 	lsl.w	r3, r2, r3
 800063e:	43db      	mvns	r3, r3
 8000640:	4618      	mov	r0, r3
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	7afa      	ldrb	r2, [r7, #11]
 8000648:	4001      	ands	r1, r0
 800064a:	3208      	adds	r2, #8
 800064c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		// store
		pGPIOHandle->pGPIOx->AFR[lowOrHigh]  |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * bitPosition));
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	7afa      	ldrb	r2, [r7, #11]
 8000656:	3208      	adds	r2, #8
 8000658:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	7a5b      	ldrb	r3, [r3, #9]
 8000660:	461a      	mov	r2, r3
 8000662:	7abb      	ldrb	r3, [r7, #10]
 8000664:	009b      	lsls	r3, r3, #2
 8000666:	fa02 f303 	lsl.w	r3, r2, r3
 800066a:	4618      	mov	r0, r3
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	7afa      	ldrb	r2, [r7, #11]
 8000672:	4301      	orrs	r1, r0
 8000674:	3208      	adds	r2, #8
 8000676:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}



}
 800067a:	bf00      	nop
 800067c:	3714      	adds	r7, #20
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr

08000686 <GPIO_ToggleOutputPin>:
 *
 * @return				none
 *
 * @note				This function changes the state of the pin from high to low or low to high
 */
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber) {
 8000686:	b480      	push	{r7}
 8000688:	b083      	sub	sp, #12
 800068a:	af00      	add	r7, sp, #0
 800068c:	6078      	str	r0, [r7, #4]
 800068e:	460b      	mov	r3, r1
 8000690:	70fb      	strb	r3, [r7, #3]
	//	For example, if PinNumber is 5 and the current state of ODR is 0b11110000,
	//	after this operation, the new state would be 0b11110000 ^ 0b00100000 = 0b11010000.

	pGPIOx->ODR ^= (1 << PinNumber);
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	695b      	ldr	r3, [r3, #20]
 8000696:	78fa      	ldrb	r2, [r7, #3]
 8000698:	2101      	movs	r1, #1
 800069a:	fa01 f202 	lsl.w	r2, r1, r2
 800069e:	405a      	eors	r2, r3
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	615a      	str	r2, [r3, #20]
}
 80006a4:	bf00      	nop
 80006a6:	370c      	adds	r7, #12
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr

080006b0 <_init>:
 80006b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006b2:	bf00      	nop
 80006b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006b6:	bc08      	pop	{r3}
 80006b8:	469e      	mov	lr, r3
 80006ba:	4770      	bx	lr

080006bc <_fini>:
 80006bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006be:	bf00      	nop
 80006c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006c2:	bc08      	pop	{r3}
 80006c4:	469e      	mov	lr, r3
 80006c6:	4770      	bx	lr
