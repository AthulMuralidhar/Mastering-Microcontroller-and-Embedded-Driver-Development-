
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000744  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080008cc  080008d4  000018d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080008cc  080008cc  000018d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080008cc  080008cc  000018d4  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080008cc  080008d4  000018d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080008cc  080008cc  000018cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080008d0  080008d0  000018d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000018d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000018d4  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000018d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000026  00000000  00000000  00001904  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000a5d  00000000  00000000  0000192a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000363  00000000  00000000  00002387  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000000d8  00000000  00000000  000026f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000007f  00000000  00000000  000027c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000128e  00000000  00000000  00002847  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000089e  00000000  00000000  00003ad5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000522f  00000000  00000000  00004373  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000224  00000000  00000000  000095a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008c  00000000  00000000  000097c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loclists 00000065  00000000  00000000  00009854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <deregister_tm_clones>:
 8000188:	4803      	ldr	r0, [pc, #12]	@ (8000198 <deregister_tm_clones+0x10>)
 800018a:	4b04      	ldr	r3, [pc, #16]	@ (800019c <deregister_tm_clones+0x14>)
 800018c:	4283      	cmp	r3, r0
 800018e:	d002      	beq.n	8000196 <deregister_tm_clones+0xe>
 8000190:	4b03      	ldr	r3, [pc, #12]	@ (80001a0 <deregister_tm_clones+0x18>)
 8000192:	b103      	cbz	r3, 8000196 <deregister_tm_clones+0xe>
 8000194:	4718      	bx	r3
 8000196:	4770      	bx	lr
 8000198:	20000000 	.word	0x20000000
 800019c:	20000000 	.word	0x20000000
 80001a0:	00000000 	.word	0x00000000

080001a4 <register_tm_clones>:
 80001a4:	4805      	ldr	r0, [pc, #20]	@ (80001bc <register_tm_clones+0x18>)
 80001a6:	4b06      	ldr	r3, [pc, #24]	@ (80001c0 <register_tm_clones+0x1c>)
 80001a8:	1a1b      	subs	r3, r3, r0
 80001aa:	0fd9      	lsrs	r1, r3, #31
 80001ac:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 80001b0:	1049      	asrs	r1, r1, #1
 80001b2:	d002      	beq.n	80001ba <register_tm_clones+0x16>
 80001b4:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <register_tm_clones+0x20>)
 80001b6:	b103      	cbz	r3, 80001ba <register_tm_clones+0x16>
 80001b8:	4718      	bx	r3
 80001ba:	4770      	bx	lr
 80001bc:	20000000 	.word	0x20000000
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c06      	ldr	r4, [pc, #24]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b943      	cbnz	r3, 80001e2 <__do_global_dtors_aux+0x1a>
 80001d0:	f7ff ffda 	bl	8000188 <deregister_tm_clones>
 80001d4:	4b04      	ldr	r3, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	b113      	cbz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d8:	4804      	ldr	r0, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x24>)
 80001da:	f3af 8000 	nop.w
 80001de:	2301      	movs	r3, #1
 80001e0:	7023      	strb	r3, [r4, #0]
 80001e2:	bd10      	pop	{r4, pc}
 80001e4:	20000000 	.word	0x20000000
 80001e8:	00000000 	.word	0x00000000
 80001ec:	080008b4 	.word	0x080008b4

080001f0 <frame_dummy>:
 80001f0:	b508      	push	{r3, lr}
 80001f2:	4b04      	ldr	r3, [pc, #16]	@ (8000204 <frame_dummy+0x14>)
 80001f4:	b11b      	cbz	r3, 80001fe <frame_dummy+0xe>
 80001f6:	4904      	ldr	r1, [pc, #16]	@ (8000208 <frame_dummy+0x18>)
 80001f8:	4804      	ldr	r0, [pc, #16]	@ (800020c <frame_dummy+0x1c>)
 80001fa:	f3af 8000 	nop.w
 80001fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000202:	e7cf      	b.n	80001a4 <register_tm_clones>
 8000204:	00000000 	.word	0x00000000
 8000208:	20000004 	.word	0x20000004
 800020c:	080008b4 	.word	0x080008b4

08000210 <__libc_init_array>:
 8000210:	b570      	push	{r4, r5, r6, lr}
 8000212:	4b0f      	ldr	r3, [pc, #60]	@ (8000250 <__libc_init_array+0x40>)
 8000214:	4d0f      	ldr	r5, [pc, #60]	@ (8000254 <__libc_init_array+0x44>)
 8000216:	42ab      	cmp	r3, r5
 8000218:	eba3 0605 	sub.w	r6, r3, r5
 800021c:	d007      	beq.n	800022e <__libc_init_array+0x1e>
 800021e:	10b6      	asrs	r6, r6, #2
 8000220:	2400      	movs	r4, #0
 8000222:	f855 3b04 	ldr.w	r3, [r5], #4
 8000226:	3401      	adds	r4, #1
 8000228:	4798      	blx	r3
 800022a:	42a6      	cmp	r6, r4
 800022c:	d8f9      	bhi.n	8000222 <__libc_init_array+0x12>
 800022e:	f000 fb41 	bl	80008b4 <_init>
 8000232:	4d09      	ldr	r5, [pc, #36]	@ (8000258 <__libc_init_array+0x48>)
 8000234:	4b09      	ldr	r3, [pc, #36]	@ (800025c <__libc_init_array+0x4c>)
 8000236:	1b5e      	subs	r6, r3, r5
 8000238:	42ab      	cmp	r3, r5
 800023a:	ea4f 06a6 	mov.w	r6, r6, asr #2
 800023e:	d006      	beq.n	800024e <__libc_init_array+0x3e>
 8000240:	2400      	movs	r4, #0
 8000242:	f855 3b04 	ldr.w	r3, [r5], #4
 8000246:	3401      	adds	r4, #1
 8000248:	4798      	blx	r3
 800024a:	42a6      	cmp	r6, r4
 800024c:	d8f9      	bhi.n	8000242 <__libc_init_array+0x32>
 800024e:	bd70      	pop	{r4, r5, r6, pc}
 8000250:	080008cc 	.word	0x080008cc
 8000254:	080008cc 	.word	0x080008cc
 8000258:	080008cc 	.word	0x080008cc
 800025c:	080008d0 	.word	0x080008d0

08000260 <delay>:
#include "stm32f407xx_gpio_driver.h"

#define HIGH		 1
#define BTN_PRESSED  HIGH

void delay(void) {
 8000260:	b480      	push	{r7}
 8000262:	b083      	sub	sp, #12
 8000264:	af00      	add	r7, sp, #0
	for (uint32_t i = 0; i < 500000; i++)
 8000266:	2300      	movs	r3, #0
 8000268:	607b      	str	r3, [r7, #4]
 800026a:	e002      	b.n	8000272 <delay+0x12>
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	3301      	adds	r3, #1
 8000270:	607b      	str	r3, [r7, #4]
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	4a04      	ldr	r2, [pc, #16]	@ (8000288 <delay+0x28>)
 8000276:	4293      	cmp	r3, r2
 8000278:	d9f8      	bls.n	800026c <delay+0xc>
		;
}
 800027a:	bf00      	nop
 800027c:	bf00      	nop
 800027e:	370c      	adds	r7, #12
 8000280:	46bd      	mov	sp, r7
 8000282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000286:	4770      	bx	lr
 8000288:	0007a11f 	.word	0x0007a11f

0800028c <main>:

int main(void) {
 800028c:	b580      	push	{r7, lr}
 800028e:	b088      	sub	sp, #32
 8000290:	af00      	add	r7, sp, #0
	uint32_t whileLoopProfiler = 0;
 8000292:	2300      	movs	r3, #0
 8000294:	61fb      	str	r3, [r7, #28]

	GPIO_Handle_t GpioLed, GpioBtn;

	// push pull output type  configuration for LED
	GpioLed.pGPIOx = GPIOD;
 8000296:	4b1c      	ldr	r3, [pc, #112]	@ (8000308 <main+0x7c>)
 8000298:	613b      	str	r3, [r7, #16]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 800029a:	230c      	movs	r3, #12
 800029c:	753b      	strb	r3, [r7, #20]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT;
 800029e:	2301      	movs	r3, #1
 80002a0:	757b      	strb	r3, [r7, #21]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OP_SPEED_FAST;
 80002a2:	2302      	movs	r3, #2
 80002a4:	75bb      	strb	r3, [r7, #22]
	GpioLed.GPIO_PinConfig.GPIO_PinOpType = GPIO_OP_TYPE_PP; // push pull output type
 80002a6:	2300      	movs	r3, #0
 80002a8:	763b      	strb	r3, [r7, #24]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002aa:	2300      	movs	r3, #0
 80002ac:	75fb      	strb	r3, [r7, #23]

	GPIO_PClockControl(GPIOD, ENABLE);
 80002ae:	2101      	movs	r1, #1
 80002b0:	4815      	ldr	r0, [pc, #84]	@ (8000308 <main+0x7c>)
 80002b2:	f000 f857 	bl	8000364 <GPIO_PClockControl>
	GPIO_Init(&GpioLed);
 80002b6:	f107 0310 	add.w	r3, r7, #16
 80002ba:	4618      	mov	r0, r3
 80002bc:	f000 f93c 	bl	8000538 <GPIO_Init>

	// button configuration
	GpioBtn.pGPIOx = GPIOA;
 80002c0:	4b12      	ldr	r3, [pc, #72]	@ (800030c <main+0x80>)
 80002c2:	607b      	str	r3, [r7, #4]
	GpioBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 80002c4:	2300      	movs	r3, #0
 80002c6:	723b      	strb	r3, [r7, #8]
	GpioBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_INPUT;
 80002c8:	2300      	movs	r3, #0
 80002ca:	727b      	strb	r3, [r7, #9]
	GpioBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OP_SPEED_FAST;
 80002cc:	2302      	movs	r3, #2
 80002ce:	72bb      	strb	r3, [r7, #10]
	GpioBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002d0:	2300      	movs	r3, #0
 80002d2:	72fb      	strb	r3, [r7, #11]

	GPIO_PClockControl(GPIOA, ENABLE);
 80002d4:	2101      	movs	r1, #1
 80002d6:	480d      	ldr	r0, [pc, #52]	@ (800030c <main+0x80>)
 80002d8:	f000 f844 	bl	8000364 <GPIO_PClockControl>
	GPIO_Init(&GpioBtn);
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	4618      	mov	r0, r3
 80002e0:	f000 f92a 	bl	8000538 <GPIO_Init>

	while (1) {
		if (GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0) == BTN_PRESSED) {
 80002e4:	2100      	movs	r1, #0
 80002e6:	4809      	ldr	r0, [pc, #36]	@ (800030c <main+0x80>)
 80002e8:	f000 fab8 	bl	800085c <GPIO_ReadFromInputPin>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b01      	cmp	r3, #1
 80002f0:	d105      	bne.n	80002fe <main+0x72>
			GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_NO_12);
 80002f2:	210c      	movs	r1, #12
 80002f4:	4804      	ldr	r0, [pc, #16]	@ (8000308 <main+0x7c>)
 80002f6:	f000 fac7 	bl	8000888 <GPIO_ToggleOutputPin>
			delay();
 80002fa:	f7ff ffb1 	bl	8000260 <delay>

		}
		whileLoopProfiler++;
 80002fe:	69fb      	ldr	r3, [r7, #28]
 8000300:	3301      	adds	r3, #1
 8000302:	61fb      	str	r3, [r7, #28]
		if (GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0) == BTN_PRESSED) {
 8000304:	e7ee      	b.n	80002e4 <main+0x58>
 8000306:	bf00      	nop
 8000308:	40020c00 	.word	0x40020c00
 800030c:	40020000 	.word	0x40020000

08000310 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000310:	480d      	ldr	r0, [pc, #52]	@ (8000348 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000312:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000314:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000318:	480c      	ldr	r0, [pc, #48]	@ (800034c <LoopForever+0x6>)
  ldr r1, =_edata
 800031a:	490d      	ldr	r1, [pc, #52]	@ (8000350 <LoopForever+0xa>)
  ldr r2, =_sidata
 800031c:	4a0d      	ldr	r2, [pc, #52]	@ (8000354 <LoopForever+0xe>)
  movs r3, #0
 800031e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000320:	e002      	b.n	8000328 <LoopCopyDataInit>

08000322 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000322:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000324:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000326:	3304      	adds	r3, #4

08000328 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000328:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800032a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800032c:	d3f9      	bcc.n	8000322 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800032e:	4a0a      	ldr	r2, [pc, #40]	@ (8000358 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000330:	4c0a      	ldr	r4, [pc, #40]	@ (800035c <LoopForever+0x16>)
  movs r3, #0
 8000332:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000334:	e001      	b.n	800033a <LoopFillZerobss>

08000336 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000336:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000338:	3204      	adds	r2, #4

0800033a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800033a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800033c:	d3fb      	bcc.n	8000336 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800033e:	f7ff ff67 	bl	8000210 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000342:	f7ff ffa3 	bl	800028c <main>

08000346 <LoopForever>:

LoopForever:
  b LoopForever
 8000346:	e7fe      	b.n	8000346 <LoopForever>
  ldr   r0, =_estack
 8000348:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800034c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000350:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000354:	080008d4 	.word	0x080008d4
  ldr r2, =_sbss
 8000358:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800035c:	2000001c 	.word	0x2000001c

08000360 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000360:	e7fe      	b.n	8000360 <ADC_IRQHandler>
	...

08000364 <GPIO_PClockControl>:
 *
 * @return				none
 *
 * @note				Peripheral clock should be enabled before using the GPIO port
 */
void GPIO_PClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi) {
 8000364:	b480      	push	{r7}
 8000366:	b083      	sub	sp, #12
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
 800036c:	460b      	mov	r3, r1
 800036e:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE) {
 8000370:	78fb      	ldrb	r3, [r7, #3]
 8000372:	2b01      	cmp	r3, #1
 8000374:	d161      	bne.n	800043a <GPIO_PClockControl+0xd6>
		if (pGPIOx == GPIOA) {
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	4a65      	ldr	r2, [pc, #404]	@ (8000510 <GPIO_PClockControl+0x1ac>)
 800037a:	4293      	cmp	r3, r2
 800037c:	d106      	bne.n	800038c <GPIO_PClockControl+0x28>
			GPIOA_PCLK_EN();
 800037e:	4b65      	ldr	r3, [pc, #404]	@ (8000514 <GPIO_PClockControl+0x1b0>)
 8000380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000382:	4a64      	ldr	r2, [pc, #400]	@ (8000514 <GPIO_PClockControl+0x1b0>)
 8000384:	f043 0301 	orr.w	r3, r3, #1
 8000388:	6313      	str	r3, [r2, #48]	@ 0x30
 800038a:	e056      	b.n	800043a <GPIO_PClockControl+0xd6>
		} else if (pGPIOx == GPIOB) {
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	4a62      	ldr	r2, [pc, #392]	@ (8000518 <GPIO_PClockControl+0x1b4>)
 8000390:	4293      	cmp	r3, r2
 8000392:	d106      	bne.n	80003a2 <GPIO_PClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000394:	4b5f      	ldr	r3, [pc, #380]	@ (8000514 <GPIO_PClockControl+0x1b0>)
 8000396:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000398:	4a5e      	ldr	r2, [pc, #376]	@ (8000514 <GPIO_PClockControl+0x1b0>)
 800039a:	f043 0302 	orr.w	r3, r3, #2
 800039e:	6313      	str	r3, [r2, #48]	@ 0x30
 80003a0:	e04b      	b.n	800043a <GPIO_PClockControl+0xd6>
		} else if (pGPIOx == GPIOC) {
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	4a5d      	ldr	r2, [pc, #372]	@ (800051c <GPIO_PClockControl+0x1b8>)
 80003a6:	4293      	cmp	r3, r2
 80003a8:	d106      	bne.n	80003b8 <GPIO_PClockControl+0x54>
			GPIOC_PCLK_EN();
 80003aa:	4b5a      	ldr	r3, [pc, #360]	@ (8000514 <GPIO_PClockControl+0x1b0>)
 80003ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003ae:	4a59      	ldr	r2, [pc, #356]	@ (8000514 <GPIO_PClockControl+0x1b0>)
 80003b0:	f043 0304 	orr.w	r3, r3, #4
 80003b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80003b6:	e040      	b.n	800043a <GPIO_PClockControl+0xd6>
		} else if (pGPIOx == GPIOD) {
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	4a59      	ldr	r2, [pc, #356]	@ (8000520 <GPIO_PClockControl+0x1bc>)
 80003bc:	4293      	cmp	r3, r2
 80003be:	d106      	bne.n	80003ce <GPIO_PClockControl+0x6a>
			GPIOD_PCLK_EN();
 80003c0:	4b54      	ldr	r3, [pc, #336]	@ (8000514 <GPIO_PClockControl+0x1b0>)
 80003c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003c4:	4a53      	ldr	r2, [pc, #332]	@ (8000514 <GPIO_PClockControl+0x1b0>)
 80003c6:	f043 0308 	orr.w	r3, r3, #8
 80003ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80003cc:	e035      	b.n	800043a <GPIO_PClockControl+0xd6>
		} else if (pGPIOx == GPIOE) {
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	4a54      	ldr	r2, [pc, #336]	@ (8000524 <GPIO_PClockControl+0x1c0>)
 80003d2:	4293      	cmp	r3, r2
 80003d4:	d106      	bne.n	80003e4 <GPIO_PClockControl+0x80>
			GPIOE_PCLK_EN();
 80003d6:	4b4f      	ldr	r3, [pc, #316]	@ (8000514 <GPIO_PClockControl+0x1b0>)
 80003d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003da:	4a4e      	ldr	r2, [pc, #312]	@ (8000514 <GPIO_PClockControl+0x1b0>)
 80003dc:	f043 0310 	orr.w	r3, r3, #16
 80003e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80003e2:	e02a      	b.n	800043a <GPIO_PClockControl+0xd6>
		} else if (pGPIOx == GPIOF) {
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	4a50      	ldr	r2, [pc, #320]	@ (8000528 <GPIO_PClockControl+0x1c4>)
 80003e8:	4293      	cmp	r3, r2
 80003ea:	d106      	bne.n	80003fa <GPIO_PClockControl+0x96>
			GPIOF_PCLK_EN();
 80003ec:	4b49      	ldr	r3, [pc, #292]	@ (8000514 <GPIO_PClockControl+0x1b0>)
 80003ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003f0:	4a48      	ldr	r2, [pc, #288]	@ (8000514 <GPIO_PClockControl+0x1b0>)
 80003f2:	f043 0320 	orr.w	r3, r3, #32
 80003f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80003f8:	e01f      	b.n	800043a <GPIO_PClockControl+0xd6>
		} else if (pGPIOx == GPIOG) {
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	4a4b      	ldr	r2, [pc, #300]	@ (800052c <GPIO_PClockControl+0x1c8>)
 80003fe:	4293      	cmp	r3, r2
 8000400:	d106      	bne.n	8000410 <GPIO_PClockControl+0xac>
			GPIOG_PCLK_EN();
 8000402:	4b44      	ldr	r3, [pc, #272]	@ (8000514 <GPIO_PClockControl+0x1b0>)
 8000404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000406:	4a43      	ldr	r2, [pc, #268]	@ (8000514 <GPIO_PClockControl+0x1b0>)
 8000408:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800040c:	6313      	str	r3, [r2, #48]	@ 0x30
 800040e:	e014      	b.n	800043a <GPIO_PClockControl+0xd6>
		} else if (pGPIOx == GPIOH) {
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	4a47      	ldr	r2, [pc, #284]	@ (8000530 <GPIO_PClockControl+0x1cc>)
 8000414:	4293      	cmp	r3, r2
 8000416:	d106      	bne.n	8000426 <GPIO_PClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000418:	4b3e      	ldr	r3, [pc, #248]	@ (8000514 <GPIO_PClockControl+0x1b0>)
 800041a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800041c:	4a3d      	ldr	r2, [pc, #244]	@ (8000514 <GPIO_PClockControl+0x1b0>)
 800041e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000422:	6313      	str	r3, [r2, #48]	@ 0x30
 8000424:	e009      	b.n	800043a <GPIO_PClockControl+0xd6>
		} else if (pGPIOx == GPIOI) {
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	4a42      	ldr	r2, [pc, #264]	@ (8000534 <GPIO_PClockControl+0x1d0>)
 800042a:	4293      	cmp	r3, r2
 800042c:	d105      	bne.n	800043a <GPIO_PClockControl+0xd6>
			GPIOI_PCLK_EN();
 800042e:	4b39      	ldr	r3, [pc, #228]	@ (8000514 <GPIO_PClockControl+0x1b0>)
 8000430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000432:	4a38      	ldr	r2, [pc, #224]	@ (8000514 <GPIO_PClockControl+0x1b0>)
 8000434:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000438:	6313      	str	r3, [r2, #48]	@ 0x30
		}
	}

	if (EnOrDi == DISABLE) {
 800043a:	78fb      	ldrb	r3, [r7, #3]
 800043c:	2b00      	cmp	r3, #0
 800043e:	d161      	bne.n	8000504 <GPIO_PClockControl+0x1a0>
		if (pGPIOx == GPIOA) {
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	4a33      	ldr	r2, [pc, #204]	@ (8000510 <GPIO_PClockControl+0x1ac>)
 8000444:	4293      	cmp	r3, r2
 8000446:	d106      	bne.n	8000456 <GPIO_PClockControl+0xf2>
			GPIOA_PCLK_DI();
 8000448:	4b32      	ldr	r3, [pc, #200]	@ (8000514 <GPIO_PClockControl+0x1b0>)
 800044a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800044c:	4a31      	ldr	r2, [pc, #196]	@ (8000514 <GPIO_PClockControl+0x1b0>)
 800044e:	f023 0301 	bic.w	r3, r3, #1
 8000452:	6313      	str	r3, [r2, #48]	@ 0x30
		} else if (pGPIOx == GPIOI) {
			GPIOI_PCLK_DI();
		}
	}

}
 8000454:	e056      	b.n	8000504 <GPIO_PClockControl+0x1a0>
		} else if (pGPIOx == GPIOB) {
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	4a2f      	ldr	r2, [pc, #188]	@ (8000518 <GPIO_PClockControl+0x1b4>)
 800045a:	4293      	cmp	r3, r2
 800045c:	d106      	bne.n	800046c <GPIO_PClockControl+0x108>
			GPIOB_PCLK_DI();
 800045e:	4b2d      	ldr	r3, [pc, #180]	@ (8000514 <GPIO_PClockControl+0x1b0>)
 8000460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000462:	4a2c      	ldr	r2, [pc, #176]	@ (8000514 <GPIO_PClockControl+0x1b0>)
 8000464:	f023 0302 	bic.w	r3, r3, #2
 8000468:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800046a:	e04b      	b.n	8000504 <GPIO_PClockControl+0x1a0>
		} else if (pGPIOx == GPIOC) {
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	4a2b      	ldr	r2, [pc, #172]	@ (800051c <GPIO_PClockControl+0x1b8>)
 8000470:	4293      	cmp	r3, r2
 8000472:	d106      	bne.n	8000482 <GPIO_PClockControl+0x11e>
			GPIOC_PCLK_DI();
 8000474:	4b27      	ldr	r3, [pc, #156]	@ (8000514 <GPIO_PClockControl+0x1b0>)
 8000476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000478:	4a26      	ldr	r2, [pc, #152]	@ (8000514 <GPIO_PClockControl+0x1b0>)
 800047a:	f023 0304 	bic.w	r3, r3, #4
 800047e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000480:	e040      	b.n	8000504 <GPIO_PClockControl+0x1a0>
		} else if (pGPIOx == GPIOD) {
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	4a26      	ldr	r2, [pc, #152]	@ (8000520 <GPIO_PClockControl+0x1bc>)
 8000486:	4293      	cmp	r3, r2
 8000488:	d106      	bne.n	8000498 <GPIO_PClockControl+0x134>
			GPIOD_PCLK_DI();
 800048a:	4b22      	ldr	r3, [pc, #136]	@ (8000514 <GPIO_PClockControl+0x1b0>)
 800048c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800048e:	4a21      	ldr	r2, [pc, #132]	@ (8000514 <GPIO_PClockControl+0x1b0>)
 8000490:	f023 0308 	bic.w	r3, r3, #8
 8000494:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000496:	e035      	b.n	8000504 <GPIO_PClockControl+0x1a0>
		} else if (pGPIOx == GPIOE) {
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	4a22      	ldr	r2, [pc, #136]	@ (8000524 <GPIO_PClockControl+0x1c0>)
 800049c:	4293      	cmp	r3, r2
 800049e:	d106      	bne.n	80004ae <GPIO_PClockControl+0x14a>
			GPIOE_PCLK_DI();
 80004a0:	4b1c      	ldr	r3, [pc, #112]	@ (8000514 <GPIO_PClockControl+0x1b0>)
 80004a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004a4:	4a1b      	ldr	r2, [pc, #108]	@ (8000514 <GPIO_PClockControl+0x1b0>)
 80004a6:	f023 0310 	bic.w	r3, r3, #16
 80004aa:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004ac:	e02a      	b.n	8000504 <GPIO_PClockControl+0x1a0>
		} else if (pGPIOx == GPIOF) {
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	4a1d      	ldr	r2, [pc, #116]	@ (8000528 <GPIO_PClockControl+0x1c4>)
 80004b2:	4293      	cmp	r3, r2
 80004b4:	d106      	bne.n	80004c4 <GPIO_PClockControl+0x160>
			GPIOF_PCLK_DI();
 80004b6:	4b17      	ldr	r3, [pc, #92]	@ (8000514 <GPIO_PClockControl+0x1b0>)
 80004b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004ba:	4a16      	ldr	r2, [pc, #88]	@ (8000514 <GPIO_PClockControl+0x1b0>)
 80004bc:	f023 0320 	bic.w	r3, r3, #32
 80004c0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004c2:	e01f      	b.n	8000504 <GPIO_PClockControl+0x1a0>
		} else if (pGPIOx == GPIOG) {
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	4a19      	ldr	r2, [pc, #100]	@ (800052c <GPIO_PClockControl+0x1c8>)
 80004c8:	4293      	cmp	r3, r2
 80004ca:	d106      	bne.n	80004da <GPIO_PClockControl+0x176>
			GPIOG_PCLK_DI();
 80004cc:	4b11      	ldr	r3, [pc, #68]	@ (8000514 <GPIO_PClockControl+0x1b0>)
 80004ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004d0:	4a10      	ldr	r2, [pc, #64]	@ (8000514 <GPIO_PClockControl+0x1b0>)
 80004d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80004d6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004d8:	e014      	b.n	8000504 <GPIO_PClockControl+0x1a0>
		} else if (pGPIOx == GPIOH) {
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	4a14      	ldr	r2, [pc, #80]	@ (8000530 <GPIO_PClockControl+0x1cc>)
 80004de:	4293      	cmp	r3, r2
 80004e0:	d106      	bne.n	80004f0 <GPIO_PClockControl+0x18c>
			GPIOH_PCLK_DI();
 80004e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000514 <GPIO_PClockControl+0x1b0>)
 80004e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004e6:	4a0b      	ldr	r2, [pc, #44]	@ (8000514 <GPIO_PClockControl+0x1b0>)
 80004e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80004ec:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004ee:	e009      	b.n	8000504 <GPIO_PClockControl+0x1a0>
		} else if (pGPIOx == GPIOI) {
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	4a10      	ldr	r2, [pc, #64]	@ (8000534 <GPIO_PClockControl+0x1d0>)
 80004f4:	4293      	cmp	r3, r2
 80004f6:	d105      	bne.n	8000504 <GPIO_PClockControl+0x1a0>
			GPIOI_PCLK_DI();
 80004f8:	4b06      	ldr	r3, [pc, #24]	@ (8000514 <GPIO_PClockControl+0x1b0>)
 80004fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004fc:	4a05      	ldr	r2, [pc, #20]	@ (8000514 <GPIO_PClockControl+0x1b0>)
 80004fe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000502:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000504:	bf00      	nop
 8000506:	370c      	adds	r7, #12
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr
 8000510:	40020000 	.word	0x40020000
 8000514:	40023800 	.word	0x40023800
 8000518:	40020400 	.word	0x40020400
 800051c:	40020800 	.word	0x40020800
 8000520:	40020c00 	.word	0x40020c00
 8000524:	40021000 	.word	0x40021000
 8000528:	40021400 	.word	0x40021400
 800052c:	40021800 	.word	0x40021800
 8000530:	40021c00 	.word	0x40021c00
 8000534:	40022000 	.word	0x40022000

08000538 <GPIO_Init>:
 *
 * @return					none
 *
 * @note					This function should be called before using the GPIO pin
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 8000538:	b480      	push	{r7}
 800053a:	b087      	sub	sp, #28
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
	uint32_t tempRegister;

	// 1. configure the mode of the pin
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) {
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	795b      	ldrb	r3, [r3, #5]
 8000544:	2b03      	cmp	r3, #3
 8000546:	d81f      	bhi.n	8000588 <GPIO_Init+0x50>
		// non interrupt mode
		// For example, if you're configuring pin 5, the mode bits would be shifted left by 10 positions (2 * 5),
		// placing them in bits 10 and 11 of the register.
		tempRegister = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	795b      	ldrb	r3, [r3, #5]
 800054c:	461a      	mov	r2, r3
				<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	791b      	ldrb	r3, [r3, #4]
 8000552:	005b      	lsls	r3, r3, #1
 8000554:	fa02 f303 	lsl.w	r3, r2, r3
		tempRegister = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 8000558:	613b      	str	r3, [r7, #16]
		// clear
		pGPIOHandle->pGPIOx->MODER &= ~(0x3
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	681a      	ldr	r2, [r3, #0]
				<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);   // 0x3 == 11
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	791b      	ldrb	r3, [r3, #4]
 8000564:	4619      	mov	r1, r3
 8000566:	2303      	movs	r3, #3
 8000568:	408b      	lsls	r3, r1
		pGPIOHandle->pGPIOx->MODER &= ~(0x3
 800056a:	43db      	mvns	r3, r3
 800056c:	4619      	mov	r1, r3
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	400a      	ands	r2, r1
 8000574:	601a      	str	r2, [r3, #0]
		// store
		pGPIOHandle->pGPIOx->MODER |= tempRegister;
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	6819      	ldr	r1, [r3, #0]
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	693a      	ldr	r2, [r7, #16]
 8000582:	430a      	orrs	r2, r1
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	e0c4      	b.n	8000712 <GPIO_Init+0x1da>

	} else {
		// interrupt mode
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT) {
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	795b      	ldrb	r3, [r3, #5]
 800058c:	2b04      	cmp	r3, #4
 800058e:	d117      	bne.n	80005c0 <GPIO_Init+0x88>
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000590:	4b4a      	ldr	r3, [pc, #296]	@ (80006bc <GPIO_Init+0x184>)
 8000592:	68db      	ldr	r3, [r3, #12]
 8000594:	687a      	ldr	r2, [r7, #4]
 8000596:	7912      	ldrb	r2, [r2, #4]
 8000598:	4611      	mov	r1, r2
 800059a:	2201      	movs	r2, #1
 800059c:	408a      	lsls	r2, r1
 800059e:	4611      	mov	r1, r2
 80005a0:	4a46      	ldr	r2, [pc, #280]	@ (80006bc <GPIO_Init+0x184>)
 80005a2:	430b      	orrs	r3, r1
 80005a4:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);   // clear RTSR
 80005a6:	4b45      	ldr	r3, [pc, #276]	@ (80006bc <GPIO_Init+0x184>)
 80005a8:	689b      	ldr	r3, [r3, #8]
 80005aa:	687a      	ldr	r2, [r7, #4]
 80005ac:	7912      	ldrb	r2, [r2, #4]
 80005ae:	4611      	mov	r1, r2
 80005b0:	2201      	movs	r2, #1
 80005b2:	408a      	lsls	r2, r1
 80005b4:	43d2      	mvns	r2, r2
 80005b6:	4611      	mov	r1, r2
 80005b8:	4a40      	ldr	r2, [pc, #256]	@ (80006bc <GPIO_Init+0x184>)
 80005ba:	400b      	ands	r3, r1
 80005bc:	6093      	str	r3, [r2, #8]
 80005be:	e035      	b.n	800062c <GPIO_Init+0xf4>

		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT) {
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	795b      	ldrb	r3, [r3, #5]
 80005c4:	2b05      	cmp	r3, #5
 80005c6:	d117      	bne.n	80005f8 <GPIO_Init+0xc0>
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005c8:	4b3c      	ldr	r3, [pc, #240]	@ (80006bc <GPIO_Init+0x184>)
 80005ca:	689b      	ldr	r3, [r3, #8]
 80005cc:	687a      	ldr	r2, [r7, #4]
 80005ce:	7912      	ldrb	r2, [r2, #4]
 80005d0:	4611      	mov	r1, r2
 80005d2:	2201      	movs	r2, #1
 80005d4:	408a      	lsls	r2, r1
 80005d6:	4611      	mov	r1, r2
 80005d8:	4a38      	ldr	r2, [pc, #224]	@ (80006bc <GPIO_Init+0x184>)
 80005da:	430b      	orrs	r3, r1
 80005dc:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);   // clear FTSR
 80005de:	4b37      	ldr	r3, [pc, #220]	@ (80006bc <GPIO_Init+0x184>)
 80005e0:	68db      	ldr	r3, [r3, #12]
 80005e2:	687a      	ldr	r2, [r7, #4]
 80005e4:	7912      	ldrb	r2, [r2, #4]
 80005e6:	4611      	mov	r1, r2
 80005e8:	2201      	movs	r2, #1
 80005ea:	408a      	lsls	r2, r1
 80005ec:	43d2      	mvns	r2, r2
 80005ee:	4611      	mov	r1, r2
 80005f0:	4a32      	ldr	r2, [pc, #200]	@ (80006bc <GPIO_Init+0x184>)
 80005f2:	400b      	ands	r3, r1
 80005f4:	60d3      	str	r3, [r2, #12]
 80005f6:	e019      	b.n	800062c <GPIO_Init+0xf4>

		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT) {
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	795b      	ldrb	r3, [r3, #5]
 80005fc:	2b06      	cmp	r3, #6
 80005fe:	d115      	bne.n	800062c <GPIO_Init+0xf4>
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000600:	4b2e      	ldr	r3, [pc, #184]	@ (80006bc <GPIO_Init+0x184>)
 8000602:	689b      	ldr	r3, [r3, #8]
 8000604:	687a      	ldr	r2, [r7, #4]
 8000606:	7912      	ldrb	r2, [r2, #4]
 8000608:	4611      	mov	r1, r2
 800060a:	2201      	movs	r2, #1
 800060c:	408a      	lsls	r2, r1
 800060e:	4611      	mov	r1, r2
 8000610:	4a2a      	ldr	r2, [pc, #168]	@ (80006bc <GPIO_Init+0x184>)
 8000612:	430b      	orrs	r3, r1
 8000614:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000616:	4b29      	ldr	r3, [pc, #164]	@ (80006bc <GPIO_Init+0x184>)
 8000618:	68db      	ldr	r3, [r3, #12]
 800061a:	687a      	ldr	r2, [r7, #4]
 800061c:	7912      	ldrb	r2, [r2, #4]
 800061e:	4611      	mov	r1, r2
 8000620:	2201      	movs	r2, #1
 8000622:	408a      	lsls	r2, r1
 8000624:	4611      	mov	r1, r2
 8000626:	4a25      	ldr	r2, [pc, #148]	@ (80006bc <GPIO_Init+0x184>)
 8000628:	430b      	orrs	r3, r1
 800062a:	60d3      	str	r3, [r2, #12]

		}

		// 2.configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t extiRegisterSet = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;   // we choose the index for the array with this, so SYSCFG.EXTICR[0] == EXTICR1
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	791b      	ldrb	r3, [r3, #4]
 8000630:	089b      	lsrs	r3, r3, #2
 8000632:	75fb      	strb	r3, [r7, #23]
		uint8_t extiBitPosition = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;   // this tells us about the position within each register
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	791b      	ldrb	r3, [r3, #4]
 8000638:	f003 0303 	and.w	r3, r3, #3
 800063c:	75bb      	strb	r3, [r7, #22]

		uint8_t portCode = GPIO_BASE_ADDR_TO_EXTI_CODE(pGPIOHandle->pGPIOx);
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4a1f      	ldr	r2, [pc, #124]	@ (80006c0 <GPIO_Init+0x188>)
 8000644:	4293      	cmp	r3, r2
 8000646:	d04d      	beq.n	80006e4 <GPIO_Init+0x1ac>
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a1d      	ldr	r2, [pc, #116]	@ (80006c4 <GPIO_Init+0x18c>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d032      	beq.n	80006b8 <GPIO_Init+0x180>
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4a1c      	ldr	r2, [pc, #112]	@ (80006c8 <GPIO_Init+0x190>)
 8000658:	4293      	cmp	r3, r2
 800065a:	d02b      	beq.n	80006b4 <GPIO_Init+0x17c>
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a1a      	ldr	r2, [pc, #104]	@ (80006cc <GPIO_Init+0x194>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d024      	beq.n	80006b0 <GPIO_Init+0x178>
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a19      	ldr	r2, [pc, #100]	@ (80006d0 <GPIO_Init+0x198>)
 800066c:	4293      	cmp	r3, r2
 800066e:	d01d      	beq.n	80006ac <GPIO_Init+0x174>
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a17      	ldr	r2, [pc, #92]	@ (80006d4 <GPIO_Init+0x19c>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d016      	beq.n	80006a8 <GPIO_Init+0x170>
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4a16      	ldr	r2, [pc, #88]	@ (80006d8 <GPIO_Init+0x1a0>)
 8000680:	4293      	cmp	r3, r2
 8000682:	d00f      	beq.n	80006a4 <GPIO_Init+0x16c>
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a14      	ldr	r2, [pc, #80]	@ (80006dc <GPIO_Init+0x1a4>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d008      	beq.n	80006a0 <GPIO_Init+0x168>
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4a13      	ldr	r2, [pc, #76]	@ (80006e0 <GPIO_Init+0x1a8>)
 8000694:	4293      	cmp	r3, r2
 8000696:	d101      	bne.n	800069c <GPIO_Init+0x164>
 8000698:	2308      	movs	r3, #8
 800069a:	e024      	b.n	80006e6 <GPIO_Init+0x1ae>
 800069c:	23ff      	movs	r3, #255	@ 0xff
 800069e:	e022      	b.n	80006e6 <GPIO_Init+0x1ae>
 80006a0:	2307      	movs	r3, #7
 80006a2:	e020      	b.n	80006e6 <GPIO_Init+0x1ae>
 80006a4:	2306      	movs	r3, #6
 80006a6:	e01e      	b.n	80006e6 <GPIO_Init+0x1ae>
 80006a8:	2305      	movs	r3, #5
 80006aa:	e01c      	b.n	80006e6 <GPIO_Init+0x1ae>
 80006ac:	2304      	movs	r3, #4
 80006ae:	e01a      	b.n	80006e6 <GPIO_Init+0x1ae>
 80006b0:	2303      	movs	r3, #3
 80006b2:	e018      	b.n	80006e6 <GPIO_Init+0x1ae>
 80006b4:	2302      	movs	r3, #2
 80006b6:	e016      	b.n	80006e6 <GPIO_Init+0x1ae>
 80006b8:	2301      	movs	r3, #1
 80006ba:	e014      	b.n	80006e6 <GPIO_Init+0x1ae>
 80006bc:	40013c00 	.word	0x40013c00
 80006c0:	40020000 	.word	0x40020000
 80006c4:	40020400 	.word	0x40020400
 80006c8:	40020800 	.word	0x40020800
 80006cc:	40020c00 	.word	0x40020c00
 80006d0:	40021000 	.word	0x40021000
 80006d4:	40021400 	.word	0x40021400
 80006d8:	40021800 	.word	0x40021800
 80006dc:	40021c00 	.word	0x40021c00
 80006e0:	40022000 	.word	0x40022000
 80006e4:	2300      	movs	r3, #0
 80006e6:	757b      	strb	r3, [r7, #21]
		SYSCFG->EXTICR[extiRegisterSet] = portCode << (extiBitPosition * 4);
 80006e8:	7d7a      	ldrb	r2, [r7, #21]
 80006ea:	7dbb      	ldrb	r3, [r7, #22]
 80006ec:	009b      	lsls	r3, r3, #2
 80006ee:	fa02 f103 	lsl.w	r1, r2, r3
 80006f2:	4a58      	ldr	r2, [pc, #352]	@ (8000854 <GPIO_Init+0x31c>)
 80006f4:	7dfb      	ldrb	r3, [r7, #23]
 80006f6:	3302      	adds	r3, #2
 80006f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		// 3.enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006fc:	4b56      	ldr	r3, [pc, #344]	@ (8000858 <GPIO_Init+0x320>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	687a      	ldr	r2, [r7, #4]
 8000702:	7912      	ldrb	r2, [r2, #4]
 8000704:	4611      	mov	r1, r2
 8000706:	2201      	movs	r2, #1
 8000708:	408a      	lsls	r2, r1
 800070a:	4611      	mov	r1, r2
 800070c:	4a52      	ldr	r2, [pc, #328]	@ (8000858 <GPIO_Init+0x320>)
 800070e:	430b      	orrs	r3, r1
 8000710:	6013      	str	r3, [r2, #0]
	}

	// reset temporary register
	tempRegister = 0;
 8000712:	2300      	movs	r3, #0
 8000714:	613b      	str	r3, [r7, #16]
	// 2. configure the speed
	tempRegister = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	799b      	ldrb	r3, [r3, #6]
 800071a:	461a      	mov	r2, r3
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	791b      	ldrb	r3, [r3, #4]
 8000720:	005b      	lsls	r3, r3, #1
 8000722:	fa02 f303 	lsl.w	r3, r2, r3
	tempRegister = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed
 8000726:	613b      	str	r3, [r7, #16]
	// clear
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	689a      	ldr	r2, [r3, #8]
			<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);   // 0x3 == 0b11
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	791b      	ldrb	r3, [r3, #4]
 8000732:	4619      	mov	r1, r3
 8000734:	2303      	movs	r3, #3
 8000736:	408b      	lsls	r3, r1
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3
 8000738:	43db      	mvns	r3, r3
 800073a:	4619      	mov	r1, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	400a      	ands	r2, r1
 8000742:	609a      	str	r2, [r3, #8]
	// store
	pGPIOHandle->pGPIOx->OSPEEDR |= tempRegister;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	6899      	ldr	r1, [r3, #8]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	693a      	ldr	r2, [r7, #16]
 8000750:	430a      	orrs	r2, r1
 8000752:	609a      	str	r2, [r3, #8]

	// reset temporary register
	tempRegister = 0;
 8000754:	2300      	movs	r3, #0
 8000756:	613b      	str	r3, [r7, #16]
	// 3. configure the pull up pull down
	tempRegister = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	79db      	ldrb	r3, [r3, #7]
 800075c:	461a      	mov	r2, r3
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	791b      	ldrb	r3, [r3, #4]
 8000762:	005b      	lsls	r3, r3, #1
 8000764:	fa02 f303 	lsl.w	r3, r2, r3
	tempRegister = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl
 8000768:	613b      	str	r3, [r7, #16]
	// clear
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	68da      	ldr	r2, [r3, #12]
			<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);   // 0x3 == 0b11
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	791b      	ldrb	r3, [r3, #4]
 8000774:	4619      	mov	r1, r3
 8000776:	2303      	movs	r3, #3
 8000778:	408b      	lsls	r3, r1
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3
 800077a:	43db      	mvns	r3, r3
 800077c:	4619      	mov	r1, r3
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	400a      	ands	r2, r1
 8000784:	60da      	str	r2, [r3, #12]
	// store
	pGPIOHandle->pGPIOx->PUPDR |= tempRegister;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	68d9      	ldr	r1, [r3, #12]
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	693a      	ldr	r2, [r7, #16]
 8000792:	430a      	orrs	r2, r1
 8000794:	60da      	str	r2, [r3, #12]

	// reset temporary register
	tempRegister = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	613b      	str	r3, [r7, #16]
	// 4. configure the output type
	tempRegister = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOpType
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	7a1b      	ldrb	r3, [r3, #8]
 800079e:	461a      	mov	r2, r3
			<< (1 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // no 2 bits here only 16bits is used
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	791b      	ldrb	r3, [r3, #4]
 80007a4:	fa02 f303 	lsl.w	r3, r2, r3
	tempRegister = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOpType
 80007a8:	613b      	str	r3, [r7, #16]
	// clear
	pGPIOHandle->pGPIOx->OTYPER &= ~(1
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	685a      	ldr	r2, [r3, #4]
			<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	791b      	ldrb	r3, [r3, #4]
 80007b4:	4619      	mov	r1, r3
 80007b6:	2301      	movs	r3, #1
 80007b8:	408b      	lsls	r3, r1
	pGPIOHandle->pGPIOx->OTYPER &= ~(1
 80007ba:	43db      	mvns	r3, r3
 80007bc:	4619      	mov	r1, r3
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	400a      	ands	r2, r1
 80007c4:	605a      	str	r2, [r3, #4]
	// store
	pGPIOHandle->pGPIOx->OTYPER |= tempRegister;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	6859      	ldr	r1, [r3, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	693a      	ldr	r2, [r7, #16]
 80007d2:	430a      	orrs	r2, r1
 80007d4:	605a      	str	r2, [r3, #4]

	// reset temporary register
	tempRegister = 0;
 80007d6:	2300      	movs	r3, #0
 80007d8:	613b      	str	r3, [r7, #16]
	// 5. configure the alternate functionality
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALT_FN) {
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	795b      	ldrb	r3, [r3, #5]
 80007de:	2b02      	cmp	r3, #2
 80007e0:	d131      	bne.n	8000846 <GPIO_Init+0x30e>
		uint8_t lowOrHigh = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8; // if this is 0, then low, - this decides if it is AFR low or AFR high register
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	791b      	ldrb	r3, [r3, #4]
 80007e6:	08db      	lsrs	r3, r3, #3
 80007e8:	73fb      	strb	r3, [r7, #15]
		uint8_t bitPosition = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8; // this decides where the pin registers fall within low or high register
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	791b      	ldrb	r3, [r3, #4]
 80007ee:	f003 0307 	and.w	r3, r3, #7
 80007f2:	73bb      	strb	r3, [r7, #14]

		// clear
		pGPIOHandle->pGPIOx->AFR[lowOrHigh] &= ~(0xF << (4 * bitPosition)); // 0xF == 0b1111
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	7bfa      	ldrb	r2, [r7, #15]
 80007fa:	3208      	adds	r2, #8
 80007fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000800:	7bbb      	ldrb	r3, [r7, #14]
 8000802:	009b      	lsls	r3, r3, #2
 8000804:	220f      	movs	r2, #15
 8000806:	fa02 f303 	lsl.w	r3, r2, r3
 800080a:	43db      	mvns	r3, r3
 800080c:	4618      	mov	r0, r3
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	7bfa      	ldrb	r2, [r7, #15]
 8000814:	4001      	ands	r1, r0
 8000816:	3208      	adds	r2, #8
 8000818:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		// store
		pGPIOHandle->pGPIOx->AFR[lowOrHigh] |=
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	7bfa      	ldrb	r2, [r7, #15]
 8000822:	3208      	adds	r2, #8
 8000824:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
				(pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	7a5b      	ldrb	r3, [r3, #9]
 800082c:	461a      	mov	r2, r3
						<< (4 * bitPosition));
 800082e:	7bbb      	ldrb	r3, [r7, #14]
 8000830:	009b      	lsls	r3, r3, #2
 8000832:	fa02 f303 	lsl.w	r3, r2, r3
 8000836:	4618      	mov	r0, r3
		pGPIOHandle->pGPIOx->AFR[lowOrHigh] |=
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	7bfa      	ldrb	r2, [r7, #15]
 800083e:	4301      	orrs	r1, r0
 8000840:	3208      	adds	r2, #8
 8000842:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}

}
 8000846:	bf00      	nop
 8000848:	371c      	adds	r7, #28
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	40013800 	.word	0x40013800
 8000858:	40013c00 	.word	0x40013c00

0800085c <GPIO_ReadFromInputPin>:
 *
 * @return				The current state of the input pin (0 or 1)
 *
 * @note				Ensure that the specified pin is configured as an input before calling this function
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber) {
 800085c:	b480      	push	{r7}
 800085e:	b085      	sub	sp, #20
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	460b      	mov	r3, r1
 8000866:	70fb      	strb	r3, [r7, #3]
	uint8_t readValue;

	readValue = (uint8_t) ((pGPIOx->IDR >> PinNumber) & 0x00000001); // first shift the register to the 0th position, then do an AND and read the last bit
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	691a      	ldr	r2, [r3, #16]
 800086c:	78fb      	ldrb	r3, [r7, #3]
 800086e:	fa22 f303 	lsr.w	r3, r2, r3
 8000872:	b2db      	uxtb	r3, r3
 8000874:	f003 0301 	and.w	r3, r3, #1
 8000878:	73fb      	strb	r3, [r7, #15]
	return readValue;
 800087a:	7bfb      	ldrb	r3, [r7, #15]
}
 800087c:	4618      	mov	r0, r3
 800087e:	3714      	adds	r7, #20
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr

08000888 <GPIO_ToggleOutputPin>:
 *
 * @return				none
 *
 * @note				This function changes the state of the pin from high to low or low to high
 */
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber) {
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
 8000890:	460b      	mov	r3, r1
 8000892:	70fb      	strb	r3, [r7, #3]
	//	For example, if PinNumber is 5 and the current state of ODR is 0b11110000,
	//	after this operation, the new state would be 0b11110000 ^ 0b00100000 = 0b11010000.

	pGPIOx->ODR ^= (1 << PinNumber);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	695b      	ldr	r3, [r3, #20]
 8000898:	78fa      	ldrb	r2, [r7, #3]
 800089a:	2101      	movs	r1, #1
 800089c:	fa01 f202 	lsl.w	r2, r1, r2
 80008a0:	405a      	eors	r2, r3
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	615a      	str	r2, [r3, #20]
}
 80008a6:	bf00      	nop
 80008a8:	370c      	adds	r7, #12
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
	...

080008b4 <_init>:
 80008b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008b6:	bf00      	nop
 80008b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008ba:	bc08      	pop	{r3}
 80008bc:	469e      	mov	lr, r3
 80008be:	4770      	bx	lr

080008c0 <_fini>:
 80008c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c2:	bf00      	nop
 80008c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008c6:	bc08      	pop	{r3}
 80008c8:	469e      	mov	lr, r3
 80008ca:	4770      	bx	lr
