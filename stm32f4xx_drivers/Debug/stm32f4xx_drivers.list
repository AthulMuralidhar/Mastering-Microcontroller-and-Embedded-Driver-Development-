
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000978  080001c0  080001c0  000011c0  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000b38  08000b38  00001b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000b48  08000b48  00001b58  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08000b48  08000b48  00001b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000b50  08000b58  00001b58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b50  08000b50  00001b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000b54  08000b54  00001b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001b58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001b58  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001b58  2**0
                  CONTENTS, READONLY
 13 .comment      00000026  00000000  00000000  00001b88  2**0
                  CONTENTS, READONLY
 14 .debug_info   000015bd  00000000  00000000  00001bae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000061f  00000000  00000000  0000316b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000001c0  00000000  00000000  00003790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000118  00000000  00000000  00003950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00002307  00000000  00000000  00003a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000011cc  00000000  00000000  00005d6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000096f7  00000000  00000000  00006f3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000005a0  00000000  00000000  00010634  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000124  00000000  00000000  00010bd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loclists 00000065  00000000  00000000  00010cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <deregister_tm_clones>:
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <deregister_tm_clones+0x10>)
 80001c2:	4b04      	ldr	r3, [pc, #16]	@ (80001d4 <deregister_tm_clones+0x14>)
 80001c4:	4283      	cmp	r3, r0
 80001c6:	d002      	beq.n	80001ce <deregister_tm_clones+0xe>
 80001c8:	4b03      	ldr	r3, [pc, #12]	@ (80001d8 <deregister_tm_clones+0x18>)
 80001ca:	b103      	cbz	r3, 80001ce <deregister_tm_clones+0xe>
 80001cc:	4718      	bx	r3
 80001ce:	4770      	bx	lr
 80001d0:	20000000 	.word	0x20000000
 80001d4:	20000000 	.word	0x20000000
 80001d8:	00000000 	.word	0x00000000

080001dc <register_tm_clones>:
 80001dc:	4805      	ldr	r0, [pc, #20]	@ (80001f4 <register_tm_clones+0x18>)
 80001de:	4b06      	ldr	r3, [pc, #24]	@ (80001f8 <register_tm_clones+0x1c>)
 80001e0:	1a1b      	subs	r3, r3, r0
 80001e2:	0fd9      	lsrs	r1, r3, #31
 80001e4:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 80001e8:	1049      	asrs	r1, r1, #1
 80001ea:	d002      	beq.n	80001f2 <register_tm_clones+0x16>
 80001ec:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <register_tm_clones+0x20>)
 80001ee:	b103      	cbz	r3, 80001f2 <register_tm_clones+0x16>
 80001f0:	4718      	bx	r3
 80001f2:	4770      	bx	lr
 80001f4:	20000000 	.word	0x20000000
 80001f8:	20000000 	.word	0x20000000
 80001fc:	00000000 	.word	0x00000000

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c06      	ldr	r4, [pc, #24]	@ (800021c <__do_global_dtors_aux+0x1c>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b943      	cbnz	r3, 800021a <__do_global_dtors_aux+0x1a>
 8000208:	f7ff ffda 	bl	80001c0 <deregister_tm_clones>
 800020c:	4b04      	ldr	r3, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	b113      	cbz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000210:	4804      	ldr	r0, [pc, #16]	@ (8000224 <__do_global_dtors_aux+0x24>)
 8000212:	f3af 8000 	nop.w
 8000216:	2301      	movs	r3, #1
 8000218:	7023      	strb	r3, [r4, #0]
 800021a:	bd10      	pop	{r4, pc}
 800021c:	20000000 	.word	0x20000000
 8000220:	00000000 	.word	0x00000000
 8000224:	08000b20 	.word	0x08000b20

08000228 <frame_dummy>:
 8000228:	b508      	push	{r3, lr}
 800022a:	4b04      	ldr	r3, [pc, #16]	@ (800023c <frame_dummy+0x14>)
 800022c:	b11b      	cbz	r3, 8000236 <frame_dummy+0xe>
 800022e:	4904      	ldr	r1, [pc, #16]	@ (8000240 <frame_dummy+0x18>)
 8000230:	4804      	ldr	r0, [pc, #16]	@ (8000244 <frame_dummy+0x1c>)
 8000232:	f3af 8000 	nop.w
 8000236:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800023a:	e7cf      	b.n	80001dc <register_tm_clones>
 800023c:	00000000 	.word	0x00000000
 8000240:	20000004 	.word	0x20000004
 8000244:	08000b20 	.word	0x08000b20

08000248 <__libc_init_array>:
 8000248:	b570      	push	{r4, r5, r6, lr}
 800024a:	4b0f      	ldr	r3, [pc, #60]	@ (8000288 <__libc_init_array+0x40>)
 800024c:	4d0f      	ldr	r5, [pc, #60]	@ (800028c <__libc_init_array+0x44>)
 800024e:	42ab      	cmp	r3, r5
 8000250:	eba3 0605 	sub.w	r6, r3, r5
 8000254:	d007      	beq.n	8000266 <__libc_init_array+0x1e>
 8000256:	10b6      	asrs	r6, r6, #2
 8000258:	2400      	movs	r4, #0
 800025a:	f855 3b04 	ldr.w	r3, [r5], #4
 800025e:	3401      	adds	r4, #1
 8000260:	4798      	blx	r3
 8000262:	42a6      	cmp	r6, r4
 8000264:	d8f9      	bhi.n	800025a <__libc_init_array+0x12>
 8000266:	f000 fc5b 	bl	8000b20 <_init>
 800026a:	4d09      	ldr	r5, [pc, #36]	@ (8000290 <__libc_init_array+0x48>)
 800026c:	4b09      	ldr	r3, [pc, #36]	@ (8000294 <__libc_init_array+0x4c>)
 800026e:	1b5e      	subs	r6, r3, r5
 8000270:	42ab      	cmp	r3, r5
 8000272:	ea4f 06a6 	mov.w	r6, r6, asr #2
 8000276:	d006      	beq.n	8000286 <__libc_init_array+0x3e>
 8000278:	2400      	movs	r4, #0
 800027a:	f855 3b04 	ldr.w	r3, [r5], #4
 800027e:	3401      	adds	r4, #1
 8000280:	4798      	blx	r3
 8000282:	42a6      	cmp	r6, r4
 8000284:	d8f9      	bhi.n	800027a <__libc_init_array+0x32>
 8000286:	bd70      	pop	{r4, r5, r6, pc}
 8000288:	08000b50 	.word	0x08000b50
 800028c:	08000b50 	.word	0x08000b50
 8000290:	08000b50 	.word	0x08000b50
 8000294:	08000b54 	.word	0x08000b54
	...

080002c0 <strlen>:
 80002c0:	b430      	push	{r4, r5}
 80002c2:	f890 f000 	pld	[r0]
 80002c6:	f020 0107 	bic.w	r1, r0, #7
 80002ca:	f06f 0c00 	mvn.w	ip, #0
 80002ce:	f010 0407 	ands.w	r4, r0, #7
 80002d2:	f891 f020 	pld	[r1, #32]
 80002d6:	f040 8048 	bne.w	800036a <strlen+0xaa>
 80002da:	f04f 0400 	mov.w	r4, #0
 80002de:	f06f 0007 	mvn.w	r0, #7
 80002e2:	e9d1 2300 	ldrd	r2, r3, [r1]
 80002e6:	f891 f040 	pld	[r1, #64]	@ 0x40
 80002ea:	f100 0008 	add.w	r0, r0, #8
 80002ee:	fa82 f24c 	uadd8	r2, r2, ip
 80002f2:	faa4 f28c 	sel	r2, r4, ip
 80002f6:	fa83 f34c 	uadd8	r3, r3, ip
 80002fa:	faa2 f38c 	sel	r3, r2, ip
 80002fe:	bb4b      	cbnz	r3, 8000354 <strlen+0x94>
 8000300:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8000304:	fa82 f24c 	uadd8	r2, r2, ip
 8000308:	f100 0008 	add.w	r0, r0, #8
 800030c:	faa4 f28c 	sel	r2, r4, ip
 8000310:	fa83 f34c 	uadd8	r3, r3, ip
 8000314:	faa2 f38c 	sel	r3, r2, ip
 8000318:	b9e3      	cbnz	r3, 8000354 <strlen+0x94>
 800031a:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 800031e:	fa82 f24c 	uadd8	r2, r2, ip
 8000322:	f100 0008 	add.w	r0, r0, #8
 8000326:	faa4 f28c 	sel	r2, r4, ip
 800032a:	fa83 f34c 	uadd8	r3, r3, ip
 800032e:	faa2 f38c 	sel	r3, r2, ip
 8000332:	b97b      	cbnz	r3, 8000354 <strlen+0x94>
 8000334:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 8000338:	f101 0120 	add.w	r1, r1, #32
 800033c:	fa82 f24c 	uadd8	r2, r2, ip
 8000340:	f100 0008 	add.w	r0, r0, #8
 8000344:	faa4 f28c 	sel	r2, r4, ip
 8000348:	fa83 f34c 	uadd8	r3, r3, ip
 800034c:	faa2 f38c 	sel	r3, r2, ip
 8000350:	2b00      	cmp	r3, #0
 8000352:	d0c6      	beq.n	80002e2 <strlen+0x22>
 8000354:	2a00      	cmp	r2, #0
 8000356:	bf04      	itt	eq
 8000358:	3004      	addeq	r0, #4
 800035a:	461a      	moveq	r2, r3
 800035c:	ba12      	rev	r2, r2
 800035e:	fab2 f282 	clz	r2, r2
 8000362:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 8000366:	bc30      	pop	{r4, r5}
 8000368:	4770      	bx	lr
 800036a:	e9d1 2300 	ldrd	r2, r3, [r1]
 800036e:	f004 0503 	and.w	r5, r4, #3
 8000372:	f1c4 0000 	rsb	r0, r4, #0
 8000376:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 800037a:	f014 0f04 	tst.w	r4, #4
 800037e:	f891 f040 	pld	[r1, #64]	@ 0x40
 8000382:	fa0c f505 	lsl.w	r5, ip, r5
 8000386:	ea62 0205 	orn	r2, r2, r5
 800038a:	bf1c      	itt	ne
 800038c:	ea63 0305 	ornne	r3, r3, r5
 8000390:	4662      	movne	r2, ip
 8000392:	f04f 0400 	mov.w	r4, #0
 8000396:	e7aa      	b.n	80002ee <strlen+0x2e>

08000398 <SPI2_GPIOInits>:
 * PB15 -> MOSI
 * PB13 -> SCLK
 *
 * */

void SPI2_GPIOInits(void) {
 8000398:	b580      	push	{r7, lr}
 800039a:	b084      	sub	sp, #16
 800039c:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 800039e:	4b0e      	ldr	r3, [pc, #56]	@ (80003d8 <SPI2_GPIOInits+0x40>)
 80003a0:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALT_FN;
 80003a2:	2302      	movs	r3, #2
 80003a4:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 80003a6:	2305      	movs	r3, #5
 80003a8:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOpType = GPIO_OP_TYPE_PP;
 80003aa:	2300      	movs	r3, #0
 80003ac:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80003ae:	2302      	movs	r3, #2
 80003b0:	72bb      	strb	r3, [r7, #10]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80003b2:	2300      	movs	r3, #0
 80003b4:	72fb      	strb	r3, [r7, #11]

	// SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 80003b6:	230d      	movs	r3, #13
 80003b8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80003ba:	1d3b      	adds	r3, r7, #4
 80003bc:	4618      	mov	r0, r3
 80003be:	f000 f903 	bl	80005c8 <GPIO_Init>

	// MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 80003c2:	230f      	movs	r3, #15
 80003c4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80003c6:	1d3b      	adds	r3, r7, #4
 80003c8:	4618      	mov	r0, r3
 80003ca:	f000 f8fd 	bl	80005c8 <GPIO_Init>
//
//	// NSS
//	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
//	GPIO_Init(&SPIPins);

}
 80003ce:	bf00      	nop
 80003d0:	3710      	adds	r7, #16
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	40020400 	.word	0x40020400

080003dc <SPI2_Inits>:


void SPI2_Inits(void) {
 80003dc:	b580      	push	{r7, lr}
 80003de:	b08a      	sub	sp, #40	@ 0x28
 80003e0:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2Handle;

	SPI2Handle.pSPIx = SPI2;
 80003e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000414 <SPI2_Inits+0x38>)
 80003e4:	607b      	str	r3, [r7, #4]
	SPI2Handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 80003e6:	2301      	movs	r3, #1
 80003e8:	723b      	strb	r3, [r7, #8]
	SPI2Handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 80003ea:	2301      	movs	r3, #1
 80003ec:	727b      	strb	r3, [r7, #9]
	SPI2Handle.SPIConfig.SPI_SClkSpeed = SPI_SCLK_SPEED_DIV2;   // clock of 1Mhz
 80003ee:	2300      	movs	r3, #0
 80003f0:	72bb      	strb	r3, [r7, #10]
	SPI2Handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 80003f2:	2300      	movs	r3, #0
 80003f4:	72fb      	strb	r3, [r7, #11]
	SPI2Handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 80003f6:	2300      	movs	r3, #0
 80003f8:	737b      	strb	r3, [r7, #13]
	SPI2Handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 80003fa:	2300      	movs	r3, #0
 80003fc:	733b      	strb	r3, [r7, #12]
	SPI2Handle.SPIConfig.SPI_SSM = SPI_SSM_EN;
 80003fe:	2301      	movs	r3, #1
 8000400:	73bb      	strb	r3, [r7, #14]

	SPI_Init(&SPI2Handle);
 8000402:	1d3b      	adds	r3, r7, #4
 8000404:	4618      	mov	r0, r3
 8000406:	f000 fac1 	bl	800098c <SPI_Init>

}
 800040a:	bf00      	nop
 800040c:	3728      	adds	r7, #40	@ 0x28
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	40003800 	.word	0x40003800

08000418 <main>:

int main(void) {
 8000418:	b590      	push	{r4, r7, lr}
 800041a:	b085      	sub	sp, #20
 800041c:	af00      	add	r7, sp, #0

	char user_data[] = "Hello from SPI";
 800041e:	4b10      	ldr	r3, [pc, #64]	@ (8000460 <main+0x48>)
 8000420:	463c      	mov	r4, r7
 8000422:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000424:	c407      	stmia	r4!, {r0, r1, r2}
 8000426:	8023      	strh	r3, [r4, #0]
 8000428:	3402      	adds	r4, #2
 800042a:	0c1b      	lsrs	r3, r3, #16
 800042c:	7023      	strb	r3, [r4, #0]

	// GPIO inits to set the alternate functions
	SPI2_GPIOInits();
 800042e:	f7ff ffb3 	bl	8000398 <SPI2_GPIOInits>

	// SPI inits
	SPI2_Inits();
 8000432:	f7ff ffd3 	bl	80003dc <SPI2_Inits>

	// configure the SSI bit
	SPI_SSIConfig(SPI2, ENABLE);
 8000436:	2101      	movs	r1, #1
 8000438:	480a      	ldr	r0, [pc, #40]	@ (8000464 <main+0x4c>)
 800043a:	f000 fb52 	bl	8000ae2 <SPI_SSIConfig>

	// enable the SPI2 peripheral
	SPI_PeripheralControl(SPI2, ENABLE);
 800043e:	2101      	movs	r1, #1
 8000440:	4808      	ldr	r0, [pc, #32]	@ (8000464 <main+0x4c>)
 8000442:	f000 fb30 	bl	8000aa6 <SPI_PeripheralControl>

	// send data
	SPI_SendData(SPI2, (uint8_t*)user_data, strlen(user_data));
 8000446:	463b      	mov	r3, r7
 8000448:	4618      	mov	r0, r3
 800044a:	f7ff ff39 	bl	80002c0 <strlen>
 800044e:	4602      	mov	r2, r0
 8000450:	463b      	mov	r3, r7
 8000452:	4619      	mov	r1, r3
 8000454:	4803      	ldr	r0, [pc, #12]	@ (8000464 <main+0x4c>)
 8000456:	f000 faef 	bl	8000a38 <SPI_SendData>

	while(1);
 800045a:	bf00      	nop
 800045c:	e7fd      	b.n	800045a <main+0x42>
 800045e:	bf00      	nop
 8000460:	08000b38 	.word	0x08000b38
 8000464:	40003800 	.word	0x40003800

08000468 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000468:	480d      	ldr	r0, [pc, #52]	@ (80004a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800046a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800046c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000470:	480c      	ldr	r0, [pc, #48]	@ (80004a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000472:	490d      	ldr	r1, [pc, #52]	@ (80004a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000474:	4a0d      	ldr	r2, [pc, #52]	@ (80004ac <LoopForever+0xe>)
  movs r3, #0
 8000476:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000478:	e002      	b.n	8000480 <LoopCopyDataInit>

0800047a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800047a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800047c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800047e:	3304      	adds	r3, #4

08000480 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000480:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000482:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000484:	d3f9      	bcc.n	800047a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000486:	4a0a      	ldr	r2, [pc, #40]	@ (80004b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000488:	4c0a      	ldr	r4, [pc, #40]	@ (80004b4 <LoopForever+0x16>)
  movs r3, #0
 800048a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800048c:	e001      	b.n	8000492 <LoopFillZerobss>

0800048e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800048e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000490:	3204      	adds	r2, #4

08000492 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000492:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000494:	d3fb      	bcc.n	800048e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000496:	f7ff fed7 	bl	8000248 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800049a:	f7ff ffbd 	bl	8000418 <main>

0800049e <LoopForever>:

LoopForever:
  b LoopForever
 800049e:	e7fe      	b.n	800049e <LoopForever>
  ldr   r0, =_estack
 80004a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004a8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80004ac:	08000b58 	.word	0x08000b58
  ldr r2, =_sbss
 80004b0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004b4:	2000001c 	.word	0x2000001c

080004b8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004b8:	e7fe      	b.n	80004b8 <ADC_IRQHandler>
	...

080004bc <GPIO_PClockControl>:
 *
 * @return				none
 *
 * @note				Peripheral clock should be enabled before using the GPIO port
 */
void GPIO_PClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi) {
 80004bc:	b480      	push	{r7}
 80004be:	b083      	sub	sp, #12
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
 80004c4:	460b      	mov	r3, r1
 80004c6:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE) {
 80004c8:	78fb      	ldrb	r3, [r7, #3]
 80004ca:	2b01      	cmp	r3, #1
 80004cc:	d161      	bne.n	8000592 <GPIO_PClockControl+0xd6>
		if (pGPIOx == GPIOA) {
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	4a33      	ldr	r2, [pc, #204]	@ (80005a0 <GPIO_PClockControl+0xe4>)
 80004d2:	4293      	cmp	r3, r2
 80004d4:	d106      	bne.n	80004e4 <GPIO_PClockControl+0x28>
			GPIOA_PCLK_EN();
 80004d6:	4b33      	ldr	r3, [pc, #204]	@ (80005a4 <GPIO_PClockControl+0xe8>)
 80004d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004da:	4a32      	ldr	r2, [pc, #200]	@ (80005a4 <GPIO_PClockControl+0xe8>)
 80004dc:	f043 0301 	orr.w	r3, r3, #1
 80004e0:	6313      	str	r3, [r2, #48]	@ 0x30
//		} else if (pGPIOx == GPIOI) {
//			GPIOI_PCLK_DI();
//		}
//	}

}
 80004e2:	e056      	b.n	8000592 <GPIO_PClockControl+0xd6>
		} else if (pGPIOx == GPIOB) {
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	4a30      	ldr	r2, [pc, #192]	@ (80005a8 <GPIO_PClockControl+0xec>)
 80004e8:	4293      	cmp	r3, r2
 80004ea:	d106      	bne.n	80004fa <GPIO_PClockControl+0x3e>
			GPIOB_PCLK_EN();
 80004ec:	4b2d      	ldr	r3, [pc, #180]	@ (80005a4 <GPIO_PClockControl+0xe8>)
 80004ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004f0:	4a2c      	ldr	r2, [pc, #176]	@ (80005a4 <GPIO_PClockControl+0xe8>)
 80004f2:	f043 0302 	orr.w	r3, r3, #2
 80004f6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004f8:	e04b      	b.n	8000592 <GPIO_PClockControl+0xd6>
		} else if (pGPIOx == GPIOC) {
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	4a2b      	ldr	r2, [pc, #172]	@ (80005ac <GPIO_PClockControl+0xf0>)
 80004fe:	4293      	cmp	r3, r2
 8000500:	d106      	bne.n	8000510 <GPIO_PClockControl+0x54>
			GPIOC_PCLK_EN();
 8000502:	4b28      	ldr	r3, [pc, #160]	@ (80005a4 <GPIO_PClockControl+0xe8>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000506:	4a27      	ldr	r2, [pc, #156]	@ (80005a4 <GPIO_PClockControl+0xe8>)
 8000508:	f043 0304 	orr.w	r3, r3, #4
 800050c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800050e:	e040      	b.n	8000592 <GPIO_PClockControl+0xd6>
		} else if (pGPIOx == GPIOD) {
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	4a27      	ldr	r2, [pc, #156]	@ (80005b0 <GPIO_PClockControl+0xf4>)
 8000514:	4293      	cmp	r3, r2
 8000516:	d106      	bne.n	8000526 <GPIO_PClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000518:	4b22      	ldr	r3, [pc, #136]	@ (80005a4 <GPIO_PClockControl+0xe8>)
 800051a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051c:	4a21      	ldr	r2, [pc, #132]	@ (80005a4 <GPIO_PClockControl+0xe8>)
 800051e:	f043 0308 	orr.w	r3, r3, #8
 8000522:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000524:	e035      	b.n	8000592 <GPIO_PClockControl+0xd6>
		} else if (pGPIOx == GPIOE) {
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	4a22      	ldr	r2, [pc, #136]	@ (80005b4 <GPIO_PClockControl+0xf8>)
 800052a:	4293      	cmp	r3, r2
 800052c:	d106      	bne.n	800053c <GPIO_PClockControl+0x80>
			GPIOE_PCLK_EN();
 800052e:	4b1d      	ldr	r3, [pc, #116]	@ (80005a4 <GPIO_PClockControl+0xe8>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000532:	4a1c      	ldr	r2, [pc, #112]	@ (80005a4 <GPIO_PClockControl+0xe8>)
 8000534:	f043 0310 	orr.w	r3, r3, #16
 8000538:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800053a:	e02a      	b.n	8000592 <GPIO_PClockControl+0xd6>
		} else if (pGPIOx == GPIOF) {
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	4a1e      	ldr	r2, [pc, #120]	@ (80005b8 <GPIO_PClockControl+0xfc>)
 8000540:	4293      	cmp	r3, r2
 8000542:	d106      	bne.n	8000552 <GPIO_PClockControl+0x96>
			GPIOF_PCLK_EN();
 8000544:	4b17      	ldr	r3, [pc, #92]	@ (80005a4 <GPIO_PClockControl+0xe8>)
 8000546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000548:	4a16      	ldr	r2, [pc, #88]	@ (80005a4 <GPIO_PClockControl+0xe8>)
 800054a:	f043 0320 	orr.w	r3, r3, #32
 800054e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000550:	e01f      	b.n	8000592 <GPIO_PClockControl+0xd6>
		} else if (pGPIOx == GPIOG) {
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	4a19      	ldr	r2, [pc, #100]	@ (80005bc <GPIO_PClockControl+0x100>)
 8000556:	4293      	cmp	r3, r2
 8000558:	d106      	bne.n	8000568 <GPIO_PClockControl+0xac>
			GPIOG_PCLK_EN();
 800055a:	4b12      	ldr	r3, [pc, #72]	@ (80005a4 <GPIO_PClockControl+0xe8>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055e:	4a11      	ldr	r2, [pc, #68]	@ (80005a4 <GPIO_PClockControl+0xe8>)
 8000560:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000564:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000566:	e014      	b.n	8000592 <GPIO_PClockControl+0xd6>
		} else if (pGPIOx == GPIOH) {
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	4a15      	ldr	r2, [pc, #84]	@ (80005c0 <GPIO_PClockControl+0x104>)
 800056c:	4293      	cmp	r3, r2
 800056e:	d106      	bne.n	800057e <GPIO_PClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000570:	4b0c      	ldr	r3, [pc, #48]	@ (80005a4 <GPIO_PClockControl+0xe8>)
 8000572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000574:	4a0b      	ldr	r2, [pc, #44]	@ (80005a4 <GPIO_PClockControl+0xe8>)
 8000576:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800057a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800057c:	e009      	b.n	8000592 <GPIO_PClockControl+0xd6>
		} else if (pGPIOx == GPIOI) {
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	4a10      	ldr	r2, [pc, #64]	@ (80005c4 <GPIO_PClockControl+0x108>)
 8000582:	4293      	cmp	r3, r2
 8000584:	d105      	bne.n	8000592 <GPIO_PClockControl+0xd6>
			GPIOI_PCLK_EN();
 8000586:	4b07      	ldr	r3, [pc, #28]	@ (80005a4 <GPIO_PClockControl+0xe8>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058a:	4a06      	ldr	r2, [pc, #24]	@ (80005a4 <GPIO_PClockControl+0xe8>)
 800058c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000590:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000592:	bf00      	nop
 8000594:	370c      	adds	r7, #12
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	40020000 	.word	0x40020000
 80005a4:	40023800 	.word	0x40023800
 80005a8:	40020400 	.word	0x40020400
 80005ac:	40020800 	.word	0x40020800
 80005b0:	40020c00 	.word	0x40020c00
 80005b4:	40021000 	.word	0x40021000
 80005b8:	40021400 	.word	0x40021400
 80005bc:	40021800 	.word	0x40021800
 80005c0:	40021c00 	.word	0x40021c00
 80005c4:	40022000 	.word	0x40022000

080005c8 <GPIO_Init>:
 *
 * @return					none
 *
 * @note					This function should be called before using the GPIO pin
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b086      	sub	sp, #24
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
	uint32_t tempRegister;

	// Enable peripheral clock
	GPIO_PClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	2101      	movs	r1, #1
 80005d6:	4618      	mov	r0, r3
 80005d8:	f7ff ff70 	bl	80004bc <GPIO_PClockControl>

	// 1. configure the mode of the pin
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) {
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	795b      	ldrb	r3, [r3, #5]
 80005e0:	2b03      	cmp	r3, #3
 80005e2:	d81f      	bhi.n	8000624 <GPIO_Init+0x5c>
		// non interrupt mode
		// For example, if you're configuring pin 5, the mode bits would be shifted left by 10 positions (2 * 5),
		// placing them in bits 10 and 11 of the register.
		tempRegister = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	795b      	ldrb	r3, [r3, #5]
 80005e8:	461a      	mov	r2, r3
				<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	791b      	ldrb	r3, [r3, #4]
 80005ee:	005b      	lsls	r3, r3, #1
 80005f0:	fa02 f303 	lsl.w	r3, r2, r3
		tempRegister = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 80005f4:	613b      	str	r3, [r7, #16]
		// clear
		pGPIOHandle->pGPIOx->MODER &= ~(0x3
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	681a      	ldr	r2, [r3, #0]
				<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);   // 0x3 == 11
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	791b      	ldrb	r3, [r3, #4]
 8000600:	4619      	mov	r1, r3
 8000602:	2303      	movs	r3, #3
 8000604:	408b      	lsls	r3, r1
		pGPIOHandle->pGPIOx->MODER &= ~(0x3
 8000606:	43db      	mvns	r3, r3
 8000608:	4619      	mov	r1, r3
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	400a      	ands	r2, r1
 8000610:	601a      	str	r2, [r3, #0]
		// store
		pGPIOHandle->pGPIOx->MODER |= tempRegister;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	6819      	ldr	r1, [r3, #0]
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	693a      	ldr	r2, [r7, #16]
 800061e:	430a      	orrs	r2, r1
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	e0c4      	b.n	80007ae <GPIO_Init+0x1e6>

	} else {
		// interrupt mode
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT) {
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	795b      	ldrb	r3, [r3, #5]
 8000628:	2b04      	cmp	r3, #4
 800062a:	d117      	bne.n	800065c <GPIO_Init+0x94>
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800062c:	4b4a      	ldr	r3, [pc, #296]	@ (8000758 <GPIO_Init+0x190>)
 800062e:	68db      	ldr	r3, [r3, #12]
 8000630:	687a      	ldr	r2, [r7, #4]
 8000632:	7912      	ldrb	r2, [r2, #4]
 8000634:	4611      	mov	r1, r2
 8000636:	2201      	movs	r2, #1
 8000638:	408a      	lsls	r2, r1
 800063a:	4611      	mov	r1, r2
 800063c:	4a46      	ldr	r2, [pc, #280]	@ (8000758 <GPIO_Init+0x190>)
 800063e:	430b      	orrs	r3, r1
 8000640:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // clear RTSR
 8000642:	4b45      	ldr	r3, [pc, #276]	@ (8000758 <GPIO_Init+0x190>)
 8000644:	689b      	ldr	r3, [r3, #8]
 8000646:	687a      	ldr	r2, [r7, #4]
 8000648:	7912      	ldrb	r2, [r2, #4]
 800064a:	4611      	mov	r1, r2
 800064c:	2201      	movs	r2, #1
 800064e:	408a      	lsls	r2, r1
 8000650:	43d2      	mvns	r2, r2
 8000652:	4611      	mov	r1, r2
 8000654:	4a40      	ldr	r2, [pc, #256]	@ (8000758 <GPIO_Init+0x190>)
 8000656:	400b      	ands	r3, r1
 8000658:	6093      	str	r3, [r2, #8]
 800065a:	e035      	b.n	80006c8 <GPIO_Init+0x100>

		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT) {
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	795b      	ldrb	r3, [r3, #5]
 8000660:	2b05      	cmp	r3, #5
 8000662:	d117      	bne.n	8000694 <GPIO_Init+0xcc>
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000664:	4b3c      	ldr	r3, [pc, #240]	@ (8000758 <GPIO_Init+0x190>)
 8000666:	689b      	ldr	r3, [r3, #8]
 8000668:	687a      	ldr	r2, [r7, #4]
 800066a:	7912      	ldrb	r2, [r2, #4]
 800066c:	4611      	mov	r1, r2
 800066e:	2201      	movs	r2, #1
 8000670:	408a      	lsls	r2, r1
 8000672:	4611      	mov	r1, r2
 8000674:	4a38      	ldr	r2, [pc, #224]	@ (8000758 <GPIO_Init+0x190>)
 8000676:	430b      	orrs	r3, r1
 8000678:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // clear FTSR
 800067a:	4b37      	ldr	r3, [pc, #220]	@ (8000758 <GPIO_Init+0x190>)
 800067c:	68db      	ldr	r3, [r3, #12]
 800067e:	687a      	ldr	r2, [r7, #4]
 8000680:	7912      	ldrb	r2, [r2, #4]
 8000682:	4611      	mov	r1, r2
 8000684:	2201      	movs	r2, #1
 8000686:	408a      	lsls	r2, r1
 8000688:	43d2      	mvns	r2, r2
 800068a:	4611      	mov	r1, r2
 800068c:	4a32      	ldr	r2, [pc, #200]	@ (8000758 <GPIO_Init+0x190>)
 800068e:	400b      	ands	r3, r1
 8000690:	60d3      	str	r3, [r2, #12]
 8000692:	e019      	b.n	80006c8 <GPIO_Init+0x100>

		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT) {
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	795b      	ldrb	r3, [r3, #5]
 8000698:	2b06      	cmp	r3, #6
 800069a:	d115      	bne.n	80006c8 <GPIO_Init+0x100>
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800069c:	4b2e      	ldr	r3, [pc, #184]	@ (8000758 <GPIO_Init+0x190>)
 800069e:	689b      	ldr	r3, [r3, #8]
 80006a0:	687a      	ldr	r2, [r7, #4]
 80006a2:	7912      	ldrb	r2, [r2, #4]
 80006a4:	4611      	mov	r1, r2
 80006a6:	2201      	movs	r2, #1
 80006a8:	408a      	lsls	r2, r1
 80006aa:	4611      	mov	r1, r2
 80006ac:	4a2a      	ldr	r2, [pc, #168]	@ (8000758 <GPIO_Init+0x190>)
 80006ae:	430b      	orrs	r3, r1
 80006b0:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006b2:	4b29      	ldr	r3, [pc, #164]	@ (8000758 <GPIO_Init+0x190>)
 80006b4:	68db      	ldr	r3, [r3, #12]
 80006b6:	687a      	ldr	r2, [r7, #4]
 80006b8:	7912      	ldrb	r2, [r2, #4]
 80006ba:	4611      	mov	r1, r2
 80006bc:	2201      	movs	r2, #1
 80006be:	408a      	lsls	r2, r1
 80006c0:	4611      	mov	r1, r2
 80006c2:	4a25      	ldr	r2, [pc, #148]	@ (8000758 <GPIO_Init+0x190>)
 80006c4:	430b      	orrs	r3, r1
 80006c6:	60d3      	str	r3, [r2, #12]

		}

		// 2.configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t extiRegisterSet = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	791b      	ldrb	r3, [r3, #4]
 80006cc:	089b      	lsrs	r3, r3, #2
 80006ce:	75fb      	strb	r3, [r7, #23]
				/ 4; // we choose the index for the array with this, so SYSCFG.EXTICR[0] == EXTICR1
		uint8_t extiBitPosition = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	791b      	ldrb	r3, [r3, #4]
 80006d4:	f003 0303 	and.w	r3, r3, #3
 80006d8:	75bb      	strb	r3, [r7, #22]
				% 4;   // this tells us about the position within each register

		uint8_t portCode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a1f      	ldr	r2, [pc, #124]	@ (800075c <GPIO_Init+0x194>)
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d04d      	beq.n	8000780 <GPIO_Init+0x1b8>
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a1d      	ldr	r2, [pc, #116]	@ (8000760 <GPIO_Init+0x198>)
 80006ea:	4293      	cmp	r3, r2
 80006ec:	d032      	beq.n	8000754 <GPIO_Init+0x18c>
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4a1c      	ldr	r2, [pc, #112]	@ (8000764 <GPIO_Init+0x19c>)
 80006f4:	4293      	cmp	r3, r2
 80006f6:	d02b      	beq.n	8000750 <GPIO_Init+0x188>
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a1a      	ldr	r2, [pc, #104]	@ (8000768 <GPIO_Init+0x1a0>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	d024      	beq.n	800074c <GPIO_Init+0x184>
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4a19      	ldr	r2, [pc, #100]	@ (800076c <GPIO_Init+0x1a4>)
 8000708:	4293      	cmp	r3, r2
 800070a:	d01d      	beq.n	8000748 <GPIO_Init+0x180>
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a17      	ldr	r2, [pc, #92]	@ (8000770 <GPIO_Init+0x1a8>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d016      	beq.n	8000744 <GPIO_Init+0x17c>
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4a16      	ldr	r2, [pc, #88]	@ (8000774 <GPIO_Init+0x1ac>)
 800071c:	4293      	cmp	r3, r2
 800071e:	d00f      	beq.n	8000740 <GPIO_Init+0x178>
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a14      	ldr	r2, [pc, #80]	@ (8000778 <GPIO_Init+0x1b0>)
 8000726:	4293      	cmp	r3, r2
 8000728:	d008      	beq.n	800073c <GPIO_Init+0x174>
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4a13      	ldr	r2, [pc, #76]	@ (800077c <GPIO_Init+0x1b4>)
 8000730:	4293      	cmp	r3, r2
 8000732:	d101      	bne.n	8000738 <GPIO_Init+0x170>
 8000734:	2308      	movs	r3, #8
 8000736:	e024      	b.n	8000782 <GPIO_Init+0x1ba>
 8000738:	2300      	movs	r3, #0
 800073a:	e022      	b.n	8000782 <GPIO_Init+0x1ba>
 800073c:	2307      	movs	r3, #7
 800073e:	e020      	b.n	8000782 <GPIO_Init+0x1ba>
 8000740:	2306      	movs	r3, #6
 8000742:	e01e      	b.n	8000782 <GPIO_Init+0x1ba>
 8000744:	2305      	movs	r3, #5
 8000746:	e01c      	b.n	8000782 <GPIO_Init+0x1ba>
 8000748:	2304      	movs	r3, #4
 800074a:	e01a      	b.n	8000782 <GPIO_Init+0x1ba>
 800074c:	2303      	movs	r3, #3
 800074e:	e018      	b.n	8000782 <GPIO_Init+0x1ba>
 8000750:	2302      	movs	r3, #2
 8000752:	e016      	b.n	8000782 <GPIO_Init+0x1ba>
 8000754:	2301      	movs	r3, #1
 8000756:	e014      	b.n	8000782 <GPIO_Init+0x1ba>
 8000758:	40013c00 	.word	0x40013c00
 800075c:	40020000 	.word	0x40020000
 8000760:	40020400 	.word	0x40020400
 8000764:	40020800 	.word	0x40020800
 8000768:	40020c00 	.word	0x40020c00
 800076c:	40021000 	.word	0x40021000
 8000770:	40021400 	.word	0x40021400
 8000774:	40021800 	.word	0x40021800
 8000778:	40021c00 	.word	0x40021c00
 800077c:	40022000 	.word	0x40022000
 8000780:	2300      	movs	r3, #0
 8000782:	757b      	strb	r3, [r7, #21]
		SYSCFG->EXTICR[extiRegisterSet] = portCode << (extiBitPosition * 4);
 8000784:	7d7a      	ldrb	r2, [r7, #21]
 8000786:	7dbb      	ldrb	r3, [r7, #22]
 8000788:	009b      	lsls	r3, r3, #2
 800078a:	fa02 f103 	lsl.w	r1, r2, r3
 800078e:	4a57      	ldr	r2, [pc, #348]	@ (80008ec <GPIO_Init+0x324>)
 8000790:	7dfb      	ldrb	r3, [r7, #23]
 8000792:	3302      	adds	r3, #2
 8000794:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		// 3.enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000798:	4b55      	ldr	r3, [pc, #340]	@ (80008f0 <GPIO_Init+0x328>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	687a      	ldr	r2, [r7, #4]
 800079e:	7912      	ldrb	r2, [r2, #4]
 80007a0:	4611      	mov	r1, r2
 80007a2:	2201      	movs	r2, #1
 80007a4:	408a      	lsls	r2, r1
 80007a6:	4611      	mov	r1, r2
 80007a8:	4a51      	ldr	r2, [pc, #324]	@ (80008f0 <GPIO_Init+0x328>)
 80007aa:	430b      	orrs	r3, r1
 80007ac:	6013      	str	r3, [r2, #0]
	}

	// reset temporary register
	tempRegister = 0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	613b      	str	r3, [r7, #16]
	// 2. configure the speed
	tempRegister = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	799b      	ldrb	r3, [r3, #6]
 80007b6:	461a      	mov	r2, r3
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	791b      	ldrb	r3, [r3, #4]
 80007bc:	005b      	lsls	r3, r3, #1
 80007be:	fa02 f303 	lsl.w	r3, r2, r3
	tempRegister = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed
 80007c2:	613b      	str	r3, [r7, #16]
	// clear
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	689a      	ldr	r2, [r3, #8]
			<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);   // 0x3 == 0b11
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	791b      	ldrb	r3, [r3, #4]
 80007ce:	4619      	mov	r1, r3
 80007d0:	2303      	movs	r3, #3
 80007d2:	408b      	lsls	r3, r1
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3
 80007d4:	43db      	mvns	r3, r3
 80007d6:	4619      	mov	r1, r3
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	400a      	ands	r2, r1
 80007de:	609a      	str	r2, [r3, #8]
	// store
	pGPIOHandle->pGPIOx->OSPEEDR |= tempRegister;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	6899      	ldr	r1, [r3, #8]
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	693a      	ldr	r2, [r7, #16]
 80007ec:	430a      	orrs	r2, r1
 80007ee:	609a      	str	r2, [r3, #8]

	// reset temporary register
	tempRegister = 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	613b      	str	r3, [r7, #16]
	// 3. configure the pull up pull down
	tempRegister = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	79db      	ldrb	r3, [r3, #7]
 80007f8:	461a      	mov	r2, r3
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	791b      	ldrb	r3, [r3, #4]
 80007fe:	005b      	lsls	r3, r3, #1
 8000800:	fa02 f303 	lsl.w	r3, r2, r3
	tempRegister = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl
 8000804:	613b      	str	r3, [r7, #16]
	// clear
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	68da      	ldr	r2, [r3, #12]
			<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);   // 0x3 == 0b11
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	791b      	ldrb	r3, [r3, #4]
 8000810:	4619      	mov	r1, r3
 8000812:	2303      	movs	r3, #3
 8000814:	408b      	lsls	r3, r1
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3
 8000816:	43db      	mvns	r3, r3
 8000818:	4619      	mov	r1, r3
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	400a      	ands	r2, r1
 8000820:	60da      	str	r2, [r3, #12]
	// store
	pGPIOHandle->pGPIOx->PUPDR |= tempRegister;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	68d9      	ldr	r1, [r3, #12]
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	693a      	ldr	r2, [r7, #16]
 800082e:	430a      	orrs	r2, r1
 8000830:	60da      	str	r2, [r3, #12]

	// reset temporary register
	tempRegister = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	613b      	str	r3, [r7, #16]
	// 4. configure the output type
	tempRegister = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOpType
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	7a1b      	ldrb	r3, [r3, #8]
 800083a:	461a      	mov	r2, r3
			<< (1 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // no 2 bits here only 16bits is used
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	791b      	ldrb	r3, [r3, #4]
 8000840:	fa02 f303 	lsl.w	r3, r2, r3
	tempRegister = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOpType
 8000844:	613b      	str	r3, [r7, #16]
	// clear
	pGPIOHandle->pGPIOx->OTYPER &= ~(1
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	685a      	ldr	r2, [r3, #4]
			<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	791b      	ldrb	r3, [r3, #4]
 8000850:	4619      	mov	r1, r3
 8000852:	2301      	movs	r3, #1
 8000854:	408b      	lsls	r3, r1
	pGPIOHandle->pGPIOx->OTYPER &= ~(1
 8000856:	43db      	mvns	r3, r3
 8000858:	4619      	mov	r1, r3
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	400a      	ands	r2, r1
 8000860:	605a      	str	r2, [r3, #4]
	// store
	pGPIOHandle->pGPIOx->OTYPER |= tempRegister;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	6859      	ldr	r1, [r3, #4]
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	693a      	ldr	r2, [r7, #16]
 800086e:	430a      	orrs	r2, r1
 8000870:	605a      	str	r2, [r3, #4]

	// reset temporary register
	tempRegister = 0;
 8000872:	2300      	movs	r3, #0
 8000874:	613b      	str	r3, [r7, #16]
	// 5. configure the alternate functionality
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALT_FN) {
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	795b      	ldrb	r3, [r3, #5]
 800087a:	2b02      	cmp	r3, #2
 800087c:	d131      	bne.n	80008e2 <GPIO_Init+0x31a>
		uint8_t lowOrHigh = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8; // if this is 0, then low, - this decides if it is AFR low or AFR high register
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	791b      	ldrb	r3, [r3, #4]
 8000882:	08db      	lsrs	r3, r3, #3
 8000884:	73fb      	strb	r3, [r7, #15]
		uint8_t bitPosition = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8; // this decides where the pin registers fall within low or high register
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	791b      	ldrb	r3, [r3, #4]
 800088a:	f003 0307 	and.w	r3, r3, #7
 800088e:	73bb      	strb	r3, [r7, #14]

		// clear
		pGPIOHandle->pGPIOx->AFR[lowOrHigh] &= ~(0xF << (4 * bitPosition)); // 0xF == 0b1111
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	7bfa      	ldrb	r2, [r7, #15]
 8000896:	3208      	adds	r2, #8
 8000898:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800089c:	7bbb      	ldrb	r3, [r7, #14]
 800089e:	009b      	lsls	r3, r3, #2
 80008a0:	220f      	movs	r2, #15
 80008a2:	fa02 f303 	lsl.w	r3, r2, r3
 80008a6:	43db      	mvns	r3, r3
 80008a8:	4618      	mov	r0, r3
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	7bfa      	ldrb	r2, [r7, #15]
 80008b0:	4001      	ands	r1, r0
 80008b2:	3208      	adds	r2, #8
 80008b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		// store
		pGPIOHandle->pGPIOx->AFR[lowOrHigh] |=
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	7bfa      	ldrb	r2, [r7, #15]
 80008be:	3208      	adds	r2, #8
 80008c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
				(pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	7a5b      	ldrb	r3, [r3, #9]
 80008c8:	461a      	mov	r2, r3
						<< (4 * bitPosition));
 80008ca:	7bbb      	ldrb	r3, [r7, #14]
 80008cc:	009b      	lsls	r3, r3, #2
 80008ce:	fa02 f303 	lsl.w	r3, r2, r3
 80008d2:	4618      	mov	r0, r3
		pGPIOHandle->pGPIOx->AFR[lowOrHigh] |=
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	7bfa      	ldrb	r2, [r7, #15]
 80008da:	4301      	orrs	r1, r0
 80008dc:	3208      	adds	r2, #8
 80008de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}

}
 80008e2:	bf00      	nop
 80008e4:	3718      	adds	r7, #24
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40013800 	.word	0x40013800
 80008f0:	40013c00 	.word	0x40013c00

080008f4 <SPI_GetFlagStatus>:
 * @return              FLAG_SET if the flag is set, FLAG_RESET otherwise
 *
 * @note                This function should be used to check SPI status flags before performing operations
 *
 */
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName) {
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
 80008fc:	6039      	str	r1, [r7, #0]
	if (pSPIx->SR & FlagName) {
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	689a      	ldr	r2, [r3, #8]
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	4013      	ands	r3, r2
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <SPI_GetFlagStatus+0x1a>
		return FLAG_SET;
 800090a:	2301      	movs	r3, #1
 800090c:	e000      	b.n	8000910 <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 800090e:	2300      	movs	r3, #0
}
 8000910:	4618      	mov	r0, r3
 8000912:	370c      	adds	r7, #12
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr

0800091c <SPI_PClockControl>:
 * @return              none
 *
 * @note                Peripheral clock should be enabled before using the SPI port
 *
 */
void SPI_PClockControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi) {
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	460b      	mov	r3, r1
 8000926:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE) {
 8000928:	78fb      	ldrb	r3, [r7, #3]
 800092a:	2b01      	cmp	r3, #1
 800092c:	d11f      	bne.n	800096e <SPI_PClockControl+0x52>
		if (pSPIx == SPI1) {
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4a12      	ldr	r2, [pc, #72]	@ (800097c <SPI_PClockControl+0x60>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d106      	bne.n	8000944 <SPI_PClockControl+0x28>
			SPI1_PCLK_EN();
 8000936:	4b12      	ldr	r3, [pc, #72]	@ (8000980 <SPI_PClockControl+0x64>)
 8000938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800093a:	4a11      	ldr	r2, [pc, #68]	@ (8000980 <SPI_PClockControl+0x64>)
 800093c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000940:	6453      	str	r3, [r2, #68]	@ 0x44
	}

	if (EnOrDi == DISABLE) {
		// TODO: do the disable bits
	}
}
 8000942:	e014      	b.n	800096e <SPI_PClockControl+0x52>
		} else if (pSPIx == SPI2) {
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	4a0f      	ldr	r2, [pc, #60]	@ (8000984 <SPI_PClockControl+0x68>)
 8000948:	4293      	cmp	r3, r2
 800094a:	d106      	bne.n	800095a <SPI_PClockControl+0x3e>
			SPI2_PCLK_EN();
 800094c:	4b0c      	ldr	r3, [pc, #48]	@ (8000980 <SPI_PClockControl+0x64>)
 800094e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000950:	4a0b      	ldr	r2, [pc, #44]	@ (8000980 <SPI_PClockControl+0x64>)
 8000952:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000956:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000958:	e009      	b.n	800096e <SPI_PClockControl+0x52>
		} else if (pSPIx == SPI3) {
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4a0a      	ldr	r2, [pc, #40]	@ (8000988 <SPI_PClockControl+0x6c>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d105      	bne.n	800096e <SPI_PClockControl+0x52>
			SPI3_PCLK_EN();
 8000962:	4b07      	ldr	r3, [pc, #28]	@ (8000980 <SPI_PClockControl+0x64>)
 8000964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000966:	4a06      	ldr	r2, [pc, #24]	@ (8000980 <SPI_PClockControl+0x64>)
 8000968:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800096c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800096e:	bf00      	nop
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	40013000 	.word	0x40013000
 8000980:	40023800 	.word	0x40023800
 8000984:	40003800 	.word	0x40003800
 8000988:	40003c00 	.word	0x40003c00

0800098c <SPI_Init>:
 *
 * @return              none
 *
 * @note                This function must be called before using the SPI peripheral
 */
void SPI_Init(SPI_Handle_t *pSPIHandle) {
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
	// peripheral clock enable
	SPI_PClockControl(pSPIHandle->pSPIx, ENABLE);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	2101      	movs	r1, #1
 800099a:	4618      	mov	r0, r3
 800099c:	f7ff ffbe 	bl	800091c <SPI_PClockControl>

	uint32_t tempRegister = 0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	60fb      	str	r3, [r7, #12]
	// configure the SPI CR1 register

	// 1.configure the device mode
	tempRegister |= pSPIHandle->SPIConfig.SPI_DeviceMode << 2;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	791b      	ldrb	r3, [r3, #4]
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	68fa      	ldr	r2, [r7, #12]
 80009ac:	4313      	orrs	r3, r2
 80009ae:	60fb      	str	r3, [r7, #12]

	// 2.configure the bus
	if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD) {
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	795b      	ldrb	r3, [r3, #5]
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d104      	bne.n	80009c2 <SPI_Init+0x36>
		// full duplex
		//  BIDI mode should be cleared
		tempRegister &= ~(1 << SPI_CR1_BIDIMODE);
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	e014      	b.n	80009ec <SPI_Init+0x60>

	} else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD) {
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	795b      	ldrb	r3, [r3, #5]
 80009c6:	2b02      	cmp	r3, #2
 80009c8:	d104      	bne.n	80009d4 <SPI_Init+0x48>
		// half duplex
		// BIDI mode should be enabled
		tempRegister |= (1 << SPI_CR1_BIDIMODE);
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80009d0:	60fb      	str	r3, [r7, #12]
 80009d2:	e00b      	b.n	80009ec <SPI_Init+0x60>
	} else if (pSPIHandle->SPIConfig.SPI_BusConfig
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	795b      	ldrb	r3, [r3, #5]
 80009d8:	2b03      	cmp	r3, #3
 80009da:	d107      	bne.n	80009ec <SPI_Init+0x60>
			== SPI_BUS_CONFIG_SIMPLEX_RXONLY) {
		// simplex receive only
		// BIDI mode should be cleared
		tempRegister &= ~(1 << SPI_CR1_BIDIMODE);
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80009e2:	60fb      	str	r3, [r7, #12]
		// RXONLY bit must be set
		tempRegister |= (1 << SPI_CR1_RXONLY);
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009ea:	60fb      	str	r3, [r7, #12]
	}

	// 3.  configure the clock speed
	tempRegister |= pSPIHandle->SPIConfig.SPI_SClkSpeed << SPI_CR1_BR;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	799b      	ldrb	r3, [r3, #6]
 80009f0:	00db      	lsls	r3, r3, #3
 80009f2:	68fa      	ldr	r2, [r7, #12]
 80009f4:	4313      	orrs	r3, r2
 80009f6:	60fb      	str	r3, [r7, #12]

	// 4.  configure the clock polarity
	tempRegister |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	7a1b      	ldrb	r3, [r3, #8]
 80009fc:	005b      	lsls	r3, r3, #1
 80009fe:	68fa      	ldr	r2, [r7, #12]
 8000a00:	4313      	orrs	r3, r2
 8000a02:	60fb      	str	r3, [r7, #12]

	// 5.  configure the clock phase
	tempRegister |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	7a5b      	ldrb	r3, [r3, #9]
 8000a08:	461a      	mov	r2, r3
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	60fb      	str	r3, [r7, #12]

	// 6.  configure the data frame
	tempRegister |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	79db      	ldrb	r3, [r3, #7]
 8000a14:	02db      	lsls	r3, r3, #11
 8000a16:	68fa      	ldr	r2, [r7, #12]
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	60fb      	str	r3, [r7, #12]

	// 7.  configure the slave management
	tempRegister |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	7a9b      	ldrb	r3, [r3, #10]
 8000a20:	025b      	lsls	r3, r3, #9
 8000a22:	68fa      	ldr	r2, [r7, #12]
 8000a24:	4313      	orrs	r3, r2
 8000a26:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempRegister;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	68fa      	ldr	r2, [r7, #12]
 8000a2e:	601a      	str	r2, [r3, #0]

}
 8000a30:	bf00      	nop
 8000a32:	3710      	adds	r7, #16
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <SPI_SendData>:
 *
 * @return              none
 *
 * @note                This function is blocking and will wait until all data is transmitted
 */
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len) {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	60b9      	str	r1, [r7, #8]
 8000a42:	607a      	str	r2, [r7, #4]
	while (Len > 0) {
 8000a44:	e027      	b.n	8000a96 <SPI_SendData+0x5e>
		// 1.wait till TXE is set
		while (SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET){};
 8000a46:	bf00      	nop
 8000a48:	2102      	movs	r1, #2
 8000a4a:	68f8      	ldr	r0, [r7, #12]
 8000a4c:	f7ff ff52 	bl	80008f4 <SPI_GetFlagStatus>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d0f8      	beq.n	8000a48 <SPI_SendData+0x10>

		// 2.check the DFF bit in CR1
		if (pSPIx->CR1 & (1 << SPI_CR1_DFF)) {
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d00e      	beq.n	8000a80 <SPI_SendData+0x48>
			// 16 bit data
			// 1. load the data
			pSPIx->DR = (uint32_t)*pTxBuffer;
 8000a62:	68bb      	ldr	r3, [r7, #8]
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	461a      	mov	r2, r3
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	60da      	str	r2, [r3, #12]
			Len--;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	3b01      	subs	r3, #1
 8000a70:	607b      	str	r3, [r7, #4]
			Len--;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	3b01      	subs	r3, #1
 8000a76:	607b      	str	r3, [r7, #4]
			(uint16_t*) pTxBuffer++;
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	60bb      	str	r3, [r7, #8]
 8000a7e:	e00a      	b.n	8000a96 <SPI_SendData+0x5e>
		} else {
			// 8 bit data
			// 1. load the data
			pSPIx->DR = *pTxBuffer;
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	461a      	mov	r2, r3
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	60da      	str	r2, [r3, #12]
			Len--;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	3b01      	subs	r3, #1
 8000a8e:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	3301      	adds	r3, #1
 8000a94:	60bb      	str	r3, [r7, #8]
	while (Len > 0) {
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d1d4      	bne.n	8000a46 <SPI_SendData+0xe>
		}
	}
}
 8000a9c:	bf00      	nop
 8000a9e:	bf00      	nop
 8000aa0:	3710      	adds	r7, #16
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <SPI_PeripheralControl>:
 * @return              none
 *
 * @note                This function should be called after SPI initialization and before any data transfer
 *
 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi) {
 8000aa6:	b480      	push	{r7}
 8000aa8:	b083      	sub	sp, #12
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
 8000aae:	460b      	mov	r3, r1
 8000ab0:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE) {
 8000ab2:	78fb      	ldrb	r3, [r7, #3]
 8000ab4:	2b01      	cmp	r3, #1
 8000ab6:	d105      	bne.n	8000ac4 <SPI_PeripheralControl+0x1e>
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	601a      	str	r2, [r3, #0]
	}

	if (EnOrDi == DISABLE) {
 8000ac4:	78fb      	ldrb	r3, [r7, #3]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d105      	bne.n	8000ad6 <SPI_PeripheralControl+0x30>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	601a      	str	r2, [r3, #0]
	}
}
 8000ad6:	bf00      	nop
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr

08000ae2 <SPI_SSIConfig>:
 * @return              none
 *
 * @note                This function is typically used in software slave management mode
 *
 */
void SPI_SSIConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi) {
 8000ae2:	b480      	push	{r7}
 8000ae4:	b083      	sub	sp, #12
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	6078      	str	r0, [r7, #4]
 8000aea:	460b      	mov	r3, r1
 8000aec:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE) {
 8000aee:	78fb      	ldrb	r3, [r7, #3]
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d105      	bne.n	8000b00 <SPI_SSIConfig+0x1e>
		pSPIx->CR1 |= (1 << SPI_CR1_SSI);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	601a      	str	r2, [r3, #0]
	}

	if (EnOrDi == DISABLE) {
 8000b00:	78fb      	ldrb	r3, [r7, #3]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d105      	bne.n	8000b12 <SPI_SSIConfig+0x30>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	601a      	str	r2, [r3, #0]
	}
}
 8000b12:	bf00      	nop
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
	...

08000b20 <_init>:
 8000b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b22:	bf00      	nop
 8000b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b26:	bc08      	pop	{r3}
 8000b28:	469e      	mov	lr, r3
 8000b2a:	4770      	bx	lr

08000b2c <_fini>:
 8000b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b2e:	bf00      	nop
 8000b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b32:	bc08      	pop	{r3}
 8000b34:	469e      	mov	lr, r3
 8000b36:	4770      	bx	lr
