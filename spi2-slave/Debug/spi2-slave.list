
spi2-slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b68  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002cf0  08002cf0  00003cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d28  08002d28  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002d28  08002d28  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002d28  08002d28  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d28  08002d28  00003d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002d2c  08002d2c  00003d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002d30  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000400c  2**0
                  CONTENTS
 10 .bss          00000084  2000000c  2000000c  0000400c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000090  20000090  0000400c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 13 .comment      00000026  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00005fbc  00000000  00000000  00004062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000013b2  00000000  00000000  0000a01e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000628  00000000  00000000  0000b3d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000463  00000000  00000000  0000b9f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001c353  00000000  00000000  0000be5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00005cbf  00000000  00000000  000281ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000a9e94  00000000  00000000  0002de6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000016dc  00000000  00000000  000d7d04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008a  00000000  00000000  000d93e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loclists 00000227  00000000  00000000  000d946a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <deregister_tm_clones>:
 8000188:	4803      	ldr	r0, [pc, #12]	@ (8000198 <deregister_tm_clones+0x10>)
 800018a:	4b04      	ldr	r3, [pc, #16]	@ (800019c <deregister_tm_clones+0x14>)
 800018c:	4283      	cmp	r3, r0
 800018e:	d002      	beq.n	8000196 <deregister_tm_clones+0xe>
 8000190:	4b03      	ldr	r3, [pc, #12]	@ (80001a0 <deregister_tm_clones+0x18>)
 8000192:	b103      	cbz	r3, 8000196 <deregister_tm_clones+0xe>
 8000194:	4718      	bx	r3
 8000196:	4770      	bx	lr
 8000198:	2000000c 	.word	0x2000000c
 800019c:	2000000c 	.word	0x2000000c
 80001a0:	00000000 	.word	0x00000000

080001a4 <register_tm_clones>:
 80001a4:	4805      	ldr	r0, [pc, #20]	@ (80001bc <register_tm_clones+0x18>)
 80001a6:	4b06      	ldr	r3, [pc, #24]	@ (80001c0 <register_tm_clones+0x1c>)
 80001a8:	1a1b      	subs	r3, r3, r0
 80001aa:	0fd9      	lsrs	r1, r3, #31
 80001ac:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 80001b0:	1049      	asrs	r1, r1, #1
 80001b2:	d002      	beq.n	80001ba <register_tm_clones+0x16>
 80001b4:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <register_tm_clones+0x20>)
 80001b6:	b103      	cbz	r3, 80001ba <register_tm_clones+0x16>
 80001b8:	4718      	bx	r3
 80001ba:	4770      	bx	lr
 80001bc:	2000000c 	.word	0x2000000c
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	00000000 	.word	0x00000000

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c06      	ldr	r4, [pc, #24]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b943      	cbnz	r3, 80001e2 <__do_global_dtors_aux+0x1a>
 80001d0:	f7ff ffda 	bl	8000188 <deregister_tm_clones>
 80001d4:	4b04      	ldr	r3, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	b113      	cbz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d8:	4804      	ldr	r0, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x24>)
 80001da:	f3af 8000 	nop.w
 80001de:	2301      	movs	r3, #1
 80001e0:	7023      	strb	r3, [r4, #0]
 80001e2:	bd10      	pop	{r4, pc}
 80001e4:	2000000c 	.word	0x2000000c
 80001e8:	00000000 	.word	0x00000000
 80001ec:	08002cd8 	.word	0x08002cd8

080001f0 <frame_dummy>:
 80001f0:	b508      	push	{r3, lr}
 80001f2:	4b04      	ldr	r3, [pc, #16]	@ (8000204 <frame_dummy+0x14>)
 80001f4:	b11b      	cbz	r3, 80001fe <frame_dummy+0xe>
 80001f6:	4904      	ldr	r1, [pc, #16]	@ (8000208 <frame_dummy+0x18>)
 80001f8:	4804      	ldr	r0, [pc, #16]	@ (800020c <frame_dummy+0x1c>)
 80001fa:	f3af 8000 	nop.w
 80001fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000202:	e7cf      	b.n	80001a4 <register_tm_clones>
 8000204:	00000000 	.word	0x00000000
 8000208:	20000010 	.word	0x20000010
 800020c:	08002cd8 	.word	0x08002cd8

08000210 <__libc_init_array>:
 8000210:	b570      	push	{r4, r5, r6, lr}
 8000212:	4b0f      	ldr	r3, [pc, #60]	@ (8000250 <__libc_init_array+0x40>)
 8000214:	4d0f      	ldr	r5, [pc, #60]	@ (8000254 <__libc_init_array+0x44>)
 8000216:	42ab      	cmp	r3, r5
 8000218:	eba3 0605 	sub.w	r6, r3, r5
 800021c:	d007      	beq.n	800022e <__libc_init_array+0x1e>
 800021e:	10b6      	asrs	r6, r6, #2
 8000220:	2400      	movs	r4, #0
 8000222:	f855 3b04 	ldr.w	r3, [r5], #4
 8000226:	3401      	adds	r4, #1
 8000228:	4798      	blx	r3
 800022a:	42a6      	cmp	r6, r4
 800022c:	d8f9      	bhi.n	8000222 <__libc_init_array+0x12>
 800022e:	f002 fd53 	bl	8002cd8 <_init>
 8000232:	4d09      	ldr	r5, [pc, #36]	@ (8000258 <__libc_init_array+0x48>)
 8000234:	4b09      	ldr	r3, [pc, #36]	@ (800025c <__libc_init_array+0x4c>)
 8000236:	1b5e      	subs	r6, r3, r5
 8000238:	42ab      	cmp	r3, r5
 800023a:	ea4f 06a6 	mov.w	r6, r6, asr #2
 800023e:	d006      	beq.n	800024e <__libc_init_array+0x3e>
 8000240:	2400      	movs	r4, #0
 8000242:	f855 3b04 	ldr.w	r3, [r5], #4
 8000246:	3401      	adds	r4, #1
 8000248:	4798      	blx	r3
 800024a:	42a6      	cmp	r6, r4
 800024c:	d8f9      	bhi.n	8000242 <__libc_init_array+0x32>
 800024e:	bd70      	pop	{r4, r5, r6, pc}
 8000250:	08002d28 	.word	0x08002d28
 8000254:	08002d28 	.word	0x08002d28
 8000258:	08002d28 	.word	0x08002d28
 800025c:	08002d2c 	.word	0x08002d2c

08000260 <memset>:
 8000260:	0783      	lsls	r3, r0, #30
 8000262:	b530      	push	{r4, r5, lr}
 8000264:	d047      	beq.n	80002f6 <memset+0x96>
 8000266:	1e54      	subs	r4, r2, #1
 8000268:	2a00      	cmp	r2, #0
 800026a:	d03e      	beq.n	80002ea <memset+0x8a>
 800026c:	b2ca      	uxtb	r2, r1
 800026e:	4603      	mov	r3, r0
 8000270:	e001      	b.n	8000276 <memset+0x16>
 8000272:	3c01      	subs	r4, #1
 8000274:	d339      	bcc.n	80002ea <memset+0x8a>
 8000276:	f803 2b01 	strb.w	r2, [r3], #1
 800027a:	079d      	lsls	r5, r3, #30
 800027c:	d1f9      	bne.n	8000272 <memset+0x12>
 800027e:	2c03      	cmp	r4, #3
 8000280:	d92c      	bls.n	80002dc <memset+0x7c>
 8000282:	b2cd      	uxtb	r5, r1
 8000284:	eb05 2505 	add.w	r5, r5, r5, lsl #8
 8000288:	2c0f      	cmp	r4, #15
 800028a:	eb05 4505 	add.w	r5, r5, r5, lsl #16
 800028e:	d935      	bls.n	80002fc <memset+0x9c>
 8000290:	f1a4 0210 	sub.w	r2, r4, #16
 8000294:	f022 0c0f 	bic.w	ip, r2, #15
 8000298:	f103 0e10 	add.w	lr, r3, #16
 800029c:	44e6      	add	lr, ip
 800029e:	ea4f 1c12 	mov.w	ip, r2, lsr #4
 80002a2:	461a      	mov	r2, r3
 80002a4:	e9c2 5500 	strd	r5, r5, [r2]
 80002a8:	e9c2 5502 	strd	r5, r5, [r2, #8]
 80002ac:	3210      	adds	r2, #16
 80002ae:	4572      	cmp	r2, lr
 80002b0:	d1f8      	bne.n	80002a4 <memset+0x44>
 80002b2:	f10c 0201 	add.w	r2, ip, #1
 80002b6:	f014 0f0c 	tst.w	r4, #12
 80002ba:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80002be:	f004 0c0f 	and.w	ip, r4, #15
 80002c2:	d013      	beq.n	80002ec <memset+0x8c>
 80002c4:	f1ac 0304 	sub.w	r3, ip, #4
 80002c8:	f023 0303 	bic.w	r3, r3, #3
 80002cc:	3304      	adds	r3, #4
 80002ce:	4413      	add	r3, r2
 80002d0:	f842 5b04 	str.w	r5, [r2], #4
 80002d4:	4293      	cmp	r3, r2
 80002d6:	d1fb      	bne.n	80002d0 <memset+0x70>
 80002d8:	f00c 0403 	and.w	r4, ip, #3
 80002dc:	b12c      	cbz	r4, 80002ea <memset+0x8a>
 80002de:	b2c9      	uxtb	r1, r1
 80002e0:	441c      	add	r4, r3
 80002e2:	f803 1b01 	strb.w	r1, [r3], #1
 80002e6:	42a3      	cmp	r3, r4
 80002e8:	d1fb      	bne.n	80002e2 <memset+0x82>
 80002ea:	bd30      	pop	{r4, r5, pc}
 80002ec:	4664      	mov	r4, ip
 80002ee:	4613      	mov	r3, r2
 80002f0:	2c00      	cmp	r4, #0
 80002f2:	d1f4      	bne.n	80002de <memset+0x7e>
 80002f4:	e7f9      	b.n	80002ea <memset+0x8a>
 80002f6:	4603      	mov	r3, r0
 80002f8:	4614      	mov	r4, r2
 80002fa:	e7c0      	b.n	800027e <memset+0x1e>
 80002fc:	461a      	mov	r2, r3
 80002fe:	46a4      	mov	ip, r4
 8000300:	e7e0      	b.n	80002c4 <memset+0x64>
 8000302:	bf00      	nop

08000304 <handleCmd>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void handleCmd(uint8_t *RX_Buffer) {
 8000304:	b580      	push	{r7, lr}
 8000306:	b084      	sub	sp, #16
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < BUFF_SIZE; i++) {
 800030c:	2300      	movs	r3, #0
 800030e:	60fb      	str	r3, [r7, #12]
 8000310:	e018      	b.n	8000344 <handleCmd+0x40>
	    if (RX_Buffer[i] == "A" || RX_Buffer[i] == "@") {
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	687a      	ldr	r2, [r7, #4]
 8000316:	4413      	add	r3, r2
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	461a      	mov	r2, r3
 800031c:	4b0d      	ldr	r3, [pc, #52]	@ (8000354 <handleCmd+0x50>)
 800031e:	429a      	cmp	r2, r3
 8000320:	d007      	beq.n	8000332 <handleCmd+0x2e>
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	687a      	ldr	r2, [r7, #4]
 8000326:	4413      	add	r3, r2
 8000328:	781b      	ldrb	r3, [r3, #0]
 800032a:	461a      	mov	r2, r3
 800032c:	4b0a      	ldr	r3, [pc, #40]	@ (8000358 <handleCmd+0x54>)
 800032e:	429a      	cmp	r2, r3
 8000330:	d105      	bne.n	800033e <handleCmd+0x3a>
	    	// turn on led
	    	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
 8000332:	2201      	movs	r2, #1
 8000334:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000338:	4808      	ldr	r0, [pc, #32]	@ (800035c <handleCmd+0x58>)
 800033a:	f000 fd25 	bl	8000d88 <HAL_GPIO_WritePin>
	for(int i = 0; i < BUFF_SIZE; i++) {
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	3301      	adds	r3, #1
 8000342:	60fb      	str	r3, [r7, #12]
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	2b07      	cmp	r3, #7
 8000348:	dde3      	ble.n	8000312 <handleCmd+0xe>

	    if (RX_Buffer[i] == "B") {
	    	// turn off led
	    }
	}
}
 800034a:	bf00      	nop
 800034c:	bf00      	nop
 800034e:	3710      	adds	r7, #16
 8000350:	46bd      	mov	sp, r7
 8000352:	bd80      	pop	{r7, pc}
 8000354:	08002cf0 	.word	0x08002cf0
 8000358:	08002cf4 	.word	0x08002cf4
 800035c:	48001000 	.word	0x48001000

08000360 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000366:	f000 fa49 	bl	80007fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800036a:	f000 f819 	bl	80003a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800036e:	f000 f897 	bl	80004a0 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000372:	f000 f85b 	bl	800042c <MX_SPI2_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t RX_Buffer[BUFF_SIZE];
  memset(RX_Buffer, 0, sizeof(RX_Buffer));
 8000376:	463b      	mov	r3, r7
 8000378:	2208      	movs	r2, #8
 800037a:	2100      	movs	r1, #0
 800037c:	4618      	mov	r0, r3
 800037e:	f7ff ff6f 	bl	8000260 <memset>

  while (1)
  {

	  HAL_SPI_Receive(&hspi2, RX_Buffer, sizeof(RX_Buffer), HAL_MAX_DELAY);
 8000382:	4639      	mov	r1, r7
 8000384:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000388:	2208      	movs	r2, #8
 800038a:	4804      	ldr	r0, [pc, #16]	@ (800039c <main+0x3c>)
 800038c:	f001 ff8f 	bl	80022ae <HAL_SPI_Receive>
//	  char* str = (char*)RX_Buffer;
//	  ITMPrint(str);
	  handleCmd(RX_Buffer);
 8000390:	463b      	mov	r3, r7
 8000392:	4618      	mov	r0, r3
 8000394:	f7ff ffb6 	bl	8000304 <handleCmd>
	  HAL_SPI_Receive(&hspi2, RX_Buffer, sizeof(RX_Buffer), HAL_MAX_DELAY);
 8000398:	bf00      	nop
 800039a:	e7f2      	b.n	8000382 <main+0x22>
 800039c:	20000028 	.word	0x20000028

080003a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b090      	sub	sp, #64	@ 0x40
 80003a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003a6:	f107 0318 	add.w	r3, r7, #24
 80003aa:	2228      	movs	r2, #40	@ 0x28
 80003ac:	2100      	movs	r1, #0
 80003ae:	4618      	mov	r0, r3
 80003b0:	f7ff ff56 	bl	8000260 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003b4:	1d3b      	adds	r3, r7, #4
 80003b6:	2200      	movs	r2, #0
 80003b8:	601a      	str	r2, [r3, #0]
 80003ba:	605a      	str	r2, [r3, #4]
 80003bc:	609a      	str	r2, [r3, #8]
 80003be:	60da      	str	r2, [r3, #12]
 80003c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003c2:	2301      	movs	r3, #1
 80003c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80003c6:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80003ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003cc:	2300      	movs	r3, #0
 80003ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003d0:	2301      	movs	r3, #1
 80003d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003d4:	2302      	movs	r3, #2
 80003d6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80003dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80003de:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80003e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003e4:	f107 0318 	add.w	r3, r7, #24
 80003e8:	4618      	mov	r0, r3
 80003ea:	f000 fce5 	bl	8000db8 <HAL_RCC_OscConfig>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d001      	beq.n	80003f8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003f4:	f000 f908 	bl	8000608 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003f8:	230f      	movs	r3, #15
 80003fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003fc:	2302      	movs	r3, #2
 80003fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000400:	2300      	movs	r3, #0
 8000402:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000404:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000408:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800040a:	2300      	movs	r3, #0
 800040c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800040e:	1d3b      	adds	r3, r7, #4
 8000410:	2101      	movs	r1, #1
 8000412:	4618      	mov	r0, r3
 8000414:	f001 fcde 	bl	8001dd4 <HAL_RCC_ClockConfig>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800041e:	f000 f8f3 	bl	8000608 <Error_Handler>
  }
}
 8000422:	bf00      	nop
 8000424:	3740      	adds	r7, #64	@ 0x40
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
	...

0800042c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000430:	4b19      	ldr	r3, [pc, #100]	@ (8000498 <MX_SPI2_Init+0x6c>)
 8000432:	4a1a      	ldr	r2, [pc, #104]	@ (800049c <MX_SPI2_Init+0x70>)
 8000434:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000436:	4b18      	ldr	r3, [pc, #96]	@ (8000498 <MX_SPI2_Init+0x6c>)
 8000438:	2200      	movs	r2, #0
 800043a:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800043c:	4b16      	ldr	r3, [pc, #88]	@ (8000498 <MX_SPI2_Init+0x6c>)
 800043e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000442:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000444:	4b14      	ldr	r3, [pc, #80]	@ (8000498 <MX_SPI2_Init+0x6c>)
 8000446:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800044a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800044c:	4b12      	ldr	r3, [pc, #72]	@ (8000498 <MX_SPI2_Init+0x6c>)
 800044e:	2200      	movs	r2, #0
 8000450:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000452:	4b11      	ldr	r3, [pc, #68]	@ (8000498 <MX_SPI2_Init+0x6c>)
 8000454:	2200      	movs	r2, #0
 8000456:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8000458:	4b0f      	ldr	r3, [pc, #60]	@ (8000498 <MX_SPI2_Init+0x6c>)
 800045a:	2200      	movs	r2, #0
 800045c:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800045e:	4b0e      	ldr	r3, [pc, #56]	@ (8000498 <MX_SPI2_Init+0x6c>)
 8000460:	2200      	movs	r2, #0
 8000462:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000464:	4b0c      	ldr	r3, [pc, #48]	@ (8000498 <MX_SPI2_Init+0x6c>)
 8000466:	2200      	movs	r2, #0
 8000468:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800046a:	4b0b      	ldr	r3, [pc, #44]	@ (8000498 <MX_SPI2_Init+0x6c>)
 800046c:	2200      	movs	r2, #0
 800046e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000470:	4b09      	ldr	r3, [pc, #36]	@ (8000498 <MX_SPI2_Init+0x6c>)
 8000472:	2207      	movs	r2, #7
 8000474:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000476:	4b08      	ldr	r3, [pc, #32]	@ (8000498 <MX_SPI2_Init+0x6c>)
 8000478:	2200      	movs	r2, #0
 800047a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800047c:	4b06      	ldr	r3, [pc, #24]	@ (8000498 <MX_SPI2_Init+0x6c>)
 800047e:	2200      	movs	r2, #0
 8000480:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000482:	4805      	ldr	r0, [pc, #20]	@ (8000498 <MX_SPI2_Init+0x6c>)
 8000484:	f001 fe68 	bl	8002158 <HAL_SPI_Init>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d001      	beq.n	8000492 <MX_SPI2_Init+0x66>
  {
    Error_Handler();
 800048e:	f000 f8bb 	bl	8000608 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000492:	bf00      	nop
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	20000028 	.word	0x20000028
 800049c:	40003800 	.word	0x40003800

080004a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b08a      	sub	sp, #40	@ 0x28
 80004a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a6:	f107 0314 	add.w	r3, r7, #20
 80004aa:	2200      	movs	r2, #0
 80004ac:	601a      	str	r2, [r3, #0]
 80004ae:	605a      	str	r2, [r3, #4]
 80004b0:	609a      	str	r2, [r3, #8]
 80004b2:	60da      	str	r2, [r3, #12]
 80004b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004b6:	4b51      	ldr	r3, [pc, #324]	@ (80005fc <MX_GPIO_Init+0x15c>)
 80004b8:	695b      	ldr	r3, [r3, #20]
 80004ba:	4a50      	ldr	r2, [pc, #320]	@ (80005fc <MX_GPIO_Init+0x15c>)
 80004bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80004c0:	6153      	str	r3, [r2, #20]
 80004c2:	4b4e      	ldr	r3, [pc, #312]	@ (80005fc <MX_GPIO_Init+0x15c>)
 80004c4:	695b      	ldr	r3, [r3, #20]
 80004c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80004ca:	613b      	str	r3, [r7, #16]
 80004cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ce:	4b4b      	ldr	r3, [pc, #300]	@ (80005fc <MX_GPIO_Init+0x15c>)
 80004d0:	695b      	ldr	r3, [r3, #20]
 80004d2:	4a4a      	ldr	r2, [pc, #296]	@ (80005fc <MX_GPIO_Init+0x15c>)
 80004d4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80004d8:	6153      	str	r3, [r2, #20]
 80004da:	4b48      	ldr	r3, [pc, #288]	@ (80005fc <MX_GPIO_Init+0x15c>)
 80004dc:	695b      	ldr	r3, [r3, #20]
 80004de:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80004e2:	60fb      	str	r3, [r7, #12]
 80004e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004e6:	4b45      	ldr	r3, [pc, #276]	@ (80005fc <MX_GPIO_Init+0x15c>)
 80004e8:	695b      	ldr	r3, [r3, #20]
 80004ea:	4a44      	ldr	r2, [pc, #272]	@ (80005fc <MX_GPIO_Init+0x15c>)
 80004ec:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80004f0:	6153      	str	r3, [r2, #20]
 80004f2:	4b42      	ldr	r3, [pc, #264]	@ (80005fc <MX_GPIO_Init+0x15c>)
 80004f4:	695b      	ldr	r3, [r3, #20]
 80004f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80004fa:	60bb      	str	r3, [r7, #8]
 80004fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fe:	4b3f      	ldr	r3, [pc, #252]	@ (80005fc <MX_GPIO_Init+0x15c>)
 8000500:	695b      	ldr	r3, [r3, #20]
 8000502:	4a3e      	ldr	r2, [pc, #248]	@ (80005fc <MX_GPIO_Init+0x15c>)
 8000504:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000508:	6153      	str	r3, [r2, #20]
 800050a:	4b3c      	ldr	r3, [pc, #240]	@ (80005fc <MX_GPIO_Init+0x15c>)
 800050c:	695b      	ldr	r3, [r3, #20]
 800050e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000512:	607b      	str	r3, [r7, #4]
 8000514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000516:	4b39      	ldr	r3, [pc, #228]	@ (80005fc <MX_GPIO_Init+0x15c>)
 8000518:	695b      	ldr	r3, [r3, #20]
 800051a:	4a38      	ldr	r2, [pc, #224]	@ (80005fc <MX_GPIO_Init+0x15c>)
 800051c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000520:	6153      	str	r3, [r2, #20]
 8000522:	4b36      	ldr	r3, [pc, #216]	@ (80005fc <MX_GPIO_Init+0x15c>)
 8000524:	695b      	ldr	r3, [r3, #20]
 8000526:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800052a:	603b      	str	r3, [r7, #0]
 800052c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800052e:	2200      	movs	r2, #0
 8000530:	f64f 7108 	movw	r1, #65288	@ 0xff08
 8000534:	4832      	ldr	r0, [pc, #200]	@ (8000600 <MX_GPIO_Init+0x160>)
 8000536:	f000 fc27 	bl	8000d88 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 800053a:	2337      	movs	r3, #55	@ 0x37
 800053c:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800053e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000542:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000544:	2300      	movs	r3, #0
 8000546:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000548:	f107 0314 	add.w	r3, r7, #20
 800054c:	4619      	mov	r1, r3
 800054e:	482c      	ldr	r0, [pc, #176]	@ (8000600 <MX_GPIO_Init+0x160>)
 8000550:	f000 faa0 	bl	8000a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000554:	f64f 7308 	movw	r3, #65288	@ 0xff08
 8000558:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800055a:	2301      	movs	r3, #1
 800055c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055e:	2300      	movs	r3, #0
 8000560:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000562:	2300      	movs	r3, #0
 8000564:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000566:	f107 0314 	add.w	r3, r7, #20
 800056a:	4619      	mov	r1, r3
 800056c:	4824      	ldr	r0, [pc, #144]	@ (8000600 <MX_GPIO_Init+0x160>)
 800056e:	f000 fa91 	bl	8000a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000572:	2301      	movs	r3, #1
 8000574:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000576:	2300      	movs	r3, #0
 8000578:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057a:	2300      	movs	r3, #0
 800057c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800057e:	f107 0314 	add.w	r3, r7, #20
 8000582:	4619      	mov	r1, r3
 8000584:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000588:	f000 fa84 	bl	8000a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MISOA7_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 800058c:	23e0      	movs	r3, #224	@ 0xe0
 800058e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000590:	2302      	movs	r3, #2
 8000592:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000594:	2300      	movs	r3, #0
 8000596:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000598:	2303      	movs	r3, #3
 800059a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800059c:	2305      	movs	r3, #5
 800059e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a0:	f107 0314 	add.w	r3, r7, #20
 80005a4:	4619      	mov	r1, r3
 80005a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005aa:	f000 fa73 	bl	8000a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : DM_Pin DP_Pin */
  GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80005ae:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80005b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005b4:	2302      	movs	r3, #2
 80005b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b8:	2300      	movs	r3, #0
 80005ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005bc:	2303      	movs	r3, #3
 80005be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80005c0:	230e      	movs	r3, #14
 80005c2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c4:	f107 0314 	add.w	r3, r7, #20
 80005c8:	4619      	mov	r1, r3
 80005ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005ce:	f000 fa61 	bl	8000a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80005d2:	23c0      	movs	r3, #192	@ 0xc0
 80005d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005d6:	2312      	movs	r3, #18
 80005d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005da:	2301      	movs	r3, #1
 80005dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005de:	2303      	movs	r3, #3
 80005e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80005e2:	2304      	movs	r3, #4
 80005e4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005e6:	f107 0314 	add.w	r3, r7, #20
 80005ea:	4619      	mov	r1, r3
 80005ec:	4805      	ldr	r0, [pc, #20]	@ (8000604 <MX_GPIO_Init+0x164>)
 80005ee:	f000 fa51 	bl	8000a94 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005f2:	bf00      	nop
 80005f4:	3728      	adds	r7, #40	@ 0x28
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	40021000 	.word	0x40021000
 8000600:	48001000 	.word	0x48001000
 8000604:	48000400 	.word	0x48000400

08000608 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800060c:	b672      	cpsid	i
}
 800060e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000610:	bf00      	nop
 8000612:	e7fd      	b.n	8000610 <Error_Handler+0x8>

08000614 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800061a:	4b0f      	ldr	r3, [pc, #60]	@ (8000658 <HAL_MspInit+0x44>)
 800061c:	699b      	ldr	r3, [r3, #24]
 800061e:	4a0e      	ldr	r2, [pc, #56]	@ (8000658 <HAL_MspInit+0x44>)
 8000620:	f043 0301 	orr.w	r3, r3, #1
 8000624:	6193      	str	r3, [r2, #24]
 8000626:	4b0c      	ldr	r3, [pc, #48]	@ (8000658 <HAL_MspInit+0x44>)
 8000628:	699b      	ldr	r3, [r3, #24]
 800062a:	f003 0301 	and.w	r3, r3, #1
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000632:	4b09      	ldr	r3, [pc, #36]	@ (8000658 <HAL_MspInit+0x44>)
 8000634:	69db      	ldr	r3, [r3, #28]
 8000636:	4a08      	ldr	r2, [pc, #32]	@ (8000658 <HAL_MspInit+0x44>)
 8000638:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800063c:	61d3      	str	r3, [r2, #28]
 800063e:	4b06      	ldr	r3, [pc, #24]	@ (8000658 <HAL_MspInit+0x44>)
 8000640:	69db      	ldr	r3, [r3, #28]
 8000642:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000646:	603b      	str	r3, [r7, #0]
 8000648:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800064a:	2007      	movs	r0, #7
 800064c:	f000 f9ee 	bl	8000a2c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000650:	bf00      	nop
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40021000 	.word	0x40021000

0800065c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b08a      	sub	sp, #40	@ 0x28
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000664:	f107 0314 	add.w	r3, r7, #20
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a26      	ldr	r2, [pc, #152]	@ (8000714 <HAL_SPI_MspInit+0xb8>)
 800067a:	4293      	cmp	r3, r2
 800067c:	d145      	bne.n	800070a <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800067e:	4b26      	ldr	r3, [pc, #152]	@ (8000718 <HAL_SPI_MspInit+0xbc>)
 8000680:	69db      	ldr	r3, [r3, #28]
 8000682:	4a25      	ldr	r2, [pc, #148]	@ (8000718 <HAL_SPI_MspInit+0xbc>)
 8000684:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000688:	61d3      	str	r3, [r2, #28]
 800068a:	4b23      	ldr	r3, [pc, #140]	@ (8000718 <HAL_SPI_MspInit+0xbc>)
 800068c:	69db      	ldr	r3, [r3, #28]
 800068e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000692:	613b      	str	r3, [r7, #16]
 8000694:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000696:	4b20      	ldr	r3, [pc, #128]	@ (8000718 <HAL_SPI_MspInit+0xbc>)
 8000698:	695b      	ldr	r3, [r3, #20]
 800069a:	4a1f      	ldr	r2, [pc, #124]	@ (8000718 <HAL_SPI_MspInit+0xbc>)
 800069c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80006a0:	6153      	str	r3, [r2, #20]
 80006a2:	4b1d      	ldr	r3, [pc, #116]	@ (8000718 <HAL_SPI_MspInit+0xbc>)
 80006a4:	695b      	ldr	r3, [r3, #20]
 80006a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000718 <HAL_SPI_MspInit+0xbc>)
 80006b0:	695b      	ldr	r3, [r3, #20]
 80006b2:	4a19      	ldr	r2, [pc, #100]	@ (8000718 <HAL_SPI_MspInit+0xbc>)
 80006b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80006b8:	6153      	str	r3, [r2, #20]
 80006ba:	4b17      	ldr	r3, [pc, #92]	@ (8000718 <HAL_SPI_MspInit+0xbc>)
 80006bc:	695b      	ldr	r3, [r3, #20]
 80006be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PF9     ------> SPI2_SCK
    PB12     ------> SPI2_NSS
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80006ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006cc:	2302      	movs	r3, #2
 80006ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006d4:	2303      	movs	r3, #3
 80006d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80006d8:	2305      	movs	r3, #5
 80006da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80006dc:	f107 0314 	add.w	r3, r7, #20
 80006e0:	4619      	mov	r1, r3
 80006e2:	480e      	ldr	r0, [pc, #56]	@ (800071c <HAL_SPI_MspInit+0xc0>)
 80006e4:	f000 f9d6 	bl	8000a94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_15;
 80006e8:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 80006ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ee:	2302      	movs	r3, #2
 80006f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006f6:	2303      	movs	r3, #3
 80006f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80006fa:	2305      	movs	r3, #5
 80006fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006fe:	f107 0314 	add.w	r3, r7, #20
 8000702:	4619      	mov	r1, r3
 8000704:	4806      	ldr	r0, [pc, #24]	@ (8000720 <HAL_SPI_MspInit+0xc4>)
 8000706:	f000 f9c5 	bl	8000a94 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 800070a:	bf00      	nop
 800070c:	3728      	adds	r7, #40	@ 0x28
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40003800 	.word	0x40003800
 8000718:	40021000 	.word	0x40021000
 800071c:	48001400 	.word	0x48001400
 8000720:	48000400 	.word	0x48000400

08000724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000728:	bf00      	nop
 800072a:	e7fd      	b.n	8000728 <NMI_Handler+0x4>

0800072c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000730:	bf00      	nop
 8000732:	e7fd      	b.n	8000730 <HardFault_Handler+0x4>

08000734 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000738:	bf00      	nop
 800073a:	e7fd      	b.n	8000738 <MemManage_Handler+0x4>

0800073c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000740:	bf00      	nop
 8000742:	e7fd      	b.n	8000740 <BusFault_Handler+0x4>

08000744 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000748:	bf00      	nop
 800074a:	e7fd      	b.n	8000748 <UsageFault_Handler+0x4>

0800074c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000750:	bf00      	nop
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr

0800075a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800075e:	bf00      	nop
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr

08000768 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800076c:	bf00      	nop
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr

08000776 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000776:	b580      	push	{r7, lr}
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800077a:	f000 f885 	bl	8000888 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
	...

08000784 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000788:	4b06      	ldr	r3, [pc, #24]	@ (80007a4 <SystemInit+0x20>)
 800078a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800078e:	4a05      	ldr	r2, [pc, #20]	@ (80007a4 <SystemInit+0x20>)
 8000790:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000794:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000798:	bf00      	nop
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	e000ed00 	.word	0xe000ed00

080007a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80007e0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80007ac:	f7ff ffea 	bl	8000784 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007b0:	480c      	ldr	r0, [pc, #48]	@ (80007e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80007b2:	490d      	ldr	r1, [pc, #52]	@ (80007e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007b4:	4a0d      	ldr	r2, [pc, #52]	@ (80007ec <LoopForever+0xe>)
  movs r3, #0
 80007b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007b8:	e002      	b.n	80007c0 <LoopCopyDataInit>

080007ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007be:	3304      	adds	r3, #4

080007c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007c4:	d3f9      	bcc.n	80007ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007c6:	4a0a      	ldr	r2, [pc, #40]	@ (80007f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007c8:	4c0a      	ldr	r4, [pc, #40]	@ (80007f4 <LoopForever+0x16>)
  movs r3, #0
 80007ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007cc:	e001      	b.n	80007d2 <LoopFillZerobss>

080007ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007d0:	3204      	adds	r2, #4

080007d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007d4:	d3fb      	bcc.n	80007ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007d6:	f7ff fd1b 	bl	8000210 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007da:	f7ff fdc1 	bl	8000360 <main>

080007de <LoopForever>:

LoopForever:
    b LoopForever
 80007de:	e7fe      	b.n	80007de <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007e0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80007e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007e8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007ec:	08002d30 	.word	0x08002d30
  ldr r2, =_sbss
 80007f0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007f4:	20000090 	.word	0x20000090

080007f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007f8:	e7fe      	b.n	80007f8 <ADC1_2_IRQHandler>
	...

080007fc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000800:	4b08      	ldr	r3, [pc, #32]	@ (8000824 <HAL_Init+0x28>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a07      	ldr	r2, [pc, #28]	@ (8000824 <HAL_Init+0x28>)
 8000806:	f043 0310 	orr.w	r3, r3, #16
 800080a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800080c:	2003      	movs	r0, #3
 800080e:	f000 f90d 	bl	8000a2c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000812:	2000      	movs	r0, #0
 8000814:	f000 f808 	bl	8000828 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000818:	f7ff fefc 	bl	8000614 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800081c:	2300      	movs	r3, #0
}
 800081e:	4618      	mov	r0, r3
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40022000 	.word	0x40022000

08000828 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000830:	4b12      	ldr	r3, [pc, #72]	@ (800087c <HAL_InitTick+0x54>)
 8000832:	681a      	ldr	r2, [r3, #0]
 8000834:	4b12      	ldr	r3, [pc, #72]	@ (8000880 <HAL_InitTick+0x58>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	4619      	mov	r1, r3
 800083a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800083e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000842:	fbb2 f3f3 	udiv	r3, r2, r3
 8000846:	4618      	mov	r0, r3
 8000848:	f000 f917 	bl	8000a7a <HAL_SYSTICK_Config>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000852:	2301      	movs	r3, #1
 8000854:	e00e      	b.n	8000874 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	2b0f      	cmp	r3, #15
 800085a:	d80a      	bhi.n	8000872 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800085c:	2200      	movs	r2, #0
 800085e:	6879      	ldr	r1, [r7, #4]
 8000860:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000864:	f000 f8ed 	bl	8000a42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000868:	4a06      	ldr	r2, [pc, #24]	@ (8000884 <HAL_InitTick+0x5c>)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800086e:	2300      	movs	r3, #0
 8000870:	e000      	b.n	8000874 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000872:	2301      	movs	r3, #1
}
 8000874:	4618      	mov	r0, r3
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000000 	.word	0x20000000
 8000880:	20000008 	.word	0x20000008
 8000884:	20000004 	.word	0x20000004

08000888 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800088c:	4b06      	ldr	r3, [pc, #24]	@ (80008a8 <HAL_IncTick+0x20>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	461a      	mov	r2, r3
 8000892:	4b06      	ldr	r3, [pc, #24]	@ (80008ac <HAL_IncTick+0x24>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4413      	add	r3, r2
 8000898:	4a04      	ldr	r2, [pc, #16]	@ (80008ac <HAL_IncTick+0x24>)
 800089a:	6013      	str	r3, [r2, #0]
}
 800089c:	bf00      	nop
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	20000008 	.word	0x20000008
 80008ac:	2000008c 	.word	0x2000008c

080008b0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  return uwTick;  
 80008b4:	4b03      	ldr	r3, [pc, #12]	@ (80008c4 <HAL_GetTick+0x14>)
 80008b6:	681b      	ldr	r3, [r3, #0]
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	2000008c 	.word	0x2000008c

080008c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b085      	sub	sp, #20
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	f003 0307 	and.w	r3, r3, #7
 80008d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008d8:	4b0c      	ldr	r3, [pc, #48]	@ (800090c <__NVIC_SetPriorityGrouping+0x44>)
 80008da:	68db      	ldr	r3, [r3, #12]
 80008dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008de:	68ba      	ldr	r2, [r7, #8]
 80008e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80008e4:	4013      	ands	r3, r2
 80008e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80008f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008fa:	4a04      	ldr	r2, [pc, #16]	@ (800090c <__NVIC_SetPriorityGrouping+0x44>)
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	60d3      	str	r3, [r2, #12]
}
 8000900:	bf00      	nop
 8000902:	3714      	adds	r7, #20
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr
 800090c:	e000ed00 	.word	0xe000ed00

08000910 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000914:	4b04      	ldr	r3, [pc, #16]	@ (8000928 <__NVIC_GetPriorityGrouping+0x18>)
 8000916:	68db      	ldr	r3, [r3, #12]
 8000918:	0a1b      	lsrs	r3, r3, #8
 800091a:	f003 0307 	and.w	r3, r3, #7
}
 800091e:	4618      	mov	r0, r3
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr
 8000928:	e000ed00 	.word	0xe000ed00

0800092c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	6039      	str	r1, [r7, #0]
 8000936:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093c:	2b00      	cmp	r3, #0
 800093e:	db0a      	blt.n	8000956 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	b2da      	uxtb	r2, r3
 8000944:	490c      	ldr	r1, [pc, #48]	@ (8000978 <__NVIC_SetPriority+0x4c>)
 8000946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094a:	0112      	lsls	r2, r2, #4
 800094c:	b2d2      	uxtb	r2, r2
 800094e:	440b      	add	r3, r1
 8000950:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000954:	e00a      	b.n	800096c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	b2da      	uxtb	r2, r3
 800095a:	4908      	ldr	r1, [pc, #32]	@ (800097c <__NVIC_SetPriority+0x50>)
 800095c:	79fb      	ldrb	r3, [r7, #7]
 800095e:	f003 030f 	and.w	r3, r3, #15
 8000962:	3b04      	subs	r3, #4
 8000964:	0112      	lsls	r2, r2, #4
 8000966:	b2d2      	uxtb	r2, r2
 8000968:	440b      	add	r3, r1
 800096a:	761a      	strb	r2, [r3, #24]
}
 800096c:	bf00      	nop
 800096e:	370c      	adds	r7, #12
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr
 8000978:	e000e100 	.word	0xe000e100
 800097c:	e000ed00 	.word	0xe000ed00

08000980 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000980:	b480      	push	{r7}
 8000982:	b089      	sub	sp, #36	@ 0x24
 8000984:	af00      	add	r7, sp, #0
 8000986:	60f8      	str	r0, [r7, #12]
 8000988:	60b9      	str	r1, [r7, #8]
 800098a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	f003 0307 	and.w	r3, r3, #7
 8000992:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000994:	69fb      	ldr	r3, [r7, #28]
 8000996:	f1c3 0307 	rsb	r3, r3, #7
 800099a:	2b04      	cmp	r3, #4
 800099c:	bf28      	it	cs
 800099e:	2304      	movcs	r3, #4
 80009a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009a2:	69fb      	ldr	r3, [r7, #28]
 80009a4:	3304      	adds	r3, #4
 80009a6:	2b06      	cmp	r3, #6
 80009a8:	d902      	bls.n	80009b0 <NVIC_EncodePriority+0x30>
 80009aa:	69fb      	ldr	r3, [r7, #28]
 80009ac:	3b03      	subs	r3, #3
 80009ae:	e000      	b.n	80009b2 <NVIC_EncodePriority+0x32>
 80009b0:	2300      	movs	r3, #0
 80009b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80009b8:	69bb      	ldr	r3, [r7, #24]
 80009ba:	fa02 f303 	lsl.w	r3, r2, r3
 80009be:	43da      	mvns	r2, r3
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	401a      	ands	r2, r3
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009c8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	fa01 f303 	lsl.w	r3, r1, r3
 80009d2:	43d9      	mvns	r1, r3
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d8:	4313      	orrs	r3, r2
         );
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3724      	adds	r7, #36	@ 0x24
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
	...

080009e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	3b01      	subs	r3, #1
 80009f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80009f8:	d301      	bcc.n	80009fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009fa:	2301      	movs	r3, #1
 80009fc:	e00f      	b.n	8000a1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000a28 <SysTick_Config+0x40>)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	3b01      	subs	r3, #1
 8000a04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a06:	210f      	movs	r1, #15
 8000a08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a0c:	f7ff ff8e 	bl	800092c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a10:	4b05      	ldr	r3, [pc, #20]	@ (8000a28 <SysTick_Config+0x40>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a16:	4b04      	ldr	r3, [pc, #16]	@ (8000a28 <SysTick_Config+0x40>)
 8000a18:	2207      	movs	r2, #7
 8000a1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a1c:	2300      	movs	r3, #0
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	e000e010 	.word	0xe000e010

08000a2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a34:	6878      	ldr	r0, [r7, #4]
 8000a36:	f7ff ff47 	bl	80008c8 <__NVIC_SetPriorityGrouping>
}
 8000a3a:	bf00      	nop
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a42:	b580      	push	{r7, lr}
 8000a44:	b086      	sub	sp, #24
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	4603      	mov	r3, r0
 8000a4a:	60b9      	str	r1, [r7, #8]
 8000a4c:	607a      	str	r2, [r7, #4]
 8000a4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a50:	2300      	movs	r3, #0
 8000a52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a54:	f7ff ff5c 	bl	8000910 <__NVIC_GetPriorityGrouping>
 8000a58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a5a:	687a      	ldr	r2, [r7, #4]
 8000a5c:	68b9      	ldr	r1, [r7, #8]
 8000a5e:	6978      	ldr	r0, [r7, #20]
 8000a60:	f7ff ff8e 	bl	8000980 <NVIC_EncodePriority>
 8000a64:	4602      	mov	r2, r0
 8000a66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a6a:	4611      	mov	r1, r2
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff ff5d 	bl	800092c <__NVIC_SetPriority>
}
 8000a72:	bf00      	nop
 8000a74:	3718      	adds	r7, #24
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b082      	sub	sp, #8
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a82:	6878      	ldr	r0, [r7, #4]
 8000a84:	f7ff ffb0 	bl	80009e8 <SysTick_Config>
 8000a88:	4603      	mov	r3, r0
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
	...

08000a94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b087      	sub	sp, #28
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
 8000a9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aa2:	e154      	b.n	8000d4e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	2101      	movs	r1, #1
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	f000 8146 	beq.w	8000d48 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	f003 0303 	and.w	r3, r3, #3
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d005      	beq.n	8000ad4 <HAL_GPIO_Init+0x40>
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	f003 0303 	and.w	r3, r3, #3
 8000ad0:	2b02      	cmp	r3, #2
 8000ad2:	d130      	bne.n	8000b36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	689b      	ldr	r3, [r3, #8]
 8000ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	005b      	lsls	r3, r3, #1
 8000ade:	2203      	movs	r2, #3
 8000ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae4:	43db      	mvns	r3, r3
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	4013      	ands	r3, r2
 8000aea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	68da      	ldr	r2, [r3, #12]
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	005b      	lsls	r3, r3, #1
 8000af4:	fa02 f303 	lsl.w	r3, r2, r3
 8000af8:	693a      	ldr	r2, [r7, #16]
 8000afa:	4313      	orrs	r3, r2
 8000afc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	693a      	ldr	r2, [r7, #16]
 8000b02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b12:	43db      	mvns	r3, r3
 8000b14:	693a      	ldr	r2, [r7, #16]
 8000b16:	4013      	ands	r3, r2
 8000b18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	091b      	lsrs	r3, r3, #4
 8000b20:	f003 0201 	and.w	r2, r3, #1
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	f003 0303 	and.w	r3, r3, #3
 8000b3e:	2b03      	cmp	r3, #3
 8000b40:	d017      	beq.n	8000b72 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	68db      	ldr	r3, [r3, #12]
 8000b46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	005b      	lsls	r3, r3, #1
 8000b4c:	2203      	movs	r2, #3
 8000b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b52:	43db      	mvns	r3, r3
 8000b54:	693a      	ldr	r2, [r7, #16]
 8000b56:	4013      	ands	r3, r2
 8000b58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	689a      	ldr	r2, [r3, #8]
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	005b      	lsls	r3, r3, #1
 8000b62:	fa02 f303 	lsl.w	r3, r2, r3
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	693a      	ldr	r2, [r7, #16]
 8000b70:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	f003 0303 	and.w	r3, r3, #3
 8000b7a:	2b02      	cmp	r3, #2
 8000b7c:	d123      	bne.n	8000bc6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	08da      	lsrs	r2, r3, #3
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	3208      	adds	r2, #8
 8000b86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	f003 0307 	and.w	r3, r3, #7
 8000b92:	009b      	lsls	r3, r3, #2
 8000b94:	220f      	movs	r2, #15
 8000b96:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9a:	43db      	mvns	r3, r3
 8000b9c:	693a      	ldr	r2, [r7, #16]
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	691a      	ldr	r2, [r3, #16]
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	f003 0307 	and.w	r3, r3, #7
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb2:	693a      	ldr	r2, [r7, #16]
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	08da      	lsrs	r2, r3, #3
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	3208      	adds	r2, #8
 8000bc0:	6939      	ldr	r1, [r7, #16]
 8000bc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	005b      	lsls	r3, r3, #1
 8000bd0:	2203      	movs	r2, #3
 8000bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd6:	43db      	mvns	r3, r3
 8000bd8:	693a      	ldr	r2, [r7, #16]
 8000bda:	4013      	ands	r3, r2
 8000bdc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	f003 0203 	and.w	r2, r3, #3
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	fa02 f303 	lsl.w	r3, r2, r3
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	f000 80a0 	beq.w	8000d48 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c08:	4b58      	ldr	r3, [pc, #352]	@ (8000d6c <HAL_GPIO_Init+0x2d8>)
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	4a57      	ldr	r2, [pc, #348]	@ (8000d6c <HAL_GPIO_Init+0x2d8>)
 8000c0e:	f043 0301 	orr.w	r3, r3, #1
 8000c12:	6193      	str	r3, [r2, #24]
 8000c14:	4b55      	ldr	r3, [pc, #340]	@ (8000d6c <HAL_GPIO_Init+0x2d8>)
 8000c16:	699b      	ldr	r3, [r3, #24]
 8000c18:	f003 0301 	and.w	r3, r3, #1
 8000c1c:	60bb      	str	r3, [r7, #8]
 8000c1e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c20:	4a53      	ldr	r2, [pc, #332]	@ (8000d70 <HAL_GPIO_Init+0x2dc>)
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	089b      	lsrs	r3, r3, #2
 8000c26:	3302      	adds	r3, #2
 8000c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	f003 0303 	and.w	r3, r3, #3
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	220f      	movs	r2, #15
 8000c38:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3c:	43db      	mvns	r3, r3
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	4013      	ands	r3, r2
 8000c42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000c4a:	d019      	beq.n	8000c80 <HAL_GPIO_Init+0x1ec>
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	4a49      	ldr	r2, [pc, #292]	@ (8000d74 <HAL_GPIO_Init+0x2e0>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d013      	beq.n	8000c7c <HAL_GPIO_Init+0x1e8>
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	4a48      	ldr	r2, [pc, #288]	@ (8000d78 <HAL_GPIO_Init+0x2e4>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d00d      	beq.n	8000c78 <HAL_GPIO_Init+0x1e4>
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	4a47      	ldr	r2, [pc, #284]	@ (8000d7c <HAL_GPIO_Init+0x2e8>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d007      	beq.n	8000c74 <HAL_GPIO_Init+0x1e0>
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	4a46      	ldr	r2, [pc, #280]	@ (8000d80 <HAL_GPIO_Init+0x2ec>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d101      	bne.n	8000c70 <HAL_GPIO_Init+0x1dc>
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	e008      	b.n	8000c82 <HAL_GPIO_Init+0x1ee>
 8000c70:	2305      	movs	r3, #5
 8000c72:	e006      	b.n	8000c82 <HAL_GPIO_Init+0x1ee>
 8000c74:	2303      	movs	r3, #3
 8000c76:	e004      	b.n	8000c82 <HAL_GPIO_Init+0x1ee>
 8000c78:	2302      	movs	r3, #2
 8000c7a:	e002      	b.n	8000c82 <HAL_GPIO_Init+0x1ee>
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	e000      	b.n	8000c82 <HAL_GPIO_Init+0x1ee>
 8000c80:	2300      	movs	r3, #0
 8000c82:	697a      	ldr	r2, [r7, #20]
 8000c84:	f002 0203 	and.w	r2, r2, #3
 8000c88:	0092      	lsls	r2, r2, #2
 8000c8a:	4093      	lsls	r3, r2
 8000c8c:	693a      	ldr	r2, [r7, #16]
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c92:	4937      	ldr	r1, [pc, #220]	@ (8000d70 <HAL_GPIO_Init+0x2dc>)
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	089b      	lsrs	r3, r3, #2
 8000c98:	3302      	adds	r3, #2
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ca0:	4b38      	ldr	r3, [pc, #224]	@ (8000d84 <HAL_GPIO_Init+0x2f0>)
 8000ca2:	689b      	ldr	r3, [r3, #8]
 8000ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	43db      	mvns	r3, r3
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	4013      	ands	r3, r2
 8000cae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d003      	beq.n	8000cc4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000cbc:	693a      	ldr	r2, [r7, #16]
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000cc4:	4a2f      	ldr	r2, [pc, #188]	@ (8000d84 <HAL_GPIO_Init+0x2f0>)
 8000cc6:	693b      	ldr	r3, [r7, #16]
 8000cc8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000cca:	4b2e      	ldr	r3, [pc, #184]	@ (8000d84 <HAL_GPIO_Init+0x2f0>)
 8000ccc:	68db      	ldr	r3, [r3, #12]
 8000cce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	43db      	mvns	r3, r3
 8000cd4:	693a      	ldr	r2, [r7, #16]
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d003      	beq.n	8000cee <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	4313      	orrs	r3, r2
 8000cec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000cee:	4a25      	ldr	r2, [pc, #148]	@ (8000d84 <HAL_GPIO_Init+0x2f0>)
 8000cf0:	693b      	ldr	r3, [r7, #16]
 8000cf2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000cf4:	4b23      	ldr	r3, [pc, #140]	@ (8000d84 <HAL_GPIO_Init+0x2f0>)
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	43db      	mvns	r3, r3
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	4013      	ands	r3, r2
 8000d02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d003      	beq.n	8000d18 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000d10:	693a      	ldr	r2, [r7, #16]
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d18:	4a1a      	ldr	r2, [pc, #104]	@ (8000d84 <HAL_GPIO_Init+0x2f0>)
 8000d1a:	693b      	ldr	r3, [r7, #16]
 8000d1c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d1e:	4b19      	ldr	r3, [pc, #100]	@ (8000d84 <HAL_GPIO_Init+0x2f0>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	43db      	mvns	r3, r3
 8000d28:	693a      	ldr	r2, [r7, #16]
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d003      	beq.n	8000d42 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d42:	4a10      	ldr	r2, [pc, #64]	@ (8000d84 <HAL_GPIO_Init+0x2f0>)
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	fa22 f303 	lsr.w	r3, r2, r3
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	f47f aea3 	bne.w	8000aa4 <HAL_GPIO_Init+0x10>
  }
}
 8000d5e:	bf00      	nop
 8000d60:	bf00      	nop
 8000d62:	371c      	adds	r7, #28
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	40010000 	.word	0x40010000
 8000d74:	48000400 	.word	0x48000400
 8000d78:	48000800 	.word	0x48000800
 8000d7c:	48000c00 	.word	0x48000c00
 8000d80:	48001000 	.word	0x48001000
 8000d84:	40010400 	.word	0x40010400

08000d88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	460b      	mov	r3, r1
 8000d92:	807b      	strh	r3, [r7, #2]
 8000d94:	4613      	mov	r3, r2
 8000d96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d98:	787b      	ldrb	r3, [r7, #1]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d003      	beq.n	8000da6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d9e:	887a      	ldrh	r2, [r7, #2]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000da4:	e002      	b.n	8000dac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000da6:	887a      	ldrh	r2, [r7, #2]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000dc4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000dc8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000dca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000dce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d102      	bne.n	8000dde <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	f000 bff4 	b.w	8001dc6 <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000de2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	f000 816d 	beq.w	80010ce <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000df4:	4bb4      	ldr	r3, [pc, #720]	@ (80010c8 <HAL_RCC_OscConfig+0x310>)
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f003 030c 	and.w	r3, r3, #12
 8000dfc:	2b04      	cmp	r3, #4
 8000dfe:	d00c      	beq.n	8000e1a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e00:	4bb1      	ldr	r3, [pc, #708]	@ (80010c8 <HAL_RCC_OscConfig+0x310>)
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f003 030c 	and.w	r3, r3, #12
 8000e08:	2b08      	cmp	r3, #8
 8000e0a:	d157      	bne.n	8000ebc <HAL_RCC_OscConfig+0x104>
 8000e0c:	4bae      	ldr	r3, [pc, #696]	@ (80010c8 <HAL_RCC_OscConfig+0x310>)
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e18:	d150      	bne.n	8000ebc <HAL_RCC_OscConfig+0x104>
 8000e1a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e1e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e22:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8000e26:	fa93 f3a3 	rbit	r3, r3
 8000e2a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000e2e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e32:	fab3 f383 	clz	r3, r3
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	2b3f      	cmp	r3, #63	@ 0x3f
 8000e3a:	d802      	bhi.n	8000e42 <HAL_RCC_OscConfig+0x8a>
 8000e3c:	4ba2      	ldr	r3, [pc, #648]	@ (80010c8 <HAL_RCC_OscConfig+0x310>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	e015      	b.n	8000e6e <HAL_RCC_OscConfig+0xb6>
 8000e42:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e46:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e4a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8000e4e:	fa93 f3a3 	rbit	r3, r3
 8000e52:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000e56:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e5a:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000e5e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8000e62:	fa93 f3a3 	rbit	r3, r3
 8000e66:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8000e6a:	4b97      	ldr	r3, [pc, #604]	@ (80010c8 <HAL_RCC_OscConfig+0x310>)
 8000e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e6e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000e72:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8000e76:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8000e7a:	fa92 f2a2 	rbit	r2, r2
 8000e7e:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8000e82:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8000e86:	fab2 f282 	clz	r2, r2
 8000e8a:	b2d2      	uxtb	r2, r2
 8000e8c:	f042 0220 	orr.w	r2, r2, #32
 8000e90:	b2d2      	uxtb	r2, r2
 8000e92:	f002 021f 	and.w	r2, r2, #31
 8000e96:	2101      	movs	r1, #1
 8000e98:	fa01 f202 	lsl.w	r2, r1, r2
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	f000 8114 	beq.w	80010cc <HAL_RCC_OscConfig+0x314>
 8000ea4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000ea8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	f040 810b 	bne.w	80010cc <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	f000 bf85 	b.w	8001dc6 <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ebc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000ec0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ecc:	d106      	bne.n	8000edc <HAL_RCC_OscConfig+0x124>
 8000ece:	4b7e      	ldr	r3, [pc, #504]	@ (80010c8 <HAL_RCC_OscConfig+0x310>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a7d      	ldr	r2, [pc, #500]	@ (80010c8 <HAL_RCC_OscConfig+0x310>)
 8000ed4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ed8:	6013      	str	r3, [r2, #0]
 8000eda:	e036      	b.n	8000f4a <HAL_RCC_OscConfig+0x192>
 8000edc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000ee0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d10c      	bne.n	8000f06 <HAL_RCC_OscConfig+0x14e>
 8000eec:	4b76      	ldr	r3, [pc, #472]	@ (80010c8 <HAL_RCC_OscConfig+0x310>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a75      	ldr	r2, [pc, #468]	@ (80010c8 <HAL_RCC_OscConfig+0x310>)
 8000ef2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ef6:	6013      	str	r3, [r2, #0]
 8000ef8:	4b73      	ldr	r3, [pc, #460]	@ (80010c8 <HAL_RCC_OscConfig+0x310>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a72      	ldr	r2, [pc, #456]	@ (80010c8 <HAL_RCC_OscConfig+0x310>)
 8000efe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f02:	6013      	str	r3, [r2, #0]
 8000f04:	e021      	b.n	8000f4a <HAL_RCC_OscConfig+0x192>
 8000f06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f0a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000f16:	d10c      	bne.n	8000f32 <HAL_RCC_OscConfig+0x17a>
 8000f18:	4b6b      	ldr	r3, [pc, #428]	@ (80010c8 <HAL_RCC_OscConfig+0x310>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a6a      	ldr	r2, [pc, #424]	@ (80010c8 <HAL_RCC_OscConfig+0x310>)
 8000f1e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f22:	6013      	str	r3, [r2, #0]
 8000f24:	4b68      	ldr	r3, [pc, #416]	@ (80010c8 <HAL_RCC_OscConfig+0x310>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a67      	ldr	r2, [pc, #412]	@ (80010c8 <HAL_RCC_OscConfig+0x310>)
 8000f2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f2e:	6013      	str	r3, [r2, #0]
 8000f30:	e00b      	b.n	8000f4a <HAL_RCC_OscConfig+0x192>
 8000f32:	4b65      	ldr	r3, [pc, #404]	@ (80010c8 <HAL_RCC_OscConfig+0x310>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a64      	ldr	r2, [pc, #400]	@ (80010c8 <HAL_RCC_OscConfig+0x310>)
 8000f38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f3c:	6013      	str	r3, [r2, #0]
 8000f3e:	4b62      	ldr	r3, [pc, #392]	@ (80010c8 <HAL_RCC_OscConfig+0x310>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a61      	ldr	r2, [pc, #388]	@ (80010c8 <HAL_RCC_OscConfig+0x310>)
 8000f44:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f48:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f4a:	4b5f      	ldr	r3, [pc, #380]	@ (80010c8 <HAL_RCC_OscConfig+0x310>)
 8000f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f4e:	f023 020f 	bic.w	r2, r3, #15
 8000f52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f56:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	495a      	ldr	r1, [pc, #360]	@ (80010c8 <HAL_RCC_OscConfig+0x310>)
 8000f60:	4313      	orrs	r3, r2
 8000f62:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f68:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d054      	beq.n	800101e <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f74:	f7ff fc9c 	bl	80008b0 <HAL_GetTick>
 8000f78:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f7c:	e00a      	b.n	8000f94 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f7e:	f7ff fc97 	bl	80008b0 <HAL_GetTick>
 8000f82:	4602      	mov	r2, r0
 8000f84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	2b64      	cmp	r3, #100	@ 0x64
 8000f8c:	d902      	bls.n	8000f94 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	f000 bf19 	b.w	8001dc6 <HAL_RCC_OscConfig+0x100e>
 8000f94:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f98:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f9c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8000fa0:	fa93 f3a3 	rbit	r3, r3
 8000fa4:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8000fa8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fac:	fab3 f383 	clz	r3, r3
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	2b3f      	cmp	r3, #63	@ 0x3f
 8000fb4:	d802      	bhi.n	8000fbc <HAL_RCC_OscConfig+0x204>
 8000fb6:	4b44      	ldr	r3, [pc, #272]	@ (80010c8 <HAL_RCC_OscConfig+0x310>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	e015      	b.n	8000fe8 <HAL_RCC_OscConfig+0x230>
 8000fbc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000fc0:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fc4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8000fc8:	fa93 f3a3 	rbit	r3, r3
 8000fcc:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8000fd0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000fd4:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8000fd8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8000fdc:	fa93 f3a3 	rbit	r3, r3
 8000fe0:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8000fe4:	4b38      	ldr	r3, [pc, #224]	@ (80010c8 <HAL_RCC_OscConfig+0x310>)
 8000fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fe8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000fec:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8000ff0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8000ff4:	fa92 f2a2 	rbit	r2, r2
 8000ff8:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8000ffc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001000:	fab2 f282 	clz	r2, r2
 8001004:	b2d2      	uxtb	r2, r2
 8001006:	f042 0220 	orr.w	r2, r2, #32
 800100a:	b2d2      	uxtb	r2, r2
 800100c:	f002 021f 	and.w	r2, r2, #31
 8001010:	2101      	movs	r1, #1
 8001012:	fa01 f202 	lsl.w	r2, r1, r2
 8001016:	4013      	ands	r3, r2
 8001018:	2b00      	cmp	r3, #0
 800101a:	d0b0      	beq.n	8000f7e <HAL_RCC_OscConfig+0x1c6>
 800101c:	e057      	b.n	80010ce <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800101e:	f7ff fc47 	bl	80008b0 <HAL_GetTick>
 8001022:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001026:	e00a      	b.n	800103e <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001028:	f7ff fc42 	bl	80008b0 <HAL_GetTick>
 800102c:	4602      	mov	r2, r0
 800102e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	2b64      	cmp	r3, #100	@ 0x64
 8001036:	d902      	bls.n	800103e <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8001038:	2303      	movs	r3, #3
 800103a:	f000 bec4 	b.w	8001dc6 <HAL_RCC_OscConfig+0x100e>
 800103e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001042:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001046:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800104a:	fa93 f3a3 	rbit	r3, r3
 800104e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001052:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001056:	fab3 f383 	clz	r3, r3
 800105a:	b2db      	uxtb	r3, r3
 800105c:	2b3f      	cmp	r3, #63	@ 0x3f
 800105e:	d802      	bhi.n	8001066 <HAL_RCC_OscConfig+0x2ae>
 8001060:	4b19      	ldr	r3, [pc, #100]	@ (80010c8 <HAL_RCC_OscConfig+0x310>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	e015      	b.n	8001092 <HAL_RCC_OscConfig+0x2da>
 8001066:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800106a:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800106e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001072:	fa93 f3a3 	rbit	r3, r3
 8001076:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800107a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800107e:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001082:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001086:	fa93 f3a3 	rbit	r3, r3
 800108a:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 800108e:	4b0e      	ldr	r3, [pc, #56]	@ (80010c8 <HAL_RCC_OscConfig+0x310>)
 8001090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001092:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001096:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 800109a:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800109e:	fa92 f2a2 	rbit	r2, r2
 80010a2:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80010a6:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80010aa:	fab2 f282 	clz	r2, r2
 80010ae:	b2d2      	uxtb	r2, r2
 80010b0:	f042 0220 	orr.w	r2, r2, #32
 80010b4:	b2d2      	uxtb	r2, r2
 80010b6:	f002 021f 	and.w	r2, r2, #31
 80010ba:	2101      	movs	r1, #1
 80010bc:	fa01 f202 	lsl.w	r2, r1, r2
 80010c0:	4013      	ands	r3, r2
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d1b0      	bne.n	8001028 <HAL_RCC_OscConfig+0x270>
 80010c6:	e002      	b.n	80010ce <HAL_RCC_OscConfig+0x316>
 80010c8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80010d2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f003 0302 	and.w	r3, r3, #2
 80010de:	2b00      	cmp	r3, #0
 80010e0:	f000 816c 	beq.w	80013bc <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80010e4:	4bcc      	ldr	r3, [pc, #816]	@ (8001418 <HAL_RCC_OscConfig+0x660>)
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f003 030c 	and.w	r3, r3, #12
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d00b      	beq.n	8001108 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80010f0:	4bc9      	ldr	r3, [pc, #804]	@ (8001418 <HAL_RCC_OscConfig+0x660>)
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f003 030c 	and.w	r3, r3, #12
 80010f8:	2b08      	cmp	r3, #8
 80010fa:	d16d      	bne.n	80011d8 <HAL_RCC_OscConfig+0x420>
 80010fc:	4bc6      	ldr	r3, [pc, #792]	@ (8001418 <HAL_RCC_OscConfig+0x660>)
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001104:	2b00      	cmp	r3, #0
 8001106:	d167      	bne.n	80011d8 <HAL_RCC_OscConfig+0x420>
 8001108:	2302      	movs	r3, #2
 800110a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800110e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001112:	fa93 f3a3 	rbit	r3, r3
 8001116:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800111a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800111e:	fab3 f383 	clz	r3, r3
 8001122:	b2db      	uxtb	r3, r3
 8001124:	2b3f      	cmp	r3, #63	@ 0x3f
 8001126:	d802      	bhi.n	800112e <HAL_RCC_OscConfig+0x376>
 8001128:	4bbb      	ldr	r3, [pc, #748]	@ (8001418 <HAL_RCC_OscConfig+0x660>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	e013      	b.n	8001156 <HAL_RCC_OscConfig+0x39e>
 800112e:	2302      	movs	r3, #2
 8001130:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001134:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001138:	fa93 f3a3 	rbit	r3, r3
 800113c:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001140:	2302      	movs	r3, #2
 8001142:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001146:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800114a:	fa93 f3a3 	rbit	r3, r3
 800114e:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001152:	4bb1      	ldr	r3, [pc, #708]	@ (8001418 <HAL_RCC_OscConfig+0x660>)
 8001154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001156:	2202      	movs	r2, #2
 8001158:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 800115c:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001160:	fa92 f2a2 	rbit	r2, r2
 8001164:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001168:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800116c:	fab2 f282 	clz	r2, r2
 8001170:	b2d2      	uxtb	r2, r2
 8001172:	f042 0220 	orr.w	r2, r2, #32
 8001176:	b2d2      	uxtb	r2, r2
 8001178:	f002 021f 	and.w	r2, r2, #31
 800117c:	2101      	movs	r1, #1
 800117e:	fa01 f202 	lsl.w	r2, r1, r2
 8001182:	4013      	ands	r3, r2
 8001184:	2b00      	cmp	r3, #0
 8001186:	d00a      	beq.n	800119e <HAL_RCC_OscConfig+0x3e6>
 8001188:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800118c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	691b      	ldr	r3, [r3, #16]
 8001194:	2b01      	cmp	r3, #1
 8001196:	d002      	beq.n	800119e <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	f000 be14 	b.w	8001dc6 <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800119e:	4b9e      	ldr	r3, [pc, #632]	@ (8001418 <HAL_RCC_OscConfig+0x660>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011aa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	695b      	ldr	r3, [r3, #20]
 80011b2:	21f8      	movs	r1, #248	@ 0xf8
 80011b4:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b8:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80011bc:	fa91 f1a1 	rbit	r1, r1
 80011c0:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80011c4:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80011c8:	fab1 f181 	clz	r1, r1
 80011cc:	b2c9      	uxtb	r1, r1
 80011ce:	408b      	lsls	r3, r1
 80011d0:	4991      	ldr	r1, [pc, #580]	@ (8001418 <HAL_RCC_OscConfig+0x660>)
 80011d2:	4313      	orrs	r3, r2
 80011d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011d6:	e0f1      	b.n	80013bc <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011dc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	691b      	ldr	r3, [r3, #16]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	f000 8083 	beq.w	80012f0 <HAL_RCC_OscConfig+0x538>
 80011ea:	2301      	movs	r3, #1
 80011ec:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011f0:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80011f4:	fa93 f3a3 	rbit	r3, r3
 80011f8:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80011fc:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001200:	fab3 f383 	clz	r3, r3
 8001204:	b2db      	uxtb	r3, r3
 8001206:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800120a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	461a      	mov	r2, r3
 8001212:	2301      	movs	r3, #1
 8001214:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001216:	f7ff fb4b 	bl	80008b0 <HAL_GetTick>
 800121a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800121e:	e00a      	b.n	8001236 <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001220:	f7ff fb46 	bl	80008b0 <HAL_GetTick>
 8001224:	4602      	mov	r2, r0
 8001226:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	2b02      	cmp	r3, #2
 800122e:	d902      	bls.n	8001236 <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8001230:	2303      	movs	r3, #3
 8001232:	f000 bdc8 	b.w	8001dc6 <HAL_RCC_OscConfig+0x100e>
 8001236:	2302      	movs	r3, #2
 8001238:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800123c:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001240:	fa93 f3a3 	rbit	r3, r3
 8001244:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001248:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800124c:	fab3 f383 	clz	r3, r3
 8001250:	b2db      	uxtb	r3, r3
 8001252:	2b3f      	cmp	r3, #63	@ 0x3f
 8001254:	d802      	bhi.n	800125c <HAL_RCC_OscConfig+0x4a4>
 8001256:	4b70      	ldr	r3, [pc, #448]	@ (8001418 <HAL_RCC_OscConfig+0x660>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	e013      	b.n	8001284 <HAL_RCC_OscConfig+0x4cc>
 800125c:	2302      	movs	r3, #2
 800125e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001262:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001266:	fa93 f3a3 	rbit	r3, r3
 800126a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800126e:	2302      	movs	r3, #2
 8001270:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001274:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001278:	fa93 f3a3 	rbit	r3, r3
 800127c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001280:	4b65      	ldr	r3, [pc, #404]	@ (8001418 <HAL_RCC_OscConfig+0x660>)
 8001282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001284:	2202      	movs	r2, #2
 8001286:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800128a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800128e:	fa92 f2a2 	rbit	r2, r2
 8001292:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001296:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800129a:	fab2 f282 	clz	r2, r2
 800129e:	b2d2      	uxtb	r2, r2
 80012a0:	f042 0220 	orr.w	r2, r2, #32
 80012a4:	b2d2      	uxtb	r2, r2
 80012a6:	f002 021f 	and.w	r2, r2, #31
 80012aa:	2101      	movs	r1, #1
 80012ac:	fa01 f202 	lsl.w	r2, r1, r2
 80012b0:	4013      	ands	r3, r2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d0b4      	beq.n	8001220 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012b6:	4b58      	ldr	r3, [pc, #352]	@ (8001418 <HAL_RCC_OscConfig+0x660>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012c2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	695b      	ldr	r3, [r3, #20]
 80012ca:	21f8      	movs	r1, #248	@ 0xf8
 80012cc:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012d0:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80012d4:	fa91 f1a1 	rbit	r1, r1
 80012d8:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80012dc:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80012e0:	fab1 f181 	clz	r1, r1
 80012e4:	b2c9      	uxtb	r1, r1
 80012e6:	408b      	lsls	r3, r1
 80012e8:	494b      	ldr	r1, [pc, #300]	@ (8001418 <HAL_RCC_OscConfig+0x660>)
 80012ea:	4313      	orrs	r3, r2
 80012ec:	600b      	str	r3, [r1, #0]
 80012ee:	e065      	b.n	80013bc <HAL_RCC_OscConfig+0x604>
 80012f0:	2301      	movs	r3, #1
 80012f2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80012fa:	fa93 f3a3 	rbit	r3, r3
 80012fe:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001302:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001306:	fab3 f383 	clz	r3, r3
 800130a:	b2db      	uxtb	r3, r3
 800130c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001310:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	461a      	mov	r2, r3
 8001318:	2300      	movs	r3, #0
 800131a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131c:	f7ff fac8 	bl	80008b0 <HAL_GetTick>
 8001320:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001324:	e00a      	b.n	800133c <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001326:	f7ff fac3 	bl	80008b0 <HAL_GetTick>
 800132a:	4602      	mov	r2, r0
 800132c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	2b02      	cmp	r3, #2
 8001334:	d902      	bls.n	800133c <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	f000 bd45 	b.w	8001dc6 <HAL_RCC_OscConfig+0x100e>
 800133c:	2302      	movs	r3, #2
 800133e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001342:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001346:	fa93 f3a3 	rbit	r3, r3
 800134a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800134e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001352:	fab3 f383 	clz	r3, r3
 8001356:	b2db      	uxtb	r3, r3
 8001358:	2b3f      	cmp	r3, #63	@ 0x3f
 800135a:	d802      	bhi.n	8001362 <HAL_RCC_OscConfig+0x5aa>
 800135c:	4b2e      	ldr	r3, [pc, #184]	@ (8001418 <HAL_RCC_OscConfig+0x660>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	e013      	b.n	800138a <HAL_RCC_OscConfig+0x5d2>
 8001362:	2302      	movs	r3, #2
 8001364:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001368:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800136c:	fa93 f3a3 	rbit	r3, r3
 8001370:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001374:	2302      	movs	r3, #2
 8001376:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800137a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800137e:	fa93 f3a3 	rbit	r3, r3
 8001382:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001386:	4b24      	ldr	r3, [pc, #144]	@ (8001418 <HAL_RCC_OscConfig+0x660>)
 8001388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800138a:	2202      	movs	r2, #2
 800138c:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001390:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001394:	fa92 f2a2 	rbit	r2, r2
 8001398:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 800139c:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80013a0:	fab2 f282 	clz	r2, r2
 80013a4:	b2d2      	uxtb	r2, r2
 80013a6:	f042 0220 	orr.w	r2, r2, #32
 80013aa:	b2d2      	uxtb	r2, r2
 80013ac:	f002 021f 	and.w	r2, r2, #31
 80013b0:	2101      	movs	r1, #1
 80013b2:	fa01 f202 	lsl.w	r2, r1, r2
 80013b6:	4013      	ands	r3, r2
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d1b4      	bne.n	8001326 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013c0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0308 	and.w	r3, r3, #8
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	f000 8115 	beq.w	80015fc <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013d6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	699b      	ldr	r3, [r3, #24]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d07e      	beq.n	80014e0 <HAL_RCC_OscConfig+0x728>
 80013e2:	2301      	movs	r3, #1
 80013e4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013e8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80013ec:	fa93 f3a3 	rbit	r3, r3
 80013f0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80013f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013f8:	fab3 f383 	clz	r3, r3
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	461a      	mov	r2, r3
 8001400:	4b06      	ldr	r3, [pc, #24]	@ (800141c <HAL_RCC_OscConfig+0x664>)
 8001402:	4413      	add	r3, r2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	461a      	mov	r2, r3
 8001408:	2301      	movs	r3, #1
 800140a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800140c:	f7ff fa50 	bl	80008b0 <HAL_GetTick>
 8001410:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001414:	e00f      	b.n	8001436 <HAL_RCC_OscConfig+0x67e>
 8001416:	bf00      	nop
 8001418:	40021000 	.word	0x40021000
 800141c:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001420:	f7ff fa46 	bl	80008b0 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d902      	bls.n	8001436 <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	f000 bcc8 	b.w	8001dc6 <HAL_RCC_OscConfig+0x100e>
 8001436:	2302      	movs	r3, #2
 8001438:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800143c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001440:	fa93 f3a3 	rbit	r3, r3
 8001444:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001448:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800144c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001450:	2202      	movs	r2, #2
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001458:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	fa93 f2a3 	rbit	r2, r3
 8001462:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001466:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001470:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001474:	2202      	movs	r2, #2
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800147c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	fa93 f2a3 	rbit	r2, r3
 8001486:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800148a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800148e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001490:	4bb0      	ldr	r3, [pc, #704]	@ (8001754 <HAL_RCC_OscConfig+0x99c>)
 8001492:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001494:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001498:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800149c:	2102      	movs	r1, #2
 800149e:	6019      	str	r1, [r3, #0]
 80014a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014a4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	fa93 f1a3 	rbit	r1, r3
 80014ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014b2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80014b6:	6019      	str	r1, [r3, #0]
  return result;
 80014b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014bc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	fab3 f383 	clz	r3, r3
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	f003 031f 	and.w	r3, r3, #31
 80014d2:	2101      	movs	r1, #1
 80014d4:	fa01 f303 	lsl.w	r3, r1, r3
 80014d8:	4013      	ands	r3, r2
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d0a0      	beq.n	8001420 <HAL_RCC_OscConfig+0x668>
 80014de:	e08d      	b.n	80015fc <HAL_RCC_OscConfig+0x844>
 80014e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014e4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80014e8:	2201      	movs	r2, #1
 80014ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014f0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	fa93 f2a3 	rbit	r2, r3
 80014fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014fe:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001502:	601a      	str	r2, [r3, #0]
  return result;
 8001504:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001508:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800150c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800150e:	fab3 f383 	clz	r3, r3
 8001512:	b2db      	uxtb	r3, r3
 8001514:	461a      	mov	r2, r3
 8001516:	4b90      	ldr	r3, [pc, #576]	@ (8001758 <HAL_RCC_OscConfig+0x9a0>)
 8001518:	4413      	add	r3, r2
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	461a      	mov	r2, r3
 800151e:	2300      	movs	r3, #0
 8001520:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001522:	f7ff f9c5 	bl	80008b0 <HAL_GetTick>
 8001526:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800152a:	e00a      	b.n	8001542 <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800152c:	f7ff f9c0 	bl	80008b0 <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b02      	cmp	r3, #2
 800153a:	d902      	bls.n	8001542 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	f000 bc42 	b.w	8001dc6 <HAL_RCC_OscConfig+0x100e>
 8001542:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001546:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800154a:	2202      	movs	r2, #2
 800154c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800154e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001552:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	fa93 f2a3 	rbit	r2, r3
 800155c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001560:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800156a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800156e:	2202      	movs	r2, #2
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001576:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	fa93 f2a3 	rbit	r2, r3
 8001580:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001584:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800158e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001592:	2202      	movs	r2, #2
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800159a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	fa93 f2a3 	rbit	r2, r3
 80015a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015a8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80015ac:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015ae:	4b69      	ldr	r3, [pc, #420]	@ (8001754 <HAL_RCC_OscConfig+0x99c>)
 80015b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80015b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015b6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80015ba:	2102      	movs	r1, #2
 80015bc:	6019      	str	r1, [r3, #0]
 80015be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015c2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	fa93 f1a3 	rbit	r1, r3
 80015cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015d0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80015d4:	6019      	str	r1, [r3, #0]
  return result;
 80015d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015da:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	fab3 f383 	clz	r3, r3
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	f003 031f 	and.w	r3, r3, #31
 80015f0:	2101      	movs	r1, #1
 80015f2:	fa01 f303 	lsl.w	r3, r1, r3
 80015f6:	4013      	ands	r3, r2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d197      	bne.n	800152c <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001600:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0304 	and.w	r3, r3, #4
 800160c:	2b00      	cmp	r3, #0
 800160e:	f000 819e 	beq.w	800194e <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001612:	2300      	movs	r3, #0
 8001614:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001618:	4b4e      	ldr	r3, [pc, #312]	@ (8001754 <HAL_RCC_OscConfig+0x99c>)
 800161a:	69db      	ldr	r3, [r3, #28]
 800161c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d116      	bne.n	8001652 <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001624:	4b4b      	ldr	r3, [pc, #300]	@ (8001754 <HAL_RCC_OscConfig+0x99c>)
 8001626:	69db      	ldr	r3, [r3, #28]
 8001628:	4a4a      	ldr	r2, [pc, #296]	@ (8001754 <HAL_RCC_OscConfig+0x99c>)
 800162a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800162e:	61d3      	str	r3, [r2, #28]
 8001630:	4b48      	ldr	r3, [pc, #288]	@ (8001754 <HAL_RCC_OscConfig+0x99c>)
 8001632:	69db      	ldr	r3, [r3, #28]
 8001634:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001638:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800163c:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001646:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800164a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800164c:	2301      	movs	r3, #1
 800164e:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001652:	4b42      	ldr	r3, [pc, #264]	@ (800175c <HAL_RCC_OscConfig+0x9a4>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800165a:	2b00      	cmp	r3, #0
 800165c:	d11a      	bne.n	8001694 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800165e:	4b3f      	ldr	r3, [pc, #252]	@ (800175c <HAL_RCC_OscConfig+0x9a4>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a3e      	ldr	r2, [pc, #248]	@ (800175c <HAL_RCC_OscConfig+0x9a4>)
 8001664:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001668:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800166a:	f7ff f921 	bl	80008b0 <HAL_GetTick>
 800166e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001672:	e009      	b.n	8001688 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001674:	f7ff f91c 	bl	80008b0 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b64      	cmp	r3, #100	@ 0x64
 8001682:	d901      	bls.n	8001688 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e39e      	b.n	8001dc6 <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001688:	4b34      	ldr	r3, [pc, #208]	@ (800175c <HAL_RCC_OscConfig+0x9a4>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001690:	2b00      	cmp	r3, #0
 8001692:	d0ef      	beq.n	8001674 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001694:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001698:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d106      	bne.n	80016b2 <HAL_RCC_OscConfig+0x8fa>
 80016a4:	4b2b      	ldr	r3, [pc, #172]	@ (8001754 <HAL_RCC_OscConfig+0x99c>)
 80016a6:	6a1b      	ldr	r3, [r3, #32]
 80016a8:	4a2a      	ldr	r2, [pc, #168]	@ (8001754 <HAL_RCC_OscConfig+0x99c>)
 80016aa:	f043 0301 	orr.w	r3, r3, #1
 80016ae:	6213      	str	r3, [r2, #32]
 80016b0:	e035      	b.n	800171e <HAL_RCC_OscConfig+0x966>
 80016b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016b6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d10c      	bne.n	80016dc <HAL_RCC_OscConfig+0x924>
 80016c2:	4b24      	ldr	r3, [pc, #144]	@ (8001754 <HAL_RCC_OscConfig+0x99c>)
 80016c4:	6a1b      	ldr	r3, [r3, #32]
 80016c6:	4a23      	ldr	r2, [pc, #140]	@ (8001754 <HAL_RCC_OscConfig+0x99c>)
 80016c8:	f023 0301 	bic.w	r3, r3, #1
 80016cc:	6213      	str	r3, [r2, #32]
 80016ce:	4b21      	ldr	r3, [pc, #132]	@ (8001754 <HAL_RCC_OscConfig+0x99c>)
 80016d0:	6a1b      	ldr	r3, [r3, #32]
 80016d2:	4a20      	ldr	r2, [pc, #128]	@ (8001754 <HAL_RCC_OscConfig+0x99c>)
 80016d4:	f023 0304 	bic.w	r3, r3, #4
 80016d8:	6213      	str	r3, [r2, #32]
 80016da:	e020      	b.n	800171e <HAL_RCC_OscConfig+0x966>
 80016dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016e0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	2b05      	cmp	r3, #5
 80016ea:	d10c      	bne.n	8001706 <HAL_RCC_OscConfig+0x94e>
 80016ec:	4b19      	ldr	r3, [pc, #100]	@ (8001754 <HAL_RCC_OscConfig+0x99c>)
 80016ee:	6a1b      	ldr	r3, [r3, #32]
 80016f0:	4a18      	ldr	r2, [pc, #96]	@ (8001754 <HAL_RCC_OscConfig+0x99c>)
 80016f2:	f043 0304 	orr.w	r3, r3, #4
 80016f6:	6213      	str	r3, [r2, #32]
 80016f8:	4b16      	ldr	r3, [pc, #88]	@ (8001754 <HAL_RCC_OscConfig+0x99c>)
 80016fa:	6a1b      	ldr	r3, [r3, #32]
 80016fc:	4a15      	ldr	r2, [pc, #84]	@ (8001754 <HAL_RCC_OscConfig+0x99c>)
 80016fe:	f043 0301 	orr.w	r3, r3, #1
 8001702:	6213      	str	r3, [r2, #32]
 8001704:	e00b      	b.n	800171e <HAL_RCC_OscConfig+0x966>
 8001706:	4b13      	ldr	r3, [pc, #76]	@ (8001754 <HAL_RCC_OscConfig+0x99c>)
 8001708:	6a1b      	ldr	r3, [r3, #32]
 800170a:	4a12      	ldr	r2, [pc, #72]	@ (8001754 <HAL_RCC_OscConfig+0x99c>)
 800170c:	f023 0301 	bic.w	r3, r3, #1
 8001710:	6213      	str	r3, [r2, #32]
 8001712:	4b10      	ldr	r3, [pc, #64]	@ (8001754 <HAL_RCC_OscConfig+0x99c>)
 8001714:	6a1b      	ldr	r3, [r3, #32]
 8001716:	4a0f      	ldr	r2, [pc, #60]	@ (8001754 <HAL_RCC_OscConfig+0x99c>)
 8001718:	f023 0304 	bic.w	r3, r3, #4
 800171c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800171e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001722:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	2b00      	cmp	r3, #0
 800172c:	f000 8087 	beq.w	800183e <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001730:	f7ff f8be 	bl	80008b0 <HAL_GetTick>
 8001734:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001738:	e012      	b.n	8001760 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800173a:	f7ff f8b9 	bl	80008b0 <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	f241 3288 	movw	r2, #5000	@ 0x1388
 800174a:	4293      	cmp	r3, r2
 800174c:	d908      	bls.n	8001760 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e339      	b.n	8001dc6 <HAL_RCC_OscConfig+0x100e>
 8001752:	bf00      	nop
 8001754:	40021000 	.word	0x40021000
 8001758:	10908120 	.word	0x10908120
 800175c:	40007000 	.word	0x40007000
 8001760:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001764:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001768:	2202      	movs	r2, #2
 800176a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800176c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001770:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	fa93 f2a3 	rbit	r2, r3
 800177a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800177e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001788:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800178c:	2202      	movs	r2, #2
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001794:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	fa93 f2a3 	rbit	r2, r3
 800179e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017a2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80017a6:	601a      	str	r2, [r3, #0]
  return result;
 80017a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017ac:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80017b0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017b2:	fab3 f383 	clz	r3, r3
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d102      	bne.n	80017c8 <HAL_RCC_OscConfig+0xa10>
 80017c2:	4b98      	ldr	r3, [pc, #608]	@ (8001a24 <HAL_RCC_OscConfig+0xc6c>)
 80017c4:	6a1b      	ldr	r3, [r3, #32]
 80017c6:	e013      	b.n	80017f0 <HAL_RCC_OscConfig+0xa38>
 80017c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017cc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80017d0:	2202      	movs	r2, #2
 80017d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017d8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	fa93 f2a3 	rbit	r2, r3
 80017e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017e6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	4b8d      	ldr	r3, [pc, #564]	@ (8001a24 <HAL_RCC_OscConfig+0xc6c>)
 80017ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017f0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80017f4:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80017f8:	2102      	movs	r1, #2
 80017fa:	6011      	str	r1, [r2, #0]
 80017fc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001800:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001804:	6812      	ldr	r2, [r2, #0]
 8001806:	fa92 f1a2 	rbit	r1, r2
 800180a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800180e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001812:	6011      	str	r1, [r2, #0]
  return result;
 8001814:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001818:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800181c:	6812      	ldr	r2, [r2, #0]
 800181e:	fab2 f282 	clz	r2, r2
 8001822:	b2d2      	uxtb	r2, r2
 8001824:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001828:	b2d2      	uxtb	r2, r2
 800182a:	f002 021f 	and.w	r2, r2, #31
 800182e:	2101      	movs	r1, #1
 8001830:	fa01 f202 	lsl.w	r2, r1, r2
 8001834:	4013      	ands	r3, r2
 8001836:	2b00      	cmp	r3, #0
 8001838:	f43f af7f 	beq.w	800173a <HAL_RCC_OscConfig+0x982>
 800183c:	e07d      	b.n	800193a <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800183e:	f7ff f837 	bl	80008b0 <HAL_GetTick>
 8001842:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001846:	e00b      	b.n	8001860 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001848:	f7ff f832 	bl	80008b0 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001858:	4293      	cmp	r3, r2
 800185a:	d901      	bls.n	8001860 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e2b2      	b.n	8001dc6 <HAL_RCC_OscConfig+0x100e>
 8001860:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001864:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001868:	2202      	movs	r2, #2
 800186a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800186c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001870:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	fa93 f2a3 	rbit	r2, r3
 800187a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800187e:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001888:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800188c:	2202      	movs	r2, #2
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001894:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	fa93 f2a3 	rbit	r2, r3
 800189e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018a2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80018a6:	601a      	str	r2, [r3, #0]
  return result;
 80018a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018ac:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80018b0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018b2:	fab3 f383 	clz	r3, r3
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d102      	bne.n	80018c8 <HAL_RCC_OscConfig+0xb10>
 80018c2:	4b58      	ldr	r3, [pc, #352]	@ (8001a24 <HAL_RCC_OscConfig+0xc6c>)
 80018c4:	6a1b      	ldr	r3, [r3, #32]
 80018c6:	e013      	b.n	80018f0 <HAL_RCC_OscConfig+0xb38>
 80018c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018cc:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80018d0:	2202      	movs	r2, #2
 80018d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018d8:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	fa93 f2a3 	rbit	r2, r3
 80018e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018e6:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	4b4d      	ldr	r3, [pc, #308]	@ (8001a24 <HAL_RCC_OscConfig+0xc6c>)
 80018ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018f0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80018f4:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80018f8:	2102      	movs	r1, #2
 80018fa:	6011      	str	r1, [r2, #0]
 80018fc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001900:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001904:	6812      	ldr	r2, [r2, #0]
 8001906:	fa92 f1a2 	rbit	r1, r2
 800190a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800190e:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001912:	6011      	str	r1, [r2, #0]
  return result;
 8001914:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001918:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800191c:	6812      	ldr	r2, [r2, #0]
 800191e:	fab2 f282 	clz	r2, r2
 8001922:	b2d2      	uxtb	r2, r2
 8001924:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001928:	b2d2      	uxtb	r2, r2
 800192a:	f002 021f 	and.w	r2, r2, #31
 800192e:	2101      	movs	r1, #1
 8001930:	fa01 f202 	lsl.w	r2, r1, r2
 8001934:	4013      	ands	r3, r2
 8001936:	2b00      	cmp	r3, #0
 8001938:	d186      	bne.n	8001848 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800193a:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 800193e:	2b01      	cmp	r3, #1
 8001940:	d105      	bne.n	800194e <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001942:	4b38      	ldr	r3, [pc, #224]	@ (8001a24 <HAL_RCC_OscConfig+0xc6c>)
 8001944:	69db      	ldr	r3, [r3, #28]
 8001946:	4a37      	ldr	r2, [pc, #220]	@ (8001a24 <HAL_RCC_OscConfig+0xc6c>)
 8001948:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800194c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800194e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001952:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	69db      	ldr	r3, [r3, #28]
 800195a:	2b00      	cmp	r3, #0
 800195c:	f000 8232 	beq.w	8001dc4 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001960:	4b30      	ldr	r3, [pc, #192]	@ (8001a24 <HAL_RCC_OscConfig+0xc6c>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f003 030c 	and.w	r3, r3, #12
 8001968:	2b08      	cmp	r3, #8
 800196a:	f000 8201 	beq.w	8001d70 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800196e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001972:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	69db      	ldr	r3, [r3, #28]
 800197a:	2b02      	cmp	r3, #2
 800197c:	f040 8157 	bne.w	8001c2e <HAL_RCC_OscConfig+0xe76>
 8001980:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001984:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001988:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800198c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001992:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	fa93 f2a3 	rbit	r2, r3
 800199c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019a0:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80019a4:	601a      	str	r2, [r3, #0]
  return result;
 80019a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019aa:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80019ae:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019b0:	fab3 f383 	clz	r3, r3
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80019ba:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	461a      	mov	r2, r3
 80019c2:	2300      	movs	r3, #0
 80019c4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c6:	f7fe ff73 	bl	80008b0 <HAL_GetTick>
 80019ca:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ce:	e009      	b.n	80019e4 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019d0:	f7fe ff6e 	bl	80008b0 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d901      	bls.n	80019e4 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e1f0      	b.n	8001dc6 <HAL_RCC_OscConfig+0x100e>
 80019e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019e8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80019ec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019f6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	fa93 f2a3 	rbit	r2, r3
 8001a00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a04:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001a08:	601a      	str	r2, [r3, #0]
  return result;
 8001a0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a0e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001a12:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a14:	fab3 f383 	clz	r3, r3
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a1c:	d804      	bhi.n	8001a28 <HAL_RCC_OscConfig+0xc70>
 8001a1e:	4b01      	ldr	r3, [pc, #4]	@ (8001a24 <HAL_RCC_OscConfig+0xc6c>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	e029      	b.n	8001a78 <HAL_RCC_OscConfig+0xcc0>
 8001a24:	40021000 	.word	0x40021000
 8001a28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a2c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001a30:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a3a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	fa93 f2a3 	rbit	r2, r3
 8001a44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a48:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a52:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001a56:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a60:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	fa93 f2a3 	rbit	r2, r3
 8001a6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a6e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	4bc3      	ldr	r3, [pc, #780]	@ (8001d84 <HAL_RCC_OscConfig+0xfcc>)
 8001a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a78:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a7c:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001a80:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001a84:	6011      	str	r1, [r2, #0]
 8001a86:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a8a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001a8e:	6812      	ldr	r2, [r2, #0]
 8001a90:	fa92 f1a2 	rbit	r1, r2
 8001a94:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a98:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001a9c:	6011      	str	r1, [r2, #0]
  return result;
 8001a9e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001aa2:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001aa6:	6812      	ldr	r2, [r2, #0]
 8001aa8:	fab2 f282 	clz	r2, r2
 8001aac:	b2d2      	uxtb	r2, r2
 8001aae:	f042 0220 	orr.w	r2, r2, #32
 8001ab2:	b2d2      	uxtb	r2, r2
 8001ab4:	f002 021f 	and.w	r2, r2, #31
 8001ab8:	2101      	movs	r1, #1
 8001aba:	fa01 f202 	lsl.w	r2, r1, r2
 8001abe:	4013      	ands	r3, r2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d185      	bne.n	80019d0 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ac4:	4baf      	ldr	r3, [pc, #700]	@ (8001d84 <HAL_RCC_OscConfig+0xfcc>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001acc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ad0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001ad8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001adc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	6a1b      	ldr	r3, [r3, #32]
 8001ae4:	430b      	orrs	r3, r1
 8001ae6:	49a7      	ldr	r1, [pc, #668]	@ (8001d84 <HAL_RCC_OscConfig+0xfcc>)
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	604b      	str	r3, [r1, #4]
 8001aec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001af0:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001af4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001af8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001afe:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	fa93 f2a3 	rbit	r2, r3
 8001b08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b0c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001b10:	601a      	str	r2, [r3, #0]
  return result;
 8001b12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b16:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001b1a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b1c:	fab3 f383 	clz	r3, r3
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001b26:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	2301      	movs	r3, #1
 8001b30:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b32:	f7fe febd 	bl	80008b0 <HAL_GetTick>
 8001b36:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b3a:	e009      	b.n	8001b50 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b3c:	f7fe feb8 	bl	80008b0 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e13a      	b.n	8001dc6 <HAL_RCC_OscConfig+0x100e>
 8001b50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b54:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001b58:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b62:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	fa93 f2a3 	rbit	r2, r3
 8001b6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b70:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001b74:	601a      	str	r2, [r3, #0]
  return result;
 8001b76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b7a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001b7e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b80:	fab3 f383 	clz	r3, r3
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b88:	d802      	bhi.n	8001b90 <HAL_RCC_OscConfig+0xdd8>
 8001b8a:	4b7e      	ldr	r3, [pc, #504]	@ (8001d84 <HAL_RCC_OscConfig+0xfcc>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	e027      	b.n	8001be0 <HAL_RCC_OscConfig+0xe28>
 8001b90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b94:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001b98:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ba2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	fa93 f2a3 	rbit	r2, r3
 8001bac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bb0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bba:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001bbe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bc8:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	fa93 f2a3 	rbit	r2, r3
 8001bd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bd6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	4b69      	ldr	r3, [pc, #420]	@ (8001d84 <HAL_RCC_OscConfig+0xfcc>)
 8001bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001be0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001be4:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001be8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001bec:	6011      	str	r1, [r2, #0]
 8001bee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001bf2:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001bf6:	6812      	ldr	r2, [r2, #0]
 8001bf8:	fa92 f1a2 	rbit	r1, r2
 8001bfc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c00:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001c04:	6011      	str	r1, [r2, #0]
  return result;
 8001c06:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c0a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001c0e:	6812      	ldr	r2, [r2, #0]
 8001c10:	fab2 f282 	clz	r2, r2
 8001c14:	b2d2      	uxtb	r2, r2
 8001c16:	f042 0220 	orr.w	r2, r2, #32
 8001c1a:	b2d2      	uxtb	r2, r2
 8001c1c:	f002 021f 	and.w	r2, r2, #31
 8001c20:	2101      	movs	r1, #1
 8001c22:	fa01 f202 	lsl.w	r2, r1, r2
 8001c26:	4013      	ands	r3, r2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d087      	beq.n	8001b3c <HAL_RCC_OscConfig+0xd84>
 8001c2c:	e0ca      	b.n	8001dc4 <HAL_RCC_OscConfig+0x100c>
 8001c2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c32:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001c36:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001c3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c40:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	fa93 f2a3 	rbit	r2, r3
 8001c4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c4e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001c52:	601a      	str	r2, [r3, #0]
  return result;
 8001c54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c58:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001c5c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c5e:	fab3 f383 	clz	r3, r3
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001c68:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	461a      	mov	r2, r3
 8001c70:	2300      	movs	r3, #0
 8001c72:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c74:	f7fe fe1c 	bl	80008b0 <HAL_GetTick>
 8001c78:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c7c:	e009      	b.n	8001c92 <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c7e:	f7fe fe17 	bl	80008b0 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e099      	b.n	8001dc6 <HAL_RCC_OscConfig+0x100e>
 8001c92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c96:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001c9a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ca4:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	fa93 f2a3 	rbit	r2, r3
 8001cae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cb2:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001cb6:	601a      	str	r2, [r3, #0]
  return result;
 8001cb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cbc:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001cc0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cc2:	fab3 f383 	clz	r3, r3
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	2b3f      	cmp	r3, #63	@ 0x3f
 8001cca:	d802      	bhi.n	8001cd2 <HAL_RCC_OscConfig+0xf1a>
 8001ccc:	4b2d      	ldr	r3, [pc, #180]	@ (8001d84 <HAL_RCC_OscConfig+0xfcc>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	e027      	b.n	8001d22 <HAL_RCC_OscConfig+0xf6a>
 8001cd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cd6:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001cda:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001cde:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ce4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	fa93 f2a3 	rbit	r2, r3
 8001cee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cf2:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cfc:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001d00:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d04:	601a      	str	r2, [r3, #0]
 8001d06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d0a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	fa93 f2a3 	rbit	r2, r3
 8001d14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d18:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	4b19      	ldr	r3, [pc, #100]	@ (8001d84 <HAL_RCC_OscConfig+0xfcc>)
 8001d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d22:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d26:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001d2a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001d2e:	6011      	str	r1, [r2, #0]
 8001d30:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d34:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001d38:	6812      	ldr	r2, [r2, #0]
 8001d3a:	fa92 f1a2 	rbit	r1, r2
 8001d3e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d42:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001d46:	6011      	str	r1, [r2, #0]
  return result;
 8001d48:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d4c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001d50:	6812      	ldr	r2, [r2, #0]
 8001d52:	fab2 f282 	clz	r2, r2
 8001d56:	b2d2      	uxtb	r2, r2
 8001d58:	f042 0220 	orr.w	r2, r2, #32
 8001d5c:	b2d2      	uxtb	r2, r2
 8001d5e:	f002 021f 	and.w	r2, r2, #31
 8001d62:	2101      	movs	r1, #1
 8001d64:	fa01 f202 	lsl.w	r2, r1, r2
 8001d68:	4013      	ands	r3, r2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d187      	bne.n	8001c7e <HAL_RCC_OscConfig+0xec6>
 8001d6e:	e029      	b.n	8001dc4 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d74:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	69db      	ldr	r3, [r3, #28]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d103      	bne.n	8001d88 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e020      	b.n	8001dc6 <HAL_RCC_OscConfig+0x100e>
 8001d84:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d88:	4b11      	ldr	r3, [pc, #68]	@ (8001dd0 <HAL_RCC_OscConfig+0x1018>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d90:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001d94:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001d98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d9c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	6a1b      	ldr	r3, [r3, #32]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d10b      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001da8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001dac:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001db0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001db4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d001      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e000      	b.n	8001dc6 <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40021000 	.word	0x40021000

08001dd4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b09e      	sub	sp, #120	@ 0x78
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001dde:	2300      	movs	r3, #0
 8001de0:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d101      	bne.n	8001dec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e154      	b.n	8002096 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001dec:	4b89      	ldr	r3, [pc, #548]	@ (8002014 <HAL_RCC_ClockConfig+0x240>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0307 	and.w	r3, r3, #7
 8001df4:	683a      	ldr	r2, [r7, #0]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d910      	bls.n	8001e1c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dfa:	4b86      	ldr	r3, [pc, #536]	@ (8002014 <HAL_RCC_ClockConfig+0x240>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f023 0207 	bic.w	r2, r3, #7
 8001e02:	4984      	ldr	r1, [pc, #528]	@ (8002014 <HAL_RCC_ClockConfig+0x240>)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e0a:	4b82      	ldr	r3, [pc, #520]	@ (8002014 <HAL_RCC_ClockConfig+0x240>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0307 	and.w	r3, r3, #7
 8001e12:	683a      	ldr	r2, [r7, #0]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d001      	beq.n	8001e1c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e13c      	b.n	8002096 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d008      	beq.n	8001e3a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e28:	4b7b      	ldr	r3, [pc, #492]	@ (8002018 <HAL_RCC_ClockConfig+0x244>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	4978      	ldr	r1, [pc, #480]	@ (8002018 <HAL_RCC_ClockConfig+0x244>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f000 80cd 	beq.w	8001fe2 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d137      	bne.n	8001ec0 <HAL_RCC_ClockConfig+0xec>
 8001e50:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e54:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001e58:	fa93 f3a3 	rbit	r3, r3
 8001e5c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001e5e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e60:	fab3 f383 	clz	r3, r3
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e68:	d802      	bhi.n	8001e70 <HAL_RCC_ClockConfig+0x9c>
 8001e6a:	4b6b      	ldr	r3, [pc, #428]	@ (8002018 <HAL_RCC_ClockConfig+0x244>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	e00f      	b.n	8001e90 <HAL_RCC_ClockConfig+0xbc>
 8001e70:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e74:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e76:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001e78:	fa93 f3a3 	rbit	r3, r3
 8001e7c:	667b      	str	r3, [r7, #100]	@ 0x64
 8001e7e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e82:	663b      	str	r3, [r7, #96]	@ 0x60
 8001e84:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001e86:	fa93 f3a3 	rbit	r3, r3
 8001e8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001e8c:	4b62      	ldr	r3, [pc, #392]	@ (8002018 <HAL_RCC_ClockConfig+0x244>)
 8001e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e90:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001e94:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001e96:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001e98:	fa92 f2a2 	rbit	r2, r2
 8001e9c:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8001e9e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001ea0:	fab2 f282 	clz	r2, r2
 8001ea4:	b2d2      	uxtb	r2, r2
 8001ea6:	f042 0220 	orr.w	r2, r2, #32
 8001eaa:	b2d2      	uxtb	r2, r2
 8001eac:	f002 021f 	and.w	r2, r2, #31
 8001eb0:	2101      	movs	r1, #1
 8001eb2:	fa01 f202 	lsl.w	r2, r1, r2
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d171      	bne.n	8001fa0 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e0ea      	b.n	8002096 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d137      	bne.n	8001f38 <HAL_RCC_ClockConfig+0x164>
 8001ec8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ecc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ece:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001ed0:	fa93 f3a3 	rbit	r3, r3
 8001ed4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001ed6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ed8:	fab3 f383 	clz	r3, r3
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ee0:	d802      	bhi.n	8001ee8 <HAL_RCC_ClockConfig+0x114>
 8001ee2:	4b4d      	ldr	r3, [pc, #308]	@ (8002018 <HAL_RCC_ClockConfig+0x244>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	e00f      	b.n	8001f08 <HAL_RCC_ClockConfig+0x134>
 8001ee8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001eec:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ef0:	fa93 f3a3 	rbit	r3, r3
 8001ef4:	647b      	str	r3, [r7, #68]	@ 0x44
 8001ef6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001efa:	643b      	str	r3, [r7, #64]	@ 0x40
 8001efc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001efe:	fa93 f3a3 	rbit	r3, r3
 8001f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f04:	4b44      	ldr	r3, [pc, #272]	@ (8002018 <HAL_RCC_ClockConfig+0x244>)
 8001f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f08:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f0c:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001f0e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001f10:	fa92 f2a2 	rbit	r2, r2
 8001f14:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8001f16:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001f18:	fab2 f282 	clz	r2, r2
 8001f1c:	b2d2      	uxtb	r2, r2
 8001f1e:	f042 0220 	orr.w	r2, r2, #32
 8001f22:	b2d2      	uxtb	r2, r2
 8001f24:	f002 021f 	and.w	r2, r2, #31
 8001f28:	2101      	movs	r1, #1
 8001f2a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f2e:	4013      	ands	r3, r2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d135      	bne.n	8001fa0 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e0ae      	b.n	8002096 <HAL_RCC_ClockConfig+0x2c2>
 8001f38:	2302      	movs	r3, #2
 8001f3a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f3e:	fa93 f3a3 	rbit	r3, r3
 8001f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8001f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f46:	fab3 f383 	clz	r3, r3
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	2b3f      	cmp	r3, #63	@ 0x3f
 8001f4e:	d802      	bhi.n	8001f56 <HAL_RCC_ClockConfig+0x182>
 8001f50:	4b31      	ldr	r3, [pc, #196]	@ (8002018 <HAL_RCC_ClockConfig+0x244>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	e00d      	b.n	8001f72 <HAL_RCC_ClockConfig+0x19e>
 8001f56:	2302      	movs	r3, #2
 8001f58:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f5c:	fa93 f3a3 	rbit	r3, r3
 8001f60:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f62:	2302      	movs	r3, #2
 8001f64:	623b      	str	r3, [r7, #32]
 8001f66:	6a3b      	ldr	r3, [r7, #32]
 8001f68:	fa93 f3a3 	rbit	r3, r3
 8001f6c:	61fb      	str	r3, [r7, #28]
 8001f6e:	4b2a      	ldr	r3, [pc, #168]	@ (8002018 <HAL_RCC_ClockConfig+0x244>)
 8001f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f72:	2202      	movs	r2, #2
 8001f74:	61ba      	str	r2, [r7, #24]
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	fa92 f2a2 	rbit	r2, r2
 8001f7c:	617a      	str	r2, [r7, #20]
  return result;
 8001f7e:	697a      	ldr	r2, [r7, #20]
 8001f80:	fab2 f282 	clz	r2, r2
 8001f84:	b2d2      	uxtb	r2, r2
 8001f86:	f042 0220 	orr.w	r2, r2, #32
 8001f8a:	b2d2      	uxtb	r2, r2
 8001f8c:	f002 021f 	and.w	r2, r2, #31
 8001f90:	2101      	movs	r1, #1
 8001f92:	fa01 f202 	lsl.w	r2, r1, r2
 8001f96:	4013      	ands	r3, r2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d101      	bne.n	8001fa0 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e07a      	b.n	8002096 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fa0:	4b1d      	ldr	r3, [pc, #116]	@ (8002018 <HAL_RCC_ClockConfig+0x244>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f023 0203 	bic.w	r2, r3, #3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	491a      	ldr	r1, [pc, #104]	@ (8002018 <HAL_RCC_ClockConfig+0x244>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fb2:	f7fe fc7d 	bl	80008b0 <HAL_GetTick>
 8001fb6:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fb8:	e00a      	b.n	8001fd0 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fba:	f7fe fc79 	bl	80008b0 <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e062      	b.n	8002096 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fd0:	4b11      	ldr	r3, [pc, #68]	@ (8002018 <HAL_RCC_ClockConfig+0x244>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f003 020c 	and.w	r2, r3, #12
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d1eb      	bne.n	8001fba <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fe2:	4b0c      	ldr	r3, [pc, #48]	@ (8002014 <HAL_RCC_ClockConfig+0x240>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0307 	and.w	r3, r3, #7
 8001fea:	683a      	ldr	r2, [r7, #0]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d215      	bcs.n	800201c <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff0:	4b08      	ldr	r3, [pc, #32]	@ (8002014 <HAL_RCC_ClockConfig+0x240>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f023 0207 	bic.w	r2, r3, #7
 8001ff8:	4906      	ldr	r1, [pc, #24]	@ (8002014 <HAL_RCC_ClockConfig+0x240>)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002000:	4b04      	ldr	r3, [pc, #16]	@ (8002014 <HAL_RCC_ClockConfig+0x240>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0307 	and.w	r3, r3, #7
 8002008:	683a      	ldr	r2, [r7, #0]
 800200a:	429a      	cmp	r2, r3
 800200c:	d006      	beq.n	800201c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e041      	b.n	8002096 <HAL_RCC_ClockConfig+0x2c2>
 8002012:	bf00      	nop
 8002014:	40022000 	.word	0x40022000
 8002018:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0304 	and.w	r3, r3, #4
 8002024:	2b00      	cmp	r3, #0
 8002026:	d008      	beq.n	800203a <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002028:	4b1d      	ldr	r3, [pc, #116]	@ (80020a0 <HAL_RCC_ClockConfig+0x2cc>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	491a      	ldr	r1, [pc, #104]	@ (80020a0 <HAL_RCC_ClockConfig+0x2cc>)
 8002036:	4313      	orrs	r3, r2
 8002038:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0308 	and.w	r3, r3, #8
 8002042:	2b00      	cmp	r3, #0
 8002044:	d009      	beq.n	800205a <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002046:	4b16      	ldr	r3, [pc, #88]	@ (80020a0 <HAL_RCC_ClockConfig+0x2cc>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	4912      	ldr	r1, [pc, #72]	@ (80020a0 <HAL_RCC_ClockConfig+0x2cc>)
 8002056:	4313      	orrs	r3, r2
 8002058:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800205a:	f000 f829 	bl	80020b0 <HAL_RCC_GetSysClockFreq>
 800205e:	4601      	mov	r1, r0
 8002060:	4b0f      	ldr	r3, [pc, #60]	@ (80020a0 <HAL_RCC_ClockConfig+0x2cc>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002068:	22f0      	movs	r2, #240	@ 0xf0
 800206a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	fa92 f2a2 	rbit	r2, r2
 8002072:	60fa      	str	r2, [r7, #12]
  return result;
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	fab2 f282 	clz	r2, r2
 800207a:	b2d2      	uxtb	r2, r2
 800207c:	40d3      	lsrs	r3, r2
 800207e:	4a09      	ldr	r2, [pc, #36]	@ (80020a4 <HAL_RCC_ClockConfig+0x2d0>)
 8002080:	5cd3      	ldrb	r3, [r2, r3]
 8002082:	fa21 f303 	lsr.w	r3, r1, r3
 8002086:	4a08      	ldr	r2, [pc, #32]	@ (80020a8 <HAL_RCC_ClockConfig+0x2d4>)
 8002088:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800208a:	4b08      	ldr	r3, [pc, #32]	@ (80020ac <HAL_RCC_ClockConfig+0x2d8>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4618      	mov	r0, r3
 8002090:	f7fe fbca 	bl	8000828 <HAL_InitTick>
  
  return HAL_OK;
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3778      	adds	r7, #120	@ 0x78
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	40021000 	.word	0x40021000
 80020a4:	08002cf8 	.word	0x08002cf8
 80020a8:	20000000 	.word	0x20000000
 80020ac:	20000004 	.word	0x20000004

080020b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b087      	sub	sp, #28
 80020b4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020b6:	2300      	movs	r3, #0
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	2300      	movs	r3, #0
 80020bc:	60bb      	str	r3, [r7, #8]
 80020be:	2300      	movs	r3, #0
 80020c0:	617b      	str	r3, [r7, #20]
 80020c2:	2300      	movs	r3, #0
 80020c4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80020c6:	2300      	movs	r3, #0
 80020c8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80020ca:	4b1e      	ldr	r3, [pc, #120]	@ (8002144 <HAL_RCC_GetSysClockFreq+0x94>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f003 030c 	and.w	r3, r3, #12
 80020d6:	2b04      	cmp	r3, #4
 80020d8:	d002      	beq.n	80020e0 <HAL_RCC_GetSysClockFreq+0x30>
 80020da:	2b08      	cmp	r3, #8
 80020dc:	d003      	beq.n	80020e6 <HAL_RCC_GetSysClockFreq+0x36>
 80020de:	e026      	b.n	800212e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020e0:	4b19      	ldr	r3, [pc, #100]	@ (8002148 <HAL_RCC_GetSysClockFreq+0x98>)
 80020e2:	613b      	str	r3, [r7, #16]
      break;
 80020e4:	e026      	b.n	8002134 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	0c9b      	lsrs	r3, r3, #18
 80020ea:	f003 030f 	and.w	r3, r3, #15
 80020ee:	4a17      	ldr	r2, [pc, #92]	@ (800214c <HAL_RCC_GetSysClockFreq+0x9c>)
 80020f0:	5cd3      	ldrb	r3, [r2, r3]
 80020f2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80020f4:	4b13      	ldr	r3, [pc, #76]	@ (8002144 <HAL_RCC_GetSysClockFreq+0x94>)
 80020f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020f8:	f003 030f 	and.w	r3, r3, #15
 80020fc:	4a14      	ldr	r2, [pc, #80]	@ (8002150 <HAL_RCC_GetSysClockFreq+0xa0>)
 80020fe:	5cd3      	ldrb	r3, [r2, r3]
 8002100:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d008      	beq.n	800211e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800210c:	4a0e      	ldr	r2, [pc, #56]	@ (8002148 <HAL_RCC_GetSysClockFreq+0x98>)
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	fbb2 f2f3 	udiv	r2, r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	fb02 f303 	mul.w	r3, r2, r3
 800211a:	617b      	str	r3, [r7, #20]
 800211c:	e004      	b.n	8002128 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a0c      	ldr	r2, [pc, #48]	@ (8002154 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002122:	fb02 f303 	mul.w	r3, r2, r3
 8002126:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	613b      	str	r3, [r7, #16]
      break;
 800212c:	e002      	b.n	8002134 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800212e:	4b06      	ldr	r3, [pc, #24]	@ (8002148 <HAL_RCC_GetSysClockFreq+0x98>)
 8002130:	613b      	str	r3, [r7, #16]
      break;
 8002132:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002134:	693b      	ldr	r3, [r7, #16]
}
 8002136:	4618      	mov	r0, r3
 8002138:	371c      	adds	r7, #28
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	40021000 	.word	0x40021000
 8002148:	007a1200 	.word	0x007a1200
 800214c:	08002d08 	.word	0x08002d08
 8002150:	08002d18 	.word	0x08002d18
 8002154:	003d0900 	.word	0x003d0900

08002158 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d101      	bne.n	800216a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e09d      	b.n	80022a6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800216e:	2b00      	cmp	r3, #0
 8002170:	d108      	bne.n	8002184 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800217a:	d009      	beq.n	8002190 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	61da      	str	r2, [r3, #28]
 8002182:	e005      	b.n	8002190 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d106      	bne.n	80021b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f7fe fa56 	bl	800065c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2202      	movs	r2, #2
 80021b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80021c6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80021d0:	d902      	bls.n	80021d8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80021d2:	2300      	movs	r3, #0
 80021d4:	60fb      	str	r3, [r7, #12]
 80021d6:	e002      	b.n	80021de <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80021d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021dc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80021e6:	d007      	beq.n	80021f8 <HAL_SPI_Init+0xa0>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80021f0:	d002      	beq.n	80021f8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002208:	431a      	orrs	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	431a      	orrs	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	695b      	ldr	r3, [r3, #20]
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	431a      	orrs	r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002226:	431a      	orrs	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	69db      	ldr	r3, [r3, #28]
 800222c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002230:	431a      	orrs	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a1b      	ldr	r3, [r3, #32]
 8002236:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800223a:	ea42 0103 	orr.w	r1, r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002242:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	430a      	orrs	r2, r1
 800224c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	0c1b      	lsrs	r3, r3, #16
 8002254:	f003 0204 	and.w	r2, r3, #4
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800225c:	f003 0310 	and.w	r3, r3, #16
 8002260:	431a      	orrs	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002266:	f003 0308 	and.w	r3, r3, #8
 800226a:	431a      	orrs	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002274:	ea42 0103 	orr.w	r1, r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	430a      	orrs	r2, r1
 8002284:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	69da      	ldr	r2, [r3, #28]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002294:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b088      	sub	sp, #32
 80022b2:	af02      	add	r7, sp, #8
 80022b4:	60f8      	str	r0, [r7, #12]
 80022b6:	60b9      	str	r1, [r7, #8]
 80022b8:	603b      	str	r3, [r7, #0]
 80022ba:	4613      	mov	r3, r2
 80022bc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80022be:	2300      	movs	r3, #0
 80022c0:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d002      	beq.n	80022d4 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80022ce:	2302      	movs	r3, #2
 80022d0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80022d2:	e11a      	b.n	800250a <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80022dc:	d112      	bne.n	8002304 <HAL_SPI_Receive+0x56>
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d10e      	bne.n	8002304 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2204      	movs	r2, #4
 80022ea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80022ee:	88fa      	ldrh	r2, [r7, #6]
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	9300      	str	r3, [sp, #0]
 80022f4:	4613      	mov	r3, r2
 80022f6:	68ba      	ldr	r2, [r7, #8]
 80022f8:	68b9      	ldr	r1, [r7, #8]
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f000 f90e 	bl	800251c <HAL_SPI_TransmitReceive>
 8002300:	4603      	mov	r3, r0
 8002302:	e107      	b.n	8002514 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800230a:	2b01      	cmp	r3, #1
 800230c:	d101      	bne.n	8002312 <HAL_SPI_Receive+0x64>
 800230e:	2302      	movs	r3, #2
 8002310:	e100      	b.n	8002514 <HAL_SPI_Receive+0x266>
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2201      	movs	r2, #1
 8002316:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800231a:	f7fe fac9 	bl	80008b0 <HAL_GetTick>
 800231e:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d002      	beq.n	800232c <HAL_SPI_Receive+0x7e>
 8002326:	88fb      	ldrh	r3, [r7, #6]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d102      	bne.n	8002332 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002330:	e0eb      	b.n	800250a <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2204      	movs	r2, #4
 8002336:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2200      	movs	r2, #0
 800233e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	68ba      	ldr	r2, [r7, #8]
 8002344:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	88fa      	ldrh	r2, [r7, #6]
 800234a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	88fa      	ldrh	r2, [r7, #6]
 8002352:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2200      	movs	r2, #0
 800235a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2200      	movs	r2, #0
 8002360:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2200      	movs	r2, #0
 8002366:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2200      	movs	r2, #0
 8002372:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800237c:	d908      	bls.n	8002390 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	685a      	ldr	r2, [r3, #4]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800238c:	605a      	str	r2, [r3, #4]
 800238e:	e007      	b.n	80023a0 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	685a      	ldr	r2, [r3, #4]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800239e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80023a8:	d10f      	bne.n	80023ca <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80023b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80023c8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023d4:	2b40      	cmp	r3, #64	@ 0x40
 80023d6:	d007      	beq.n	80023e8 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80023e6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80023f0:	d86f      	bhi.n	80024d2 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80023f2:	e034      	b.n	800245e <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d117      	bne.n	8002432 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f103 020c 	add.w	r2, r3, #12
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240e:	7812      	ldrb	r2, [r2, #0]
 8002410:	b2d2      	uxtb	r2, r2
 8002412:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002418:	1c5a      	adds	r2, r3, #1
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002424:	b29b      	uxth	r3, r3
 8002426:	3b01      	subs	r3, #1
 8002428:	b29a      	uxth	r2, r3
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8002430:	e015      	b.n	800245e <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002432:	f7fe fa3d 	bl	80008b0 <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	429a      	cmp	r2, r3
 8002440:	d803      	bhi.n	800244a <HAL_SPI_Receive+0x19c>
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002448:	d102      	bne.n	8002450 <HAL_SPI_Receive+0x1a2>
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d106      	bne.n	800245e <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800245c:	e055      	b.n	800250a <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002464:	b29b      	uxth	r3, r3
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1c4      	bne.n	80023f4 <HAL_SPI_Receive+0x146>
 800246a:	e038      	b.n	80024de <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b01      	cmp	r3, #1
 8002478:	d115      	bne.n	80024a6 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	68da      	ldr	r2, [r3, #12]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002484:	b292      	uxth	r2, r2
 8002486:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248c:	1c9a      	adds	r2, r3, #2
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002498:	b29b      	uxth	r3, r3
 800249a:	3b01      	subs	r3, #1
 800249c:	b29a      	uxth	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80024a4:	e015      	b.n	80024d2 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024a6:	f7fe fa03 	bl	80008b0 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d803      	bhi.n	80024be <HAL_SPI_Receive+0x210>
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80024bc:	d102      	bne.n	80024c4 <HAL_SPI_Receive+0x216>
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d106      	bne.n	80024d2 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80024d0:	e01b      	b.n	800250a <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80024d8:	b29b      	uxth	r3, r3
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1c6      	bne.n	800246c <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	6839      	ldr	r1, [r7, #0]
 80024e2:	68f8      	ldr	r0, [r7, #12]
 80024e4:	f000 fb5a 	bl	8002b9c <SPI_EndRxTransaction>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d002      	beq.n	80024f4 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2220      	movs	r2, #32
 80024f2:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d002      	beq.n	8002502 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	75fb      	strb	r3, [r7, #23]
 8002500:	e003      	b.n	800250a <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2201      	movs	r2, #1
 8002506:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8002512:	7dfb      	ldrb	r3, [r7, #23]
}
 8002514:	4618      	mov	r0, r3
 8002516:	3718      	adds	r7, #24
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b08a      	sub	sp, #40	@ 0x28
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	607a      	str	r2, [r7, #4]
 8002528:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800252a:	2301      	movs	r3, #1
 800252c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800252e:	2300      	movs	r3, #0
 8002530:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800253a:	2b01      	cmp	r3, #1
 800253c:	d101      	bne.n	8002542 <HAL_SPI_TransmitReceive+0x26>
 800253e:	2302      	movs	r3, #2
 8002540:	e20a      	b.n	8002958 <HAL_SPI_TransmitReceive+0x43c>
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2201      	movs	r2, #1
 8002546:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800254a:	f7fe f9b1 	bl	80008b0 <HAL_GetTick>
 800254e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002556:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800255e:	887b      	ldrh	r3, [r7, #2]
 8002560:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002562:	887b      	ldrh	r3, [r7, #2]
 8002564:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002566:	7efb      	ldrb	r3, [r7, #27]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d00e      	beq.n	800258a <HAL_SPI_TransmitReceive+0x6e>
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002572:	d106      	bne.n	8002582 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d102      	bne.n	8002582 <HAL_SPI_TransmitReceive+0x66>
 800257c:	7efb      	ldrb	r3, [r7, #27]
 800257e:	2b04      	cmp	r3, #4
 8002580:	d003      	beq.n	800258a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002582:	2302      	movs	r3, #2
 8002584:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8002588:	e1e0      	b.n	800294c <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d005      	beq.n	800259c <HAL_SPI_TransmitReceive+0x80>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d002      	beq.n	800259c <HAL_SPI_TransmitReceive+0x80>
 8002596:	887b      	ldrh	r3, [r7, #2]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d103      	bne.n	80025a4 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80025a2:	e1d3      	b.n	800294c <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	2b04      	cmp	r3, #4
 80025ae:	d003      	beq.n	80025b8 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2205      	movs	r2, #5
 80025b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2200      	movs	r2, #0
 80025bc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	887a      	ldrh	r2, [r7, #2]
 80025c8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	887a      	ldrh	r2, [r7, #2]
 80025d0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	68ba      	ldr	r2, [r7, #8]
 80025d8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	887a      	ldrh	r2, [r7, #2]
 80025de:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	887a      	ldrh	r2, [r7, #2]
 80025e4:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2200      	movs	r2, #0
 80025ea:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2200      	movs	r2, #0
 80025f0:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80025fa:	d802      	bhi.n	8002602 <HAL_SPI_TransmitReceive+0xe6>
 80025fc:	8a3b      	ldrh	r3, [r7, #16]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d908      	bls.n	8002614 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	685a      	ldr	r2, [r3, #4]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002610:	605a      	str	r2, [r3, #4]
 8002612:	e007      	b.n	8002624 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	685a      	ldr	r2, [r3, #4]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002622:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800262e:	2b40      	cmp	r3, #64	@ 0x40
 8002630:	d007      	beq.n	8002642 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002640:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800264a:	f240 8081 	bls.w	8002750 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d002      	beq.n	800265c <HAL_SPI_TransmitReceive+0x140>
 8002656:	8a7b      	ldrh	r3, [r7, #18]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d16d      	bne.n	8002738 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002660:	881a      	ldrh	r2, [r3, #0]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800266c:	1c9a      	adds	r2, r3, #2
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002676:	b29b      	uxth	r3, r3
 8002678:	3b01      	subs	r3, #1
 800267a:	b29a      	uxth	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002680:	e05a      	b.n	8002738 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b02      	cmp	r3, #2
 800268e:	d11b      	bne.n	80026c8 <HAL_SPI_TransmitReceive+0x1ac>
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002694:	b29b      	uxth	r3, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d016      	beq.n	80026c8 <HAL_SPI_TransmitReceive+0x1ac>
 800269a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800269c:	2b01      	cmp	r3, #1
 800269e:	d113      	bne.n	80026c8 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026a4:	881a      	ldrh	r2, [r3, #0]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026b0:	1c9a      	adds	r2, r3, #2
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	3b01      	subs	r3, #1
 80026be:	b29a      	uxth	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80026c4:	2300      	movs	r3, #0
 80026c6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d11c      	bne.n	8002710 <HAL_SPI_TransmitReceive+0x1f4>
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80026dc:	b29b      	uxth	r3, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d016      	beq.n	8002710 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68da      	ldr	r2, [r3, #12]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ec:	b292      	uxth	r2, r2
 80026ee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f4:	1c9a      	adds	r2, r3, #2
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002700:	b29b      	uxth	r3, r3
 8002702:	3b01      	subs	r3, #1
 8002704:	b29a      	uxth	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800270c:	2301      	movs	r3, #1
 800270e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002710:	f7fe f8ce 	bl	80008b0 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800271c:	429a      	cmp	r2, r3
 800271e:	d80b      	bhi.n	8002738 <HAL_SPI_TransmitReceive+0x21c>
 8002720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002722:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002726:	d007      	beq.n	8002738 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2201      	movs	r2, #1
 8002732:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8002736:	e109      	b.n	800294c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800273c:	b29b      	uxth	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d19f      	bne.n	8002682 <HAL_SPI_TransmitReceive+0x166>
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002748:	b29b      	uxth	r3, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	d199      	bne.n	8002682 <HAL_SPI_TransmitReceive+0x166>
 800274e:	e0e3      	b.n	8002918 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d003      	beq.n	8002760 <HAL_SPI_TransmitReceive+0x244>
 8002758:	8a7b      	ldrh	r3, [r7, #18]
 800275a:	2b01      	cmp	r3, #1
 800275c:	f040 80cf 	bne.w	80028fe <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002764:	b29b      	uxth	r3, r3
 8002766:	2b01      	cmp	r3, #1
 8002768:	d912      	bls.n	8002790 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800276e:	881a      	ldrh	r2, [r3, #0]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800277a:	1c9a      	adds	r2, r3, #2
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002784:	b29b      	uxth	r3, r3
 8002786:	3b02      	subs	r3, #2
 8002788:	b29a      	uxth	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800278e:	e0b6      	b.n	80028fe <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	330c      	adds	r3, #12
 800279a:	7812      	ldrb	r2, [r2, #0]
 800279c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027a2:	1c5a      	adds	r2, r3, #1
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	3b01      	subs	r3, #1
 80027b0:	b29a      	uxth	r2, r3
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027b6:	e0a2      	b.n	80028fe <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d134      	bne.n	8002830 <HAL_SPI_TransmitReceive+0x314>
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d02f      	beq.n	8002830 <HAL_SPI_TransmitReceive+0x314>
 80027d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d12c      	bne.n	8002830 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027da:	b29b      	uxth	r3, r3
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d912      	bls.n	8002806 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027e4:	881a      	ldrh	r2, [r3, #0]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027f0:	1c9a      	adds	r2, r3, #2
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	3b02      	subs	r3, #2
 80027fe:	b29a      	uxth	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002804:	e012      	b.n	800282c <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	330c      	adds	r3, #12
 8002810:	7812      	ldrb	r2, [r2, #0]
 8002812:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002818:	1c5a      	adds	r2, r3, #1
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002822:	b29b      	uxth	r3, r3
 8002824:	3b01      	subs	r3, #1
 8002826:	b29a      	uxth	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800282c:	2300      	movs	r3, #0
 800282e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	2b01      	cmp	r3, #1
 800283c:	d148      	bne.n	80028d0 <HAL_SPI_TransmitReceive+0x3b4>
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002844:	b29b      	uxth	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d042      	beq.n	80028d0 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002850:	b29b      	uxth	r3, r3
 8002852:	2b01      	cmp	r3, #1
 8002854:	d923      	bls.n	800289e <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68da      	ldr	r2, [r3, #12]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002860:	b292      	uxth	r2, r2
 8002862:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002868:	1c9a      	adds	r2, r3, #2
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002874:	b29b      	uxth	r3, r3
 8002876:	3b02      	subs	r3, #2
 8002878:	b29a      	uxth	r2, r3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002886:	b29b      	uxth	r3, r3
 8002888:	2b01      	cmp	r3, #1
 800288a:	d81f      	bhi.n	80028cc <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	685a      	ldr	r2, [r3, #4]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800289a:	605a      	str	r2, [r3, #4]
 800289c:	e016      	b.n	80028cc <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f103 020c 	add.w	r2, r3, #12
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028aa:	7812      	ldrb	r2, [r2, #0]
 80028ac:	b2d2      	uxtb	r2, r2
 80028ae:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b4:	1c5a      	adds	r2, r3, #1
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	3b01      	subs	r3, #1
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80028cc:	2301      	movs	r3, #1
 80028ce:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80028d0:	f7fd ffee 	bl	80008b0 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80028dc:	429a      	cmp	r2, r3
 80028de:	d803      	bhi.n	80028e8 <HAL_SPI_TransmitReceive+0x3cc>
 80028e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80028e6:	d102      	bne.n	80028ee <HAL_SPI_TransmitReceive+0x3d2>
 80028e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d107      	bne.n	80028fe <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80028fc:	e026      	b.n	800294c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002902:	b29b      	uxth	r3, r3
 8002904:	2b00      	cmp	r3, #0
 8002906:	f47f af57 	bne.w	80027b8 <HAL_SPI_TransmitReceive+0x29c>
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002910:	b29b      	uxth	r3, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	f47f af50 	bne.w	80027b8 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002918:	69fa      	ldr	r2, [r7, #28]
 800291a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800291c:	68f8      	ldr	r0, [r7, #12]
 800291e:	f000 f995 	bl	8002c4c <SPI_EndRxTxTransaction>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d005      	beq.n	8002934 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2220      	movs	r2, #32
 8002932:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002938:	2b00      	cmp	r3, #0
 800293a:	d003      	beq.n	8002944 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002942:	e003      	b.n	800294c <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8002954:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8002958:	4618      	mov	r0, r3
 800295a:	3728      	adds	r7, #40	@ 0x28
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b088      	sub	sp, #32
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	603b      	str	r3, [r7, #0]
 800296c:	4613      	mov	r3, r2
 800296e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002970:	f7fd ff9e 	bl	80008b0 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002978:	1a9b      	subs	r3, r3, r2
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	4413      	add	r3, r2
 800297e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002980:	f7fd ff96 	bl	80008b0 <HAL_GetTick>
 8002984:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002986:	4b39      	ldr	r3, [pc, #228]	@ (8002a6c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	015b      	lsls	r3, r3, #5
 800298c:	0d1b      	lsrs	r3, r3, #20
 800298e:	69fa      	ldr	r2, [r7, #28]
 8002990:	fb02 f303 	mul.w	r3, r2, r3
 8002994:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002996:	e054      	b.n	8002a42 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800299e:	d050      	beq.n	8002a42 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80029a0:	f7fd ff86 	bl	80008b0 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	69fa      	ldr	r2, [r7, #28]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d902      	bls.n	80029b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d13d      	bne.n	8002a32 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80029c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80029ce:	d111      	bne.n	80029f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80029d8:	d004      	beq.n	80029e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029e2:	d107      	bne.n	80029f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80029f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029fc:	d10f      	bne.n	8002a1e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002a0c:	601a      	str	r2, [r3, #0]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002a1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e017      	b.n	8002a62 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d101      	bne.n	8002a3c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	689a      	ldr	r2, [r3, #8]
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	68ba      	ldr	r2, [r7, #8]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	bf0c      	ite	eq
 8002a52:	2301      	moveq	r3, #1
 8002a54:	2300      	movne	r3, #0
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	461a      	mov	r2, r3
 8002a5a:	79fb      	ldrb	r3, [r7, #7]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d19b      	bne.n	8002998 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3720      	adds	r7, #32
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	20000000 	.word	0x20000000

08002a70 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b08a      	sub	sp, #40	@ 0x28
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	607a      	str	r2, [r7, #4]
 8002a7c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002a82:	f7fd ff15 	bl	80008b0 <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a8a:	1a9b      	subs	r3, r3, r2
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	4413      	add	r3, r2
 8002a90:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8002a92:	f7fd ff0d 	bl	80008b0 <HAL_GetTick>
 8002a96:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	330c      	adds	r3, #12
 8002a9e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002aa0:	4b3d      	ldr	r3, [pc, #244]	@ (8002b98 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	4413      	add	r3, r2
 8002aaa:	00da      	lsls	r2, r3, #3
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	0d1b      	lsrs	r3, r3, #20
 8002ab0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ab2:	fb02 f303 	mul.w	r3, r2, r3
 8002ab6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002ab8:	e060      	b.n	8002b7c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002ac0:	d107      	bne.n	8002ad2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d104      	bne.n	8002ad2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002ad0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002ad8:	d050      	beq.n	8002b7c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ada:	f7fd fee9 	bl	80008b0 <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	6a3b      	ldr	r3, [r7, #32]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d902      	bls.n	8002af0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8002aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d13d      	bne.n	8002b6c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	685a      	ldr	r2, [r3, #4]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002afe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002b08:	d111      	bne.n	8002b2e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b12:	d004      	beq.n	8002b1e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b1c:	d107      	bne.n	8002b2e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b2c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b36:	d10f      	bne.n	8002b58 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002b46:	601a      	str	r2, [r3, #0]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002b56:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e010      	b.n	8002b8e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002b72:	2300      	movs	r3, #0
 8002b74:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	3b01      	subs	r3, #1
 8002b7a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	689a      	ldr	r2, [r3, #8]
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	4013      	ands	r3, r2
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d196      	bne.n	8002aba <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3728      	adds	r7, #40	@ 0x28
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	20000000 	.word	0x20000000

08002b9c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af02      	add	r7, sp, #8
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002bb0:	d111      	bne.n	8002bd6 <SPI_EndRxTransaction+0x3a>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002bba:	d004      	beq.n	8002bc6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bc4:	d107      	bne.n	8002bd6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002bd4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	9300      	str	r3, [sp, #0]
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	2180      	movs	r1, #128	@ 0x80
 8002be0:	68f8      	ldr	r0, [r7, #12]
 8002be2:	f7ff febd 	bl	8002960 <SPI_WaitFlagStateUntilTimeout>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d007      	beq.n	8002bfc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bf0:	f043 0220 	orr.w	r2, r3, #32
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e023      	b.n	8002c44 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c04:	d11d      	bne.n	8002c42 <SPI_EndRxTransaction+0xa6>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c0e:	d004      	beq.n	8002c1a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c18:	d113      	bne.n	8002c42 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	9300      	str	r3, [sp, #0]
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8002c26:	68f8      	ldr	r0, [r7, #12]
 8002c28:	f7ff ff22 	bl	8002a70 <SPI_WaitFifoStateUntilTimeout>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d007      	beq.n	8002c42 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c36:	f043 0220 	orr.w	r2, r3, #32
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e000      	b.n	8002c44 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3710      	adds	r7, #16
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b086      	sub	sp, #24
 8002c50:	af02      	add	r7, sp, #8
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	9300      	str	r3, [sp, #0]
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8002c64:	68f8      	ldr	r0, [r7, #12]
 8002c66:	f7ff ff03 	bl	8002a70 <SPI_WaitFifoStateUntilTimeout>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d007      	beq.n	8002c80 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c74:	f043 0220 	orr.w	r2, r3, #32
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e027      	b.n	8002cd0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	9300      	str	r3, [sp, #0]
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	2200      	movs	r2, #0
 8002c88:	2180      	movs	r1, #128	@ 0x80
 8002c8a:	68f8      	ldr	r0, [r7, #12]
 8002c8c:	f7ff fe68 	bl	8002960 <SPI_WaitFlagStateUntilTimeout>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d007      	beq.n	8002ca6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c9a:	f043 0220 	orr.w	r2, r3, #32
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e014      	b.n	8002cd0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	9300      	str	r3, [sp, #0]
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8002cb2:	68f8      	ldr	r0, [r7, #12]
 8002cb4:	f7ff fedc 	bl	8002a70 <SPI_WaitFifoStateUntilTimeout>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d007      	beq.n	8002cce <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cc2:	f043 0220 	orr.w	r2, r3, #32
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e000      	b.n	8002cd0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002cce:	2300      	movs	r3, #0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3710      	adds	r7, #16
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <_init>:
 8002cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cda:	bf00      	nop
 8002cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cde:	bc08      	pop	{r3}
 8002ce0:	469e      	mov	lr, r3
 8002ce2:	4770      	bx	lr

08002ce4 <_fini>:
 8002ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ce6:	bf00      	nop
 8002ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cea:	bc08      	pop	{r3}
 8002cec:	469e      	mov	lr, r3
 8002cee:	4770      	bx	lr
